
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009478  08009478  00019478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009578  08009578  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  20000088  08009608  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08009608  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a3f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed9  00000000  00000000  00039af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001160  00000000  00000000  0003c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  0003db30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255d5  00000000  00000000  0003eb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1dd  00000000  00000000  0006410d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc8ae  00000000  00000000  000722ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014eb98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  0014ec14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009460 	.word	0x08009460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08009460 	.word	0x08009460

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b972 	b.w	8000e64 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	9e08      	ldr	r6, [sp, #32]
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4688      	mov	r8, r1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14b      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4615      	mov	r5, r2
 8000baa:	d967      	bls.n	8000c7c <__udivmoddi4+0xe4>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b14a      	cbz	r2, 8000bc6 <__udivmoddi4+0x2e>
 8000bb2:	f1c2 0720 	rsb	r7, r2, #32
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	fa20 f707 	lsr.w	r7, r0, r7
 8000bbe:	4095      	lsls	r5, r2
 8000bc0:	ea47 0803 	orr.w	r8, r7, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd0:	fa1f fc85 	uxth.w	ip, r5
 8000bd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x60>
 8000be4:	18eb      	adds	r3, r5, r3
 8000be6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bea:	f080 811b 	bcs.w	8000e24 <__udivmoddi4+0x28c>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 8118 	bls.w	8000e24 <__udivmoddi4+0x28c>
 8000bf4:	3f02      	subs	r7, #2
 8000bf6:	442b      	add	r3, r5
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0c:	45a4      	cmp	ip, r4
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x8c>
 8000c10:	192c      	adds	r4, r5, r4
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x290>
 8000c1a:	45a4      	cmp	ip, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x290>
 8000c20:	3802      	subs	r0, #2
 8000c22:	442c      	add	r4, r5
 8000c24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c28:	eba4 040c 	sub.w	r4, r4, ip
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	b11e      	cbz	r6, 8000c38 <__udivmoddi4+0xa0>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c6 4300 	strd	r4, r3, [r6]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xbe>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80eb 	beq.w	8000e1e <__udivmoddi4+0x286>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f783 	clz	r7, r3
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d147      	bne.n	8000cee <__udivmoddi4+0x156>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd0>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fa 	bhi.w	8000e5c <__udivmoddi4+0x2c4>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa0>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xe8>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 808f 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c8a:	1b49      	subs	r1, r1, r5
 8000c8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c90:	fa1f f885 	uxth.w	r8, r5
 8000c94:	2701      	movs	r7, #1
 8000c96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x124>
 8000cac:	18eb      	adds	r3, r5, r3
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x122>
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	f200 80cd 	bhi.w	8000e54 <__udivmoddi4+0x2bc>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x14c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x14a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80b6 	bhi.w	8000e4e <__udivmoddi4+0x2b6>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e79f      	b.n	8000c2e <__udivmoddi4+0x96>
 8000cee:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf2:	40bb      	lsls	r3, r7
 8000cf4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000d00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d0c:	4325      	orrs	r5, r4
 8000d0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d12:	0c2c      	lsrs	r4, r5, #16
 8000d14:	fb08 3319 	mls	r3, r8, r9, r3
 8000d18:	fa1f fa8e 	uxth.w	sl, lr
 8000d1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d20:	fb09 f40a 	mul.w	r4, r9, sl
 8000d24:	429c      	cmp	r4, r3
 8000d26:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1e 0303 	adds.w	r3, lr, r3
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d38:	f080 8087 	bcs.w	8000e4a <__udivmoddi4+0x2b2>
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	f240 8084 	bls.w	8000e4a <__udivmoddi4+0x2b2>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	4473      	add	r3, lr
 8000d48:	1b1b      	subs	r3, r3, r4
 8000d4a:	b2ad      	uxth	r5, r5
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d5c:	45a2      	cmp	sl, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1da>
 8000d60:	eb1e 0404 	adds.w	r4, lr, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	d26b      	bcs.n	8000e42 <__udivmoddi4+0x2aa>
 8000d6a:	45a2      	cmp	sl, r4
 8000d6c:	d969      	bls.n	8000e42 <__udivmoddi4+0x2aa>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4474      	add	r4, lr
 8000d72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d76:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7a:	eba4 040a 	sub.w	r4, r4, sl
 8000d7e:	454c      	cmp	r4, r9
 8000d80:	46c2      	mov	sl, r8
 8000d82:	464b      	mov	r3, r9
 8000d84:	d354      	bcc.n	8000e30 <__udivmoddi4+0x298>
 8000d86:	d051      	beq.n	8000e2c <__udivmoddi4+0x294>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d069      	beq.n	8000e60 <__udivmoddi4+0x2c8>
 8000d8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d90:	eb64 0403 	sbc.w	r4, r4, r3
 8000d94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d98:	40fd      	lsrs	r5, r7
 8000d9a:	40fc      	lsrs	r4, r7
 8000d9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000da0:	e9c6 5400 	strd	r5, r4, [r6]
 8000da4:	2700      	movs	r7, #0
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f703 	lsr.w	r7, r0, r3
 8000db0:	4095      	lsls	r5, r2
 8000db2:	fa01 f002 	lsl.w	r0, r1, r2
 8000db6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dbe:	4338      	orrs	r0, r7
 8000dc0:	0c01      	lsrs	r1, r0, #16
 8000dc2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc6:	fa1f f885 	uxth.w	r8, r5
 8000dca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb07 f308 	mul.w	r3, r7, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x256>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de4:	d22f      	bcs.n	8000e46 <__udivmoddi4+0x2ae>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d92d      	bls.n	8000e46 <__udivmoddi4+0x2ae>
 8000dea:	3f02      	subs	r7, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	b281      	uxth	r1, r0
 8000df2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfe:	fb00 f308 	mul.w	r3, r0, r8
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x27e>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e0c:	d217      	bcs.n	8000e3e <__udivmoddi4+0x2a6>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d915      	bls.n	8000e3e <__udivmoddi4+0x2a6>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1ac9      	subs	r1, r1, r3
 8000e18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e1c:	e73b      	b.n	8000c96 <__udivmoddi4+0xfe>
 8000e1e:	4637      	mov	r7, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e709      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e24:	4607      	mov	r7, r0
 8000e26:	e6e7      	b.n	8000bf8 <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x8c>
 8000e2c:	4541      	cmp	r1, r8
 8000e2e:	d2ab      	bcs.n	8000d88 <__udivmoddi4+0x1f0>
 8000e30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e34:	eb69 020e 	sbc.w	r2, r9, lr
 8000e38:	3801      	subs	r0, #1
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	e7a4      	b.n	8000d88 <__udivmoddi4+0x1f0>
 8000e3e:	4660      	mov	r0, ip
 8000e40:	e7e9      	b.n	8000e16 <__udivmoddi4+0x27e>
 8000e42:	4618      	mov	r0, r3
 8000e44:	e795      	b.n	8000d72 <__udivmoddi4+0x1da>
 8000e46:	4667      	mov	r7, ip
 8000e48:	e7d1      	b.n	8000dee <__udivmoddi4+0x256>
 8000e4a:	4681      	mov	r9, r0
 8000e4c:	e77c      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	442c      	add	r4, r5
 8000e52:	e747      	b.n	8000ce4 <__udivmoddi4+0x14c>
 8000e54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e58:	442b      	add	r3, r5
 8000e5a:	e72f      	b.n	8000cbc <__udivmoddi4+0x124>
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	e708      	b.n	8000c72 <__udivmoddi4+0xda>
 8000e60:	4637      	mov	r7, r6
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0xa0>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  count = 0; // keep count in while loop and reset every 10s
 8000e6e:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <main+0x188>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f003 fca8 	bl	80047c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f8e0 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 fc3e 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000e80:	f000 fbfe 	bl	8001680 <MX_DMA_Init>
  MX_CAN1_Init();
 8000e84:	f000 f944 	bl	8001110 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e88:	f000 f978 	bl	800117c <MX_CAN2_Init>
  MX_SPI5_Init();
 8000e8c:	f000 f9ac 	bl	80011e8 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000e90:	f000 f9e0 	bl	8001254 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e94:	f000 fab2 	bl	80013fc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e98:	f000 fb72 	bl	8001580 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e9c:	f000 fb9c 	bl	80015d8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ea0:	f000 fbc4 	bl	800162c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000ea4:	f000 fa50 	bl	8001348 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000ea8:	f000 fb24 	bl	80014f4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 8000eac:	f001 fa38 	bl	8002320 <led_off>
  power_on();
 8000eb0:	f001 fa4a 	bl	8002348 <power_on>
  dbus_uart_init();
 8000eb4:	f002 ffe8 	bl	8003e88 <dbus_uart_init>
  can_filter_init();
 8000eb8:	f000 ff26 	bl	8001d08 <can_filter_init>
  mpu_device_init();
 8000ebc:	f001 fdd4 	bl	8002a68 <mpu_device_init>
  init_quaternion();
 8000ec0:	f001 ff10 	bl	8002ce4 <init_quaternion>
  pwm_imu_start();
 8000ec4:	f002 fdf4 	bl	8003ab0 <pwm_imu_start>
  pwm_buzzer_start();
 8000ec8:	f002 fdfc 	bl	8003ac4 <pwm_buzzer_start>
  grand_pid_init();
 8000ecc:	f001 f810 	bl	8001ef0 <grand_pid_init>
  imu_calibration();
 8000ed0:	f001 f8b4 	bl	800203c <imu_calibration>

  yaw_target = YAW_POS_DEFAULT;
 8000ed4:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <main+0x18c>)
 8000ed6:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <main+0x190>)
 8000ed8:	601a      	str	r2, [r3, #0]
  pit_target = PIT_POS_DEFAULT;
 8000eda:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <main+0x194>)
 8000edc:	4a48      	ldr	r2, [pc, #288]	; (8001000 <main+0x198>)
 8000ede:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	mpu_get_data();
 8000ee0:	f001 fc68 	bl	80027b4 <mpu_get_data>
	imu_ahrs_update();
 8000ee4:	f002 f83a 	bl	8002f5c <imu_ahrs_update>
	imu_attitude_update();
 8000ee8:	f002 fcda 	bl	80038a0 <imu_attitude_update>
	yaw_ecd = motors[4].ecd;
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <main+0x19c>)
 8000eee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b45      	ldr	r3, [pc, #276]	; (8001008 <main+0x1a0>)
 8000ef4:	801a      	strh	r2, [r3, #0]

	yaw_target -= rc.ch1 * 100.0f / 660.0f;
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <main+0x18c>)
 8000ef8:	ed93 7a00 	vldr	s14, [r3]
 8000efc:	4b43      	ldr	r3, [pc, #268]	; (800100c <main+0x1a4>)
 8000efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8001010 <main+0x1a8>
 8000f0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f12:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8001014 <main+0x1ac>
 8000f16:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <main+0x18c>)
 8000f20:	edc3 7a00 	vstr	s15, [r3]
	yaw_target = set_rotation_target(yaw_target, ECD_PERIOD);
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <main+0x18c>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001018 <main+0x1b0>
 8000f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f32:	f000 fe4b 	bl	8001bcc <set_rotation_target>
 8000f36:	eef0 7a40 	vmov.f32	s15, s0
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <main+0x18c>)
 8000f3c:	edc3 7a00 	vstr	s15, [r3]
	yaw_out = yaw_ecd_pid_ctrl(motors[4].ecd, yaw_target);
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <main+0x19c>)
 8000f42:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <main+0x18c>)
 8000f4e:	ed93 7a00 	vldr	s14, [r3]
 8000f52:	eef0 0a47 	vmov.f32	s1, s14
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	f001 f9a5 	bl	80022a8 <yaw_ecd_pid_ctrl>
 8000f5e:	eef0 7a40 	vmov.f32	s15, s0
 8000f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f66:	ee17 3a90 	vmov	r3, s15
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <main+0x1b4>)
 8000f6e:	801a      	strh	r2, [r3, #0]

	//yaw_target += rc.ch1 * 1.0f / 660.0f;
	//yaw_target = set_rotation_target(yaw_target, ANGLE_PERIOD);
	//yaw_out = yaw_imu_pid_ctrl(imu.yaw, yaw_target);

	imu_temp_pid_ctrl(imu.temp, 50.0f);
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <main+0x1b8>)
 8000f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f76:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001024 <main+0x1bc>
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	f001 f967 	bl	8002250 <imu_temp_pid_ctrl>
	//can_transmit(&hcan1, CAN_CHASSIS_ALL_ID, 0,600,0,0);
	can_transmit(&hcan1, CAN_GIMBAL_ALL_ID, yaw_out, pit_out, trigger_out, 0);
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <main+0x1b4>)
 8000f84:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <main+0x1c0>)
 8000f8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <main+0x1c4>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	2200      	movs	r2, #0
 8000f96:	9201      	str	r2, [sp, #4]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <main+0x1c8>)
 8000fa4:	f000 feea 	bl	8001d7c <can_transmit>

	if (count%100 == 0)
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <main+0x188>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <main+0x1cc>)
 8000fae:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb2:	1159      	asrs	r1, r3, #5
 8000fb4:	17d3      	asrs	r3, r2, #31
 8000fb6:	1acb      	subs	r3, r1, r3
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d104      	bne.n	8000fce <main+0x166>
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000fc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc8:	481b      	ldr	r0, [pc, #108]	; (8001038 <main+0x1d0>)
 8000fca:	f005 f95a 	bl	8006282 <HAL_GPIO_TogglePin>
	}

	/* reset count every 10s */
	if (count == 2000)
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <main+0x188>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fd6:	d102      	bne.n	8000fde <main+0x176>
	{
		count = 0;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <main+0x188>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
	}
	count++;
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <main+0x188>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a02      	ldr	r2, [pc, #8]	; (8000ff0 <main+0x188>)
 8000fe6:	6013      	str	r3, [r2, #0]
	HAL_Delay(5);
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f003 fc5f 	bl	80048ac <HAL_Delay>
	mpu_get_data();
 8000fee:	e777      	b.n	8000ee0 <main+0x78>
 8000ff0:	200003a0 	.word	0x200003a0
 8000ff4:	200000a4 	.word	0x200000a4
 8000ff8:	45239000 	.word	0x45239000
 8000ffc:	200000a8 	.word	0x200000a8
 8001000:	45933000 	.word	0x45933000
 8001004:	20000598 	.word	0x20000598
 8001008:	20000594 	.word	0x20000594
 800100c:	200009e0 	.word	0x200009e0
 8001010:	42c80000 	.word	0x42c80000
 8001014:	44250000 	.word	0x44250000
 8001018:	46000000 	.word	0x46000000
 800101c:	200000ac 	.word	0x200000ac
 8001020:	200000e8 	.word	0x200000e8
 8001024:	42480000 	.word	0x42480000
 8001028:	200000ae 	.word	0x200000ae
 800102c:	200000b0 	.word	0x200000b0
 8001030:	2000052c 	.word	0x2000052c
 8001034:	51eb851f 	.word	0x51eb851f
 8001038:	40021400 	.word	0x40021400

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f007 fa83 	bl	8008556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <SystemClock_Config+0xcc>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <SystemClock_Config+0xcc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <SystemClock_Config+0xd0>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <SystemClock_Config+0xd0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010b0:	23a8      	movs	r3, #168	; 0xa8
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f8f9 	bl	80062b8 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010cc:	f000 fbda 	bl	8001884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2105      	movs	r1, #5
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 fb52 	bl	8006798 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010fa:	f000 fbc3 	bl	8001884 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_CAN1_Init+0x64>)
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <MX_CAN1_Init+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_CAN1_Init+0x64>)
 800111c:	2203      	movs	r2, #3
 800111e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_CAN1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_CAN1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_CAN1_Init+0x64>)
 800112e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001132:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_CAN1_Init+0x64>)
 8001136:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800113a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_CAN1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_CAN1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_CAN1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_CAN1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_CAN1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_CAN1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_CAN1_Init+0x64>)
 8001162:	f003 fbc5 	bl	80048f0 <HAL_CAN_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800116c:	f000 fb8a 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000052c 	.word	0x2000052c
 8001178:	40006400 	.word	0x40006400

0800117c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_CAN2_Init+0x64>)
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <MX_CAN2_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_CAN2_Init+0x64>)
 8001188:	2203      	movs	r2, #3
 800118a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_CAN2_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_CAN2_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_CAN2_Init+0x64>)
 800119a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800119e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011a2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011a6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_CAN2_Init+0x64>)
 80011ce:	f003 fb8f 	bl	80048f0 <HAL_CAN_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80011d8:	f000 fb54 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000278 	.word	0x20000278
 80011e4:	40006800 	.word	0x40006800

080011e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI5_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_SPI5_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI5_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI5_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI5_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI5_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI5_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI5_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI5_Init+0x64>)
 800121c:	2230      	movs	r2, #48	; 0x30
 800121e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SPI5_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI5_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SPI5_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI5_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_SPI5_Init+0x64>)
 800123a:	f005 fc79 	bl	8006b30 <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001244:	f000 fb1e 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001a0 	.word	0x200001a0
 8001250:	40015000 	.word	0x40015000

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001280:	22a7      	movs	r2, #167	; 0xa7
 8001282:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_TIM2_Init+0xf0>)
 800128c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_TIM2_Init+0xf0>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800129e:	4829      	ldr	r0, [pc, #164]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012a0:	f005 fef8 	bl	8007094 <HAL_TIM_PWM_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012aa:	f000 faeb 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4619      	mov	r1, r3
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012be:	f006 fa8f 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012c8:	f000 fadc 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012cc:	2360      	movs	r3, #96	; 0x60
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 80012d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4817      	ldr	r0, [pc, #92]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012e6:	f005 ff3f 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80012f0:	f000 fac8 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2204      	movs	r2, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012fc:	f005 ff34 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001306:	f000 fabd 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2208      	movs	r2, #8
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001312:	f005 ff29 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800131c:	f000 fab2 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	220c      	movs	r2, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001328:	f005 ff1e 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8001332:	f000 faa7 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001338:	f002 ff5c 	bl	80041f4 <HAL_TIM_MspPostInit>

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200004ac 	.word	0x200004ac

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_TIM3_Init+0xac>)
 800136c:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <MX_TIM3_Init+0xb0>)
 800136e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_TIM3_Init+0xac>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_TIM3_Init+0xac>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_TIM3_Init+0xac>)
 800137e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_TIM3_Init+0xac>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_TIM3_Init+0xac>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001390:	4818      	ldr	r0, [pc, #96]	; (80013f4 <MX_TIM3_Init+0xac>)
 8001392:	f005 fe7f 	bl	8007094 <HAL_TIM_PWM_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800139c:	f000 fa72 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4619      	mov	r1, r3
 80013ae:	4811      	ldr	r0, [pc, #68]	; (80013f4 <MX_TIM3_Init+0xac>)
 80013b0:	f006 fa16 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013ba:	f000 fa63 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013be:	2360      	movs	r3, #96	; 0x60
 80013c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2204      	movs	r2, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM3_Init+0xac>)
 80013d6:	f005 fec7 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013e0:	f000 fa50 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM3_Init+0xac>)
 80013e6:	f002 ff05 	bl	80041f4 <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000238 	.word	0x20000238
 80013f8:	40000400 	.word	0x40000400

080013fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <MX_TIM4_Init+0xf0>)
 8001420:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <MX_TIM4_Init+0xf4>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <MX_TIM4_Init+0xf0>)
 8001426:	22a7      	movs	r2, #167	; 0xa7
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <MX_TIM4_Init+0xf0>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <MX_TIM4_Init+0xf0>)
 8001432:	f242 720f 	movw	r2, #9999	; 0x270f
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <MX_TIM4_Init+0xf0>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_TIM4_Init+0xf0>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001444:	4829      	ldr	r0, [pc, #164]	; (80014ec <MX_TIM4_Init+0xf0>)
 8001446:	f005 fe25 	bl	8007094 <HAL_TIM_PWM_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001450:	f000 fa18 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4619      	mov	r1, r3
 8001462:	4822      	ldr	r0, [pc, #136]	; (80014ec <MX_TIM4_Init+0xf0>)
 8001464:	f006 f9bc 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800146e:	f000 fa09 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	; 0x60
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 8001476:	f241 3388 	movw	r3, #5000	; 0x1388
 800147a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_TIM4_Init+0xf0>)
 800148c:	f005 fe6c 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001496:	f000 f9f5 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2204      	movs	r2, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4812      	ldr	r0, [pc, #72]	; (80014ec <MX_TIM4_Init+0xf0>)
 80014a2:	f005 fe61 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80014ac:	f000 f9ea 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2208      	movs	r2, #8
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_TIM4_Init+0xf0>)
 80014b8:	f005 fe56 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80014c2:	f000 f9df 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	220c      	movs	r2, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM4_Init+0xf0>)
 80014ce:	f005 fe4b 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80014d8:	f000 f9d4 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM4_Init+0xf0>)
 80014de:	f002 fe89 	bl	80041f4 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200001f8 	.word	0x200001f8
 80014f0:	40000800 	.word	0x40000800

080014f4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_TIM12_Init+0x84>)
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_TIM12_Init+0x88>)
 8001510:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_TIM12_Init+0x84>)
 8001514:	2203      	movs	r2, #3
 8001516:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_TIM12_Init+0x84>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 7777;
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_TIM12_Init+0x84>)
 8001520:	f641 6261 	movw	r2, #7777	; 0x1e61
 8001524:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_TIM12_Init+0x84>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_TIM12_Init+0x84>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001532:	4811      	ldr	r0, [pc, #68]	; (8001578 <MX_TIM12_Init+0x84>)
 8001534:	f005 fdae 	bl	8007094 <HAL_TIM_PWM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800153e:	f000 f9a1 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001542:	2360      	movs	r3, #96	; 0x60
 8001544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_TIM12_Init+0x84>)
 800155a:	f005 fe05 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001564:	f000 f98e 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <MX_TIM12_Init+0x84>)
 800156a:	f002 fe43 	bl	80041f4 <HAL_TIM_MspPostInit>

}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000554 	.word	0x20000554
 800157c:	40001800 	.word	0x40001800

08001580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MX_USART1_UART_Init+0x50>)
 8001588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 800158c:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x54>)
 800158e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART1_UART_Init+0x4c>)
 80015b8:	f006 f98e 	bl	80078d8 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015c2:	f000 f95f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000360 	.word	0x20000360
 80015d0:	40011000 	.word	0x40011000
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_USART2_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001610:	f006 f962 	bl	80078d8 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 f933 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200004ec 	.word	0x200004ec
 8001628:	40004400 	.word	0x40004400

0800162c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <MX_USART6_UART_Init+0x50>)
 8001634:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_USART6_UART_Init+0x4c>)
 8001664:	f006 f938 	bl	80078d8 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800166e:	f000 f909 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200003a4 	.word	0x200003a4
 800167c:	40011400 	.word	0x40011400

08001680 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_DMA_Init+0x78>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <MX_DMA_Init+0x78>)
 8001690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_DMA_Init+0x78>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_DMA_Init+0x78>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <MX_DMA_Init+0x78>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_DMA_Init+0x78>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2010      	movs	r0, #16
 80016c4:	f004 f86f 	bl	80057a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016c8:	2010      	movs	r0, #16
 80016ca:	f004 f888 	bl	80057de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2011      	movs	r0, #17
 80016d4:	f004 f867 	bl	80057a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016d8:	2011      	movs	r0, #17
 80016da:	f004 f880 	bl	80057de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	203a      	movs	r0, #58	; 0x3a
 80016e4:	f004 f85f 	bl	80057a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016e8:	203a      	movs	r0, #58	; 0x3a
 80016ea:	f004 f878 	bl	80057de <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b57      	ldr	r3, [pc, #348]	; (8001874 <MX_GPIO_Init+0x178>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <MX_GPIO_Init+0x178>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b54      	ldr	r3, [pc, #336]	; (8001874 <MX_GPIO_Init+0x178>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	4b50      	ldr	r3, [pc, #320]	; (8001874 <MX_GPIO_Init+0x178>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <MX_GPIO_Init+0x178>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <MX_GPIO_Init+0x178>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <MX_GPIO_Init+0x178>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a48      	ldr	r2, [pc, #288]	; (8001874 <MX_GPIO_Init+0x178>)
 8001754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b46      	ldr	r3, [pc, #280]	; (8001874 <MX_GPIO_Init+0x178>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b42      	ldr	r3, [pc, #264]	; (8001874 <MX_GPIO_Init+0x178>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a41      	ldr	r2, [pc, #260]	; (8001874 <MX_GPIO_Init+0x178>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <MX_GPIO_Init+0x178>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <MX_GPIO_Init+0x178>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <MX_GPIO_Init+0x178>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <MX_GPIO_Init+0x178>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <MX_GPIO_Init+0x178>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a33      	ldr	r2, [pc, #204]	; (8001874 <MX_GPIO_Init+0x178>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <MX_GPIO_Init+0x178>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <MX_GPIO_Init+0x178>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <MX_GPIO_Init+0x178>)
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_GPIO_Init+0x178>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_INT_Pin|IST_RST_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f640 010c 	movw	r1, #2060	; 0x80c
 80017dc:	4826      	ldr	r0, [pc, #152]	; (8001878 <MX_GPIO_Init+0x17c>)
 80017de:	f004 fd37 	bl	8006250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	213c      	movs	r1, #60	; 0x3c
 80017e6:	4825      	ldr	r0, [pc, #148]	; (800187c <MX_GPIO_Init+0x180>)
 80017e8:	f004 fd32 	bl	8006250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f244 0140 	movw	r1, #16448	; 0x4040
 80017f2:	4823      	ldr	r0, [pc, #140]	; (8001880 <MX_GPIO_Init+0x184>)
 80017f4:	f004 fd2c 	bl	8006250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IST_INT_Pin IST_RST_Pin */
  GPIO_InitStruct.Pin = IST_INT_Pin|IST_RST_Pin;
 80017f8:	230c      	movs	r3, #12
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <MX_GPIO_Init+0x17c>)
 8001810:	f004 fb74 	bl	8005efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001814:	233c      	movs	r3, #60	; 0x3c
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4814      	ldr	r0, [pc, #80]	; (800187c <MX_GPIO_Init+0x180>)
 800182c:	f004 fb66 	bl	8005efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 8001830:	f244 0340 	movw	r3, #16448	; 0x4040
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_GPIO_Init+0x184>)
 800184a:	f004 fb57 	bl	8005efc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800184e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_GPIO_Init+0x17c>)
 8001868:	f004 fb48 	bl	8005efc <HAL_GPIO_Init>

}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40021000 	.word	0x40021000
 800187c:	40021c00 	.word	0x40021c00
 8001880:	40021400 	.word	0x40021400

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PID_init>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, unsigned char mode, const float PID[3], float max_out, float max_iout)
{
 8001892:	b480      	push	{r7}
 8001894:	b087      	sub	sp, #28
 8001896:	af00      	add	r7, sp, #0
 8001898:	6178      	str	r0, [r7, #20]
 800189a:	460b      	mov	r3, r1
 800189c:	60fa      	str	r2, [r7, #12]
 800189e:	ed87 0a02 	vstr	s0, [r7, #8]
 80018a2:	edc7 0a01 	vstr	s1, [r7, #4]
 80018a6:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d040      	beq.n	8001930 <PID_init+0x9e>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03d      	beq.n	8001930 <PID_init+0x9e>
    {
        return;
    }
    pid->mode = mode;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	7cfa      	ldrb	r2, [r7, #19]
 80018b8:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c
 800192e:	e000      	b.n	8001932 <PID_init+0xa0>
        return;
 8001930:	bf00      	nop
}
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <PID_calc>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	ed87 0a02 	vstr	s0, [r7, #8]
 8001948:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <PID_calc+0x1c>
    {
        return 0.0f;
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e130      	b.n	8001bba <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8001974:	ed97 7a01 	vldr	s14, [r7, #4]
 8001978:	edd7 7a02 	vldr	s15, [r7, #8]
 800197c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8095 	bne.w	8001aba <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80019b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80019e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	dd04      	ble.n	8001a22 <PID_calc+0xe6>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a20:	e014      	b.n	8001a4c <PID_calc+0x110>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a2e:	eef1 7a67 	vneg.f32	s15, s15
 8001a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d507      	bpl.n	8001a4c <PID_calc+0x110>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a42:	eef1 7a67 	vneg.f32	s15, s15
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	dd04      	ble.n	8001a8c <PID_calc+0x150>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	621a      	str	r2, [r3, #32]
 8001a8a:	e094      	b.n	8001bb6 <PID_calc+0x27a>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a98:	eef1 7a67 	vneg.f32	s15, s15
 8001a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	f140 8087 	bpl.w	8001bb6 <PID_calc+0x27a>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aae:	eef1 7a67 	vneg.f32	s15, s15
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	edc3 7a08 	vstr	s15, [r3, #32]
 8001ab8:	e07d      	b.n	8001bb6 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d179      	bne.n	8001bb6 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001ad4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	dd04      	ble.n	8001b8c <PID_calc+0x250>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	621a      	str	r2, [r3, #32]
 8001b8a:	e014      	b.n	8001bb6 <PID_calc+0x27a>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b98:	eef1 7a67 	vneg.f32	s15, s15
 8001b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	d507      	bpl.n	8001bb6 <PID_calc+0x27a>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bac:	eef1 7a67 	vneg.f32	s15, s15
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	ee07 3a90 	vmov	s15, r3
}
 8001bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <set_rotation_target>:
    pid->out = pid->Pout = pid->Iout = pid->Dout = 0.0f;
    pid->fdb = pid->set = 0.0f;
}

float set_rotation_target(float target, float period)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bd6:	edc7 0a00 	vstr	s1, [r7]
	if (target > period){
 8001bda:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bde:	edd7 7a00 	vldr	s15, [r7]
 8001be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	dd17      	ble.n	8001c1c <set_rotation_target+0x50>
		target = (float) fmod(target, period);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7fe fc63 	bl	80004b8 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	6838      	ldr	r0, [r7, #0]
 8001bf8:	f7fe fc5e 	bl	80004b8 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	ec43 2b11 	vmov	d1, r2, r3
 8001c04:	ec45 4b10 	vmov	d0, r4, r5
 8001c08:	f006 fd08 	bl	800861c <fmod>
 8001c0c:	ec54 3b10 	vmov	r3, r4, d0
 8001c10:	4618      	mov	r0, r3
 8001c12:	4621      	mov	r1, r4
 8001c14:	f7fe ff58 	bl	8000ac8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	607b      	str	r3, [r7, #4]
	}
	if (target < 0){
 8001c1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d51d      	bpl.n	8001c66 <set_rotation_target+0x9a>
		target = (float) fmod(target, period) + period;
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fc44 	bl	80004b8 <__aeabi_f2d>
 8001c30:	4604      	mov	r4, r0
 8001c32:	460d      	mov	r5, r1
 8001c34:	6838      	ldr	r0, [r7, #0]
 8001c36:	f7fe fc3f 	bl	80004b8 <__aeabi_f2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	ec43 2b11 	vmov	d1, r2, r3
 8001c42:	ec45 4b10 	vmov	d0, r4, r5
 8001c46:	f006 fce9 	bl	800861c <fmod>
 8001c4a:	ec54 3b10 	vmov	r3, r4, d0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f7fe ff39 	bl	8000ac8 <__aeabi_d2f>
 8001c56:	ee07 0a10 	vmov	s14, r0
 8001c5a:	edd7 7a00 	vldr	s15, [r7]
 8001c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c62:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return target;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	ee07 3a90 	vmov	s15, r3
}
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}

08001c76 <get_rotation_actual_error>:

float get_rotation_actual_error(float feedback, float target, float period)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b087      	sub	sp, #28
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c80:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c84:	ed87 1a01 	vstr	s2, [r7, #4]
	float error = target - feedback;
 8001c88:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c94:	edc7 7a05 	vstr	s15, [r7, #20]
	if (error > period / 2.0f)
 8001c98:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	dd08      	ble.n	8001cc4 <get_rotation_actual_error+0x4e>
	{
		error -= period;
 8001cb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbe:	edc7 7a05 	vstr	s15, [r7, #20]
 8001cc2:	e016      	b.n	8001cf2 <get_rotation_actual_error+0x7c>
	}
	else if (error < - period / 2.0f)
 8001cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001ccc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	d507      	bpl.n	8001cf2 <get_rotation_actual_error+0x7c>
	{
		error += period;
 8001ce2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return error;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	ee07 3a90 	vmov	s15, r3
}
 8001cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <can_filter_init>:
#include "rm_can.h"

motor_measure_t motors[NUM_MOTORS];

void can_filter_init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
	//can1 &can2 use same filter config
	CAN_FilterTypeDef can_filter_st;
	can_filter_st.FilterActivation = ENABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	623b      	str	r3, [r7, #32]
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
	can_filter_st.FilterIdHigh = 0x0000;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
	can_filter_st.FilterIdLow = 0x0000;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
	can_filter_st.FilterMaskIdHigh = 0x0000;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
	can_filter_st.FilterMaskIdLow = 0x0000;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
	can_filter_st.FilterBank = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
	HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	480f      	ldr	r0, [pc, #60]	; (8001d74 <can_filter_init+0x6c>)
 8001d38:	f002 fed6 	bl	8004ae8 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){}
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <can_filter_init+0x6c>)
 8001d40:	f003 fa07 	bl	8005152 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <can_filter_init+0x6c>)
 8001d46:	f002 ffaf 	bl	8004ca8 <HAL_CAN_Start>

	can_filter_st.SlaveStartFilterBank = 14;
 8001d4a:	230e      	movs	r3, #14
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
	can_filter_st.FilterBank = 14;
 8001d4e:	230e      	movs	r3, #14
 8001d50:	617b      	str	r3, [r7, #20]
	HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001d52:	463b      	mov	r3, r7
 8001d54:	4619      	mov	r1, r3
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <can_filter_init+0x70>)
 8001d58:	f002 fec6 	bl	8004ae8 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){}
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <can_filter_init+0x70>)
 8001d60:	f003 f9f7 	bl	8005152 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan2);
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <can_filter_init+0x70>)
 8001d66:	f002 ff9f 	bl	8004ca8 <HAL_CAN_Start>
}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000052c 	.word	0x2000052c
 8001d78:	20000278 	.word	0x20000278

08001d7c <can_transmit>:

void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef tx_header;
    uint8_t             data[8];
    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	623b      	str	r3, [r7, #32]
    tx_header.IDE   = CAN_ID_STD;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    tx_header.RTR   = CAN_RTR_DATA;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.DLC   = 0x08;
 8001da2:	2308      	movs	r3, #8
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TransmitGlobalTime = DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    data[0] = msg1 >> 8; 	//Higher 8 bits of ESC 1
 8001dac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001db0:	121b      	asrs	r3, r3, #8
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	763b      	strb	r3, [r7, #24]
    data[1] = msg1;		//Lower 8 bits of ESC 1
 8001db8:	893b      	ldrh	r3, [r7, #8]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	767b      	strb	r3, [r7, #25]
    data[2] = msg2 >> 8;
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	121b      	asrs	r3, r3, #8
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	76bb      	strb	r3, [r7, #26]
    data[3] = msg2;
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	76fb      	strb	r3, [r7, #27]
    data[4] = msg3 >> 8;
 8001dd0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001dd4:	121b      	asrs	r3, r3, #8
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	773b      	strb	r3, [r7, #28]
    data[5] = msg3;
 8001ddc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	777b      	strb	r3, [r7, #29]
    data[6] = msg4 >> 8;
 8001de4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001de8:	121b      	asrs	r3, r3, #8
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	77bb      	strb	r3, [r7, #30]
    data[7] = msg4;
 8001df0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	77fb      	strb	r3, [r7, #31]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) != HAL_OK){}
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	f107 0218 	add.w	r2, r7, #24
 8001e00:	f107 0120 	add.w	r1, r7, #32
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f002 ff93 	bl	8004d30 <HAL_CAN_AddTxMessage>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d108      	bne.n	8001e22 <can_transmit+0xa6>
        //bsp_error_handler(__FUNCTION__, __LINE__, "can transmit fail");
    else
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 8001e10:	bf00      	nop
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	4619      	mov	r1, r3
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f003 f865 	bl	8004ee6 <HAL_CAN_IsTxMessagePending>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f7      	bne.n	8001e12 <can_transmit+0x96>
}
 8001e22:	bf00      	nop
 8001e24:	3738      	adds	r7, #56	; 0x38
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08c      	sub	sp, #48	; 0x30
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[CAN_DATA_SIZE];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	f107 0210 	add.w	r2, r7, #16
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f003 f875 	bl	8004f2e <HAL_CAN_GetRxMessage>
    uint8_t idx = rx_header.StdId - CAN_RX_ID_START;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    get_motor_measure(&motors[idx], rx_data);
 8001e4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f107 0208 	add.w	r2, r7, #8
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f807 	bl	8001e78 <get_motor_measure>

}
 8001e6a:	bf00      	nop
 8001e6c:	3730      	adds	r7, #48	; 0x30
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000598 	.word	0x20000598

08001e78 <get_motor_measure>:

void get_motor_measure(motor_measure_t* m, uint8_t data[CAN_DATA_SIZE]){
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    (m)->last_ecd = (m)->ecd;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	811a      	strh	r2, [r3, #8]
    (m)->ecd = (uint16_t)((data)[0] << 8 | (data)[1]);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	b21a      	sxth	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	801a      	strh	r2, [r3, #0]
    (m)->speed_rpm = (uint16_t)((data)[2] << 8 | (data)[3]);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3303      	adds	r3, #3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21a      	sxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	805a      	strh	r2, [r3, #2]
    (m)->given_current = (uint16_t)((data)[4] << 8 | (data)[5]);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3305      	adds	r3, #5
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	809a      	strh	r2, [r3, #4]
    (m)->temperature = (data)[6];
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	799a      	ldrb	r2, [r3, #6]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	719a      	strb	r2, [r3, #6]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <grand_pid_init>:
pid_type_def pit_pos_ecd_pid;
const float pit_rpm_ecd_PID[3] = {10, 0.1, 0};
pid_type_def pit_rpm_ecd_pid;


void grand_pid_init(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
	PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001ef6:	eddf 0a37 	vldr	s1, [pc, #220]	; 8001fd4 <grand_pid_init+0xe4>
 8001efa:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001fd8 <grand_pid_init+0xe8>
 8001efe:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <grand_pid_init+0xec>)
 8001f00:	2100      	movs	r1, #0
 8001f02:	4837      	ldr	r0, [pc, #220]	; (8001fe0 <grand_pid_init+0xf0>)
 8001f04:	f7ff fcc5 	bl	8001892 <PID_init>

	for (int i = 0; i < 4; i++){
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	e012      	b.n	8001f34 <grand_pid_init+0x44>
		PID_init(&wheels_rpm_pid[i], PID_POSITION, wheels_rpm_PID, 16384, 1000);
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <grand_pid_init+0xf4>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001fe8 <grand_pid_init+0xf8>
 8001f20:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001fec <grand_pid_init+0xfc>
 8001f24:	4a32      	ldr	r2, [pc, #200]	; (8001ff0 <grand_pid_init+0x100>)
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fcb2 	bl	8001892 <PID_init>
	for (int i = 0; i < 4; i++){
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3301      	adds	r3, #1
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	dde9      	ble.n	8001f0e <grand_pid_init+0x1e>
	}

	PID_init(&yaw_deg_imu_pid, PID_POSITION, yaw_deg_imu_PID, 10000, 5000);
 8001f3a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8001ff4 <grand_pid_init+0x104>
 8001f3e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001ff8 <grand_pid_init+0x108>
 8001f42:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <grand_pid_init+0x10c>)
 8001f44:	2100      	movs	r1, #0
 8001f46:	482e      	ldr	r0, [pc, #184]	; (8002000 <grand_pid_init+0x110>)
 8001f48:	f7ff fca3 	bl	8001892 <PID_init>
	PID_init(&yaw_rpm_imu_pid, PID_POSITION, yaw_rpm_imu_PID, 16384, 5000);
 8001f4c:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001ff4 <grand_pid_init+0x104>
 8001f50:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001fec <grand_pid_init+0xfc>
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <grand_pid_init+0x114>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	482b      	ldr	r0, [pc, #172]	; (8002008 <grand_pid_init+0x118>)
 8001f5a:	f7ff fc9a 	bl	8001892 <PID_init>
	PID_init(&yaw_pos_ecd_pid, PID_POSITION, yaw_pos_ecd_PID, 10000, 5000);
 8001f5e:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001ff4 <grand_pid_init+0x104>
 8001f62:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001ff8 <grand_pid_init+0x108>
 8001f66:	4a29      	ldr	r2, [pc, #164]	; (800200c <grand_pid_init+0x11c>)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4829      	ldr	r0, [pc, #164]	; (8002010 <grand_pid_init+0x120>)
 8001f6c:	f7ff fc91 	bl	8001892 <PID_init>
	PID_init(&yaw_rpm_ecd_pid, PID_POSITION, yaw_rpm_ecd_PID, 16384, 5000);
 8001f70:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001ff4 <grand_pid_init+0x104>
 8001f74:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001fec <grand_pid_init+0xfc>
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <grand_pid_init+0x124>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4826      	ldr	r0, [pc, #152]	; (8002018 <grand_pid_init+0x128>)
 8001f7e:	f7ff fc88 	bl	8001892 <PID_init>

	PID_init(&pit_deg_imu_pid, PID_POSITION, pit_deg_imu_PID, 10000, 5000);
 8001f82:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001ff4 <grand_pid_init+0x104>
 8001f86:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001ff8 <grand_pid_init+0x108>
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <grand_pid_init+0x12c>)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4824      	ldr	r0, [pc, #144]	; (8002020 <grand_pid_init+0x130>)
 8001f90:	f7ff fc7f 	bl	8001892 <PID_init>
	PID_init(&pit_rpm_imu_pid, PID_POSITION, pit_rpm_imu_PID, 16384, 5000);
 8001f94:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001ff4 <grand_pid_init+0x104>
 8001f98:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001fec <grand_pid_init+0xfc>
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <grand_pid_init+0x134>)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4821      	ldr	r0, [pc, #132]	; (8002028 <grand_pid_init+0x138>)
 8001fa2:	f7ff fc76 	bl	8001892 <PID_init>
	PID_init(&pit_pos_ecd_pid, PID_POSITION, pit_pos_ecd_PID, 10000, 5000);
 8001fa6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001ff4 <grand_pid_init+0x104>
 8001faa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001ff8 <grand_pid_init+0x108>
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <grand_pid_init+0x13c>)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	481f      	ldr	r0, [pc, #124]	; (8002030 <grand_pid_init+0x140>)
 8001fb4:	f7ff fc6d 	bl	8001892 <PID_init>
	PID_init(&pit_rpm_ecd_pid, PID_POSITION, pit_rpm_ecd_PID, 16384, 5000);
 8001fb8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001ff4 <grand_pid_init+0x104>
 8001fbc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001fec <grand_pid_init+0xfc>
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <grand_pid_init+0x144>)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	481c      	ldr	r0, [pc, #112]	; (8002038 <grand_pid_init+0x148>)
 8001fc6:	f7ff fc64 	bl	8001892 <PID_init>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	45898000 	.word	0x45898000
 8001fd8:	458ca000 	.word	0x458ca000
 8001fdc:	08009478 	.word	0x08009478
 8001fe0:	2000067c 	.word	0x2000067c
 8001fe4:	200007e4 	.word	0x200007e4
 8001fe8:	447a0000 	.word	0x447a0000
 8001fec:	46800000 	.word	0x46800000
 8001ff0:	08009484 	.word	0x08009484
 8001ff4:	459c4000 	.word	0x459c4000
 8001ff8:	461c4000 	.word	0x461c4000
 8001ffc:	08009490 	.word	0x08009490
 8002000:	20000904 	.word	0x20000904
 8002004:	0800949c 	.word	0x0800949c
 8002008:	200005ec 	.word	0x200005ec
 800200c:	080094a8 	.word	0x080094a8
 8002010:	2000079c 	.word	0x2000079c
 8002014:	080094b4 	.word	0x080094b4
 8002018:	200006c4 	.word	0x200006c4
 800201c:	080094c0 	.word	0x080094c0
 8002020:	2000094c 	.word	0x2000094c
 8002024:	080094cc 	.word	0x080094cc
 8002028:	20000634 	.word	0x20000634
 800202c:	080094d8 	.word	0x080094d8
 8002030:	2000070c 	.word	0x2000070c
 8002034:	080094e4 	.word	0x080094e4
 8002038:	20000754 	.word	0x20000754

0800203c <imu_calibration>:

void imu_calibration(){
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
	  mpu_data.gx_offset=0;
 8002042:	4b7e      	ldr	r3, [pc, #504]	; (800223c <imu_calibration+0x200>)
 8002044:	2200      	movs	r2, #0
 8002046:	835a      	strh	r2, [r3, #26]
	  mpu_data.gy_offset=0;
 8002048:	4b7c      	ldr	r3, [pc, #496]	; (800223c <imu_calibration+0x200>)
 800204a:	2200      	movs	r2, #0
 800204c:	839a      	strh	r2, [r3, #28]
	  mpu_data.gz_offset=0;
 800204e:	4b7b      	ldr	r3, [pc, #492]	; (800223c <imu_calibration+0x200>)
 8002050:	2200      	movs	r2, #0
 8002052:	83da      	strh	r2, [r3, #30]
	  long gx_off_int = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
	  long gy_off_int = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
	  long gz_off_int = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]

	  mpu_data.ax_offset=0;
 8002060:	4b76      	ldr	r3, [pc, #472]	; (800223c <imu_calibration+0x200>)
 8002062:	2200      	movs	r2, #0
 8002064:	829a      	strh	r2, [r3, #20]
	  mpu_data.ay_offset=0;
 8002066:	4b75      	ldr	r3, [pc, #468]	; (800223c <imu_calibration+0x200>)
 8002068:	2200      	movs	r2, #0
 800206a:	82da      	strh	r2, [r3, #22]
	  mpu_data.az_offset=0;
 800206c:	4b73      	ldr	r3, [pc, #460]	; (800223c <imu_calibration+0x200>)
 800206e:	2200      	movs	r2, #0
 8002070:	831a      	strh	r2, [r3, #24]
	  long ax_off_int = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
	  long ay_off_int = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
	  long az_off_int = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]

	  int offset_counter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
	  int wait_for_stable = 500;
 8002082:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002086:	60bb      	str	r3, [r7, #8]
	  set_pwm_buzzer(2000);
 8002088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800208c:	f001 fd34 	bl	8003af8 <set_pwm_buzzer>
	  HAL_Delay(100);
 8002090:	2064      	movs	r0, #100	; 0x64
 8002092:	f002 fc0b 	bl	80048ac <HAL_Delay>
	  set_pwm_buzzer(0);
 8002096:	2000      	movs	r0, #0
 8002098:	f001 fd2e 	bl	8003af8 <set_pwm_buzzer>
	  while (offset_counter < 500)
 800209c:	e069      	b.n	8002172 <imu_calibration+0x136>
	  {
		  mpu_get_data();
 800209e:	f000 fb89 	bl	80027b4 <mpu_get_data>
		  if (imu.temp < 48.0f){
 80020a2:	4b67      	ldr	r3, [pc, #412]	; (8002240 <imu_calibration+0x204>)
 80020a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80020a8:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002244 <imu_calibration+0x208>
 80020ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	d504      	bpl.n	80020c0 <imu_calibration+0x84>
			  set_pwm_imu((unsigned short int)TEMPERATURE_PID_MAX_OUT);
 80020b6:	f241 1094 	movw	r0, #4500	; 0x1194
 80020ba:	f001 fd0d 	bl	8003ad8 <set_pwm_imu>
 80020be:	e008      	b.n	80020d2 <imu_calibration+0x96>
		  } else {
			  imu_temp_pid_ctrl(imu.temp, 50.0f);
 80020c0:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <imu_calibration+0x204>)
 80020c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80020c6:	eddf 0a60 	vldr	s1, [pc, #384]	; 8002248 <imu_calibration+0x20c>
 80020ca:	eeb0 0a67 	vmov.f32	s0, s15
 80020ce:	f000 f8bf 	bl	8002250 <imu_temp_pid_ctrl>
		  }
		  /* Wait until the temperature is stable */
		  if (abs(imu.temp - 50.0f) < 1.0f)
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <imu_calibration+0x204>)
 80020d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80020d8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002248 <imu_calibration+0x20c>
 80020dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e4:	ee17 3a90 	vmov	r3, s15
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bfb8      	it	lt
 80020ec:	425b      	neglt	r3, r3
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	d533      	bpl.n	800216c <imu_calibration+0x130>
		  {
			  if (wait_for_stable == 0){
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12d      	bne.n	8002166 <imu_calibration+0x12a>
				  ax_off_int += mpu_data.ax;
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <imu_calibration+0x200>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	461a      	mov	r2, r3
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4413      	add	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
				  ay_off_int += mpu_data.ay;
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <imu_calibration+0x200>)
 800211a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800211e:	461a      	mov	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4413      	add	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
				  az_off_int += mpu_data.az;
 8002126:	4b45      	ldr	r3, [pc, #276]	; (800223c <imu_calibration+0x200>)
 8002128:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
				  gx_off_int += mpu_data.gx;
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <imu_calibration+0x200>)
 8002136:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800213a:	461a      	mov	r2, r3
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	4413      	add	r3, r2
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
				  gy_off_int += mpu_data.gy;
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <imu_calibration+0x200>)
 8002144:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002148:	461a      	mov	r2, r3
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	4413      	add	r3, r2
 800214e:	623b      	str	r3, [r7, #32]
				  gz_off_int += mpu_data.gz;
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <imu_calibration+0x200>)
 8002152:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002156:	461a      	mov	r2, r3
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	4413      	add	r3, r2
 800215c:	61fb      	str	r3, [r7, #28]
				  offset_counter++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e002      	b.n	800216c <imu_calibration+0x130>
			  } else {
				  wait_for_stable--;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3b01      	subs	r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
			  }
		  }
		  HAL_Delay(5);
 800216c:	2005      	movs	r0, #5
 800216e:	f002 fb9d 	bl	80048ac <HAL_Delay>
	  while (offset_counter < 500)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002178:	db91      	blt.n	800209e <imu_calibration+0x62>
	  }
	  mpu_data.ax_offset= ax_off_int / 500;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4a33      	ldr	r2, [pc, #204]	; (800224c <imu_calibration+0x210>)
 800217e:	fb82 1203 	smull	r1, r2, r2, r3
 8002182:	1152      	asrs	r2, r2, #5
 8002184:	17db      	asrs	r3, r3, #31
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <imu_calibration+0x200>)
 800218c:	829a      	strh	r2, [r3, #20]
	  mpu_data.ay_offset= ay_off_int / 500;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4a2e      	ldr	r2, [pc, #184]	; (800224c <imu_calibration+0x210>)
 8002192:	fb82 1203 	smull	r1, r2, r2, r3
 8002196:	1152      	asrs	r2, r2, #5
 8002198:	17db      	asrs	r3, r3, #31
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <imu_calibration+0x200>)
 80021a0:	82da      	strh	r2, [r3, #22]
	  mpu_data.az_offset= az_off_int / 500 - 4096; // gravity
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <imu_calibration+0x210>)
 80021a6:	fb82 1203 	smull	r1, r2, r2, r3
 80021aa:	1152      	asrs	r2, r2, #5
 80021ac:	17db      	asrs	r3, r3, #31
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <imu_calibration+0x200>)
 80021bc:	831a      	strh	r2, [r3, #24]
	  mpu_data.gx_offset= gx_off_int / 500;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	4a22      	ldr	r2, [pc, #136]	; (800224c <imu_calibration+0x210>)
 80021c2:	fb82 1203 	smull	r1, r2, r2, r3
 80021c6:	1152      	asrs	r2, r2, #5
 80021c8:	17db      	asrs	r3, r3, #31
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <imu_calibration+0x200>)
 80021d0:	835a      	strh	r2, [r3, #26]
	  mpu_data.gy_offset= gy_off_int / 500;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <imu_calibration+0x210>)
 80021d6:	fb82 1203 	smull	r1, r2, r2, r3
 80021da:	1152      	asrs	r2, r2, #5
 80021dc:	17db      	asrs	r3, r3, #31
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <imu_calibration+0x200>)
 80021e4:	839a      	strh	r2, [r3, #28]
	  mpu_data.gz_offset= gz_off_int / 500;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <imu_calibration+0x210>)
 80021ea:	fb82 1203 	smull	r1, r2, r2, r3
 80021ee:	1152      	asrs	r2, r2, #5
 80021f0:	17db      	asrs	r3, r3, #31
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <imu_calibration+0x200>)
 80021f8:	83da      	strh	r2, [r3, #30]
	  set_pwm_buzzer(2000);
 80021fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021fe:	f001 fc7b 	bl	8003af8 <set_pwm_buzzer>
	  HAL_Delay(100);
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	f002 fb52 	bl	80048ac <HAL_Delay>
	  set_pwm_buzzer(0);
 8002208:	2000      	movs	r0, #0
 800220a:	f001 fc75 	bl	8003af8 <set_pwm_buzzer>

	  for(int i = 0; i < 400; i++){
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e00b      	b.n	800222c <imu_calibration+0x1f0>
		  mpu_get_data();
 8002214:	f000 face 	bl	80027b4 <mpu_get_data>
		  imu_ahrs_update();
 8002218:	f000 fea0 	bl	8002f5c <imu_ahrs_update>
		  imu_attitude_update();
 800221c:	f001 fb40 	bl	80038a0 <imu_attitude_update>
		  HAL_Delay(5);
 8002220:	2005      	movs	r0, #5
 8002222:	f002 fb43 	bl	80048ac <HAL_Delay>
	  for(int i = 0; i < 400; i++){
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002232:	dbef      	blt.n	8002214 <imu_calibration+0x1d8>
	  }
}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200009a8 	.word	0x200009a8
 8002240:	200000e8 	.word	0x200000e8
 8002244:	42400000 	.word	0x42400000
 8002248:	42480000 	.word	0x42480000
 800224c:	10624dd3 	.word	0x10624dd3

08002250 <imu_temp_pid_ctrl>:

void imu_temp_pid_ctrl(float feedback, float target){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	ed87 0a01 	vstr	s0, [r7, #4]
 800225a:	edc7 0a00 	vstr	s1, [r7]
	PID_calc(&imu_temp_pid, feedback, target);
 800225e:	edd7 0a00 	vldr	s1, [r7]
 8002262:	ed97 0a01 	vldr	s0, [r7, #4]
 8002266:	480f      	ldr	r0, [pc, #60]	; (80022a4 <imu_temp_pid_ctrl+0x54>)
 8002268:	f7ff fb68 	bl	800193c <PID_calc>
	if (imu_temp_pid.out < 0.0f)
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <imu_temp_pid_ctrl+0x54>)
 800226e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	d503      	bpl.n	8002284 <imu_temp_pid_ctrl+0x34>
	{
		imu_temp_pid.out = 0.0f;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <imu_temp_pid_ctrl+0x54>)
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
	}
	set_pwm_imu((unsigned short int) imu_temp_pid.out);
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <imu_temp_pid_ctrl+0x54>)
 8002286:	edd3 7a08 	vldr	s15, [r3, #32]
 800228a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228e:	ee17 3a90 	vmov	r3, s15
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fc1f 	bl	8003ad8 <set_pwm_imu>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000067c 	.word	0x2000067c

080022a8 <yaw_ecd_pid_ctrl>:
#else
	return -yaw_rpm_imu_pid.out;
#endif
}

float yaw_ecd_pid_ctrl(float feedback, float target){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80022b2:	edc7 0a00 	vstr	s1, [r7]
	float error = get_rotation_actual_error(feedback, target, ECD_PERIOD);
 80022b6:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800230c <yaw_ecd_pid_ctrl+0x64>
 80022ba:	edd7 0a00 	vldr	s1, [r7]
 80022be:	ed97 0a01 	vldr	s0, [r7, #4]
 80022c2:	f7ff fcd8 	bl	8001c76 <get_rotation_actual_error>
 80022c6:	ed87 0a03 	vstr	s0, [r7, #12]
	PID_calc(&yaw_pos_ecd_pid, 0, error);
 80022ca:	edd7 0a03 	vldr	s1, [r7, #12]
 80022ce:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002310 <yaw_ecd_pid_ctrl+0x68>
 80022d2:	4810      	ldr	r0, [pc, #64]	; (8002314 <yaw_ecd_pid_ctrl+0x6c>)
 80022d4:	f7ff fb32 	bl	800193c <PID_calc>
	PID_calc(&yaw_rpm_ecd_pid, motors[4].speed_rpm, yaw_pos_ecd_pid.out);
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <yaw_ecd_pid_ctrl+0x70>)
 80022da:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <yaw_ecd_pid_ctrl+0x6c>)
 80022e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80022ec:	eef0 0a47 	vmov.f32	s1, s14
 80022f0:	eeb0 0a67 	vmov.f32	s0, s15
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <yaw_ecd_pid_ctrl+0x74>)
 80022f6:	f7ff fb21 	bl	800193c <PID_calc>
	return yaw_rpm_ecd_pid.out;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <yaw_ecd_pid_ctrl+0x74>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	ee07 3a90 	vmov	s15, r3
}
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	46000000 	.word	0x46000000
 8002310:	00000000 	.word	0x00000000
 8002314:	2000079c 	.word	0x2000079c
 8002318:	20000598 	.word	0x20000598
 800231c:	200006c4 	.word	0x200006c4

08002320 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <led_off+0x20>)
 800232c:	f003 ff90 	bl	8006250 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002336:	4803      	ldr	r0, [pc, #12]	; (8002344 <led_off+0x24>)
 8002338:	f003 ff8a 	bl	8006250 <HAL_GPIO_WritePin>
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021400 	.word	0x40021400
 8002344:	40021000 	.word	0x40021000

08002348 <power_on>:

void power_on(void){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	213c      	movs	r1, #60	; 0x3c
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <power_on+0x14>)
 8002352:	f003 ff7d 	bl	8006250 <HAL_GPIO_WritePin>
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021c00 	.word	0x40021c00

08002360 <inv_sqrt>:
  * @param  x: the number need to be calculated
  * @retval 1/Sqrt(x)
  * @usage  call in imu_ahrs_update() function
  */
float inv_sqrt(float x)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800236a:	edd7 7a01 	vldr	s15, [r7, #4]
 800236e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002376:	edc7 7a05 	vstr	s15, [r7, #20]
	float y     = x;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	613b      	str	r3, [r7, #16]
	long  i     = *(long*)&y;
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	105a      	asrs	r2, r3, #1
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <inv_sqrt+0x74>)
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002398:	ed97 7a04 	vldr	s14, [r7, #16]
 800239c:	edd7 7a05 	vldr	s15, [r7, #20]
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ac:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80023b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023bc:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	ee07 3a90 	vmov	s15, r3
}
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	5f3759df 	.word	0x5f3759df

080023d8 <mpu_write_byte>:
  *                 mpu_set_gyro_fsr(),
  *                 mpu_set_accel_fsr(),
  *                 mpu_device_init() function
  */
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
 80023de:	4603      	mov	r3, r0
 80023e0:	460a      	mov	r2, r1
 80023e2:	71fb      	strb	r3, [r7, #7]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	4812      	ldr	r0, [pc, #72]	; (8002438 <mpu_write_byte+0x60>)
 80023ee:	f003 ff2f 	bl	8006250 <HAL_GPIO_WritePin>
    tx = reg & 0x7F;
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <mpu_write_byte+0x64>)
 80023fc:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80023fe:	2337      	movs	r3, #55	; 0x37
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <mpu_write_byte+0x68>)
 8002406:	490d      	ldr	r1, [pc, #52]	; (800243c <mpu_write_byte+0x64>)
 8002408:	480e      	ldr	r0, [pc, #56]	; (8002444 <mpu_write_byte+0x6c>)
 800240a:	f004 fbf5 	bl	8006bf8 <HAL_SPI_TransmitReceive>
    tx = data;
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <mpu_write_byte+0x64>)
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	7013      	strb	r3, [r2, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8002414:	2337      	movs	r3, #55	; 0x37
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2301      	movs	r3, #1
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <mpu_write_byte+0x68>)
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <mpu_write_byte+0x64>)
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <mpu_write_byte+0x6c>)
 8002420:	f004 fbea 	bl	8006bf8 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8002424:	2201      	movs	r2, #1
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <mpu_write_byte+0x60>)
 800242a:	f003 ff11 	bl	8006250 <HAL_GPIO_WritePin>
    return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021400 	.word	0x40021400
 800243c:	200000e4 	.word	0x200000e4
 8002440:	200000e5 	.word	0x200000e5
 8002444:	200001a0 	.word	0x200001a0

08002448 <mpu_read_byte>:
  * @retval
  * @usage  call in ist_reg_read_by_mpu(),
  *                 mpu_device_init() function
  */
uint8_t mpu_read_byte(uint8_t const reg)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af02      	add	r7, sp, #8
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 8002452:	2200      	movs	r2, #0
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	4812      	ldr	r0, [pc, #72]	; (80024a0 <mpu_read_byte+0x58>)
 8002458:	f003 fefa 	bl	8006250 <HAL_GPIO_WritePin>
    tx = reg | 0x80;
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <mpu_read_byte+0x5c>)
 8002466:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8002468:	2337      	movs	r3, #55	; 0x37
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2301      	movs	r3, #1
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <mpu_read_byte+0x60>)
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <mpu_read_byte+0x5c>)
 8002472:	480e      	ldr	r0, [pc, #56]	; (80024ac <mpu_read_byte+0x64>)
 8002474:	f004 fbc0 	bl	8006bf8 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8002478:	2337      	movs	r3, #55	; 0x37
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2301      	movs	r3, #1
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <mpu_read_byte+0x60>)
 8002480:	4908      	ldr	r1, [pc, #32]	; (80024a4 <mpu_read_byte+0x5c>)
 8002482:	480a      	ldr	r0, [pc, #40]	; (80024ac <mpu_read_byte+0x64>)
 8002484:	f004 fbb8 	bl	8006bf8 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8002488:	2201      	movs	r2, #1
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <mpu_read_byte+0x58>)
 800248e:	f003 fedf 	bl	8006250 <HAL_GPIO_WritePin>
    return rx;
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <mpu_read_byte+0x60>)
 8002494:	781b      	ldrb	r3, [r3, #0]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021400 	.word	0x40021400
 80024a4:	200000e4 	.word	0x200000e4
 80024a8:	200000e5 	.word	0x200000e5
 80024ac:	200001a0 	.word	0x200001a0

080024b0 <mpu_read_bytes>:
  * @usage  call in ist8310_get_data(),
  *                 mpu_get_data(),
  *                 mpu_offset_call() function
  */
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t* pData, uint8_t len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	4613      	mov	r3, r2
 80024be:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <mpu_read_bytes+0x68>)
 80024c6:	f003 fec3 	bl	8006250 <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <mpu_read_bytes+0x6c>)
 80024d4:	701a      	strb	r2, [r3, #0]
    tx_buff[0] = tx;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <mpu_read_bytes+0x6c>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <mpu_read_bytes+0x70>)
 80024dc:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80024de:	2337      	movs	r3, #55	; 0x37
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2301      	movs	r3, #1
 80024e4:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <mpu_read_bytes+0x74>)
 80024e6:	490d      	ldr	r1, [pc, #52]	; (800251c <mpu_read_bytes+0x6c>)
 80024e8:	480f      	ldr	r0, [pc, #60]	; (8002528 <mpu_read_bytes+0x78>)
 80024ea:	f004 fb85 	bl	8006bf8 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	2337      	movs	r3, #55	; 0x37
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4909      	ldr	r1, [pc, #36]	; (8002520 <mpu_read_bytes+0x70>)
 80024fc:	480a      	ldr	r0, [pc, #40]	; (8002528 <mpu_read_bytes+0x78>)
 80024fe:	f004 fb7b 	bl	8006bf8 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8002502:	2201      	movs	r2, #1
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	4804      	ldr	r0, [pc, #16]	; (8002518 <mpu_read_bytes+0x68>)
 8002508:	f003 fea2 	bl	8006250 <HAL_GPIO_WritePin>
    return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40021400 	.word	0x40021400
 800251c:	200000e4 	.word	0x200000e4
 8002520:	20000004 	.word	0x20000004
 8002524:	200000e5 	.word	0x200000e5
 8002528:	200001a0 	.word	0x200001a0

0800252c <ist_reg_write_by_mpu>:
  *         data: data to be written
	* @retval
  * @usage  call in ist8310_init() function
	*/
static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	460a      	mov	r2, r1
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	4613      	mov	r3, r2
 800253a:	71bb      	strb	r3, [r7, #6]
    /* turn off slave 1 at first */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 800253c:	2100      	movs	r1, #0
 800253e:	202a      	movs	r0, #42	; 0x2a
 8002540:	f7ff ff4a 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002544:	2002      	movs	r0, #2
 8002546:	f002 f9b1 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, addr);
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4619      	mov	r1, r3
 800254e:	2029      	movs	r0, #41	; 0x29
 8002550:	f7ff ff42 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002554:	2002      	movs	r0, #2
 8002556:	f002 f9a9 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, data);
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	4619      	mov	r1, r3
 800255e:	2064      	movs	r0, #100	; 0x64
 8002560:	f7ff ff3a 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002564:	2002      	movs	r0, #2
 8002566:	f002 f9a1 	bl	80048ac <HAL_Delay>
    /* turn on slave 1 with one byte transmitting */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800256a:	2181      	movs	r1, #129	; 0x81
 800256c:	202a      	movs	r0, #42	; 0x2a
 800256e:	f7ff ff33 	bl	80023d8 <mpu_write_byte>
    /* wait longer to ensure the data is transmitted from slave 1 */
    MPU_DELAY(10);
 8002572:	200a      	movs	r0, #10
 8002574:	f002 f99a 	bl	80048ac <HAL_Delay>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4619      	mov	r1, r3
 800258e:	2032      	movs	r0, #50	; 0x32
 8002590:	f7ff ff22 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 8002594:	200a      	movs	r0, #10
 8002596:	f002 f989 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	2034      	movs	r0, #52	; 0x34
 800259e:	f7ff ff1b 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 80025a2:	200a      	movs	r0, #10
 80025a4:	f002 f982 	bl	80048ac <HAL_Delay>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
 80025a8:	2035      	movs	r0, #53	; 0x35
 80025aa:	f7ff ff4d 	bl	8002448 <mpu_read_byte>
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 80025b2:	2100      	movs	r1, #0
 80025b4:	2034      	movs	r0, #52	; 0x34
 80025b6:	f7ff ff0f 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 80025ba:	200a      	movs	r0, #10
 80025bc:	f002 f976 	bl	80048ac <HAL_Delay>
    return retval;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <mpu_master_i2c_auto_read_config>:
* @param    device_address: slave device address, Address[6:0]
	* @retval   void
	* @note
	*/
static void mpu_master_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	460b      	mov	r3, r1
 80025d6:	71bb      	strb	r3, [r7, #6]
 80025d8:	4613      	mov	r3, r2
 80025da:	717b      	strb	r3, [r7, #5]
    /*
	   * configure the device address of the IST8310
     * use slave1, auto transmit single measure mode
	   */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, device_address);
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4619      	mov	r1, r3
 80025e0:	2028      	movs	r0, #40	; 0x28
 80025e2:	f7ff fef9 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 80025e6:	2002      	movs	r0, #2
 80025e8:	f002 f960 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 80025ec:	210a      	movs	r1, #10
 80025ee:	2029      	movs	r0, #41	; 0x29
 80025f0:	f7ff fef2 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 80025f4:	2002      	movs	r0, #2
 80025f6:	f002 f959 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 80025fa:	2101      	movs	r1, #1
 80025fc:	2064      	movs	r0, #100	; 0x64
 80025fe:	f7ff feeb 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002602:	2002      	movs	r0, #2
 8002604:	f002 f952 	bl	80048ac <HAL_Delay>

    /* use slave0,auto read data */
    mpu_write_byte(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4619      	mov	r1, r3
 8002612:	2025      	movs	r0, #37	; 0x25
 8002614:	f7ff fee0 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002618:	2002      	movs	r0, #2
 800261a:	f002 f947 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV0_REG, reg_base_addr);
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	4619      	mov	r1, r3
 8002622:	2026      	movs	r0, #38	; 0x26
 8002624:	f7ff fed8 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002628:	2002      	movs	r0, #2
 800262a:	f002 f93f 	bl	80048ac <HAL_Delay>

    /* every eight mpu6500 internal samples one i2c master read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x03);
 800262e:	2103      	movs	r1, #3
 8002630:	2034      	movs	r0, #52	; 0x34
 8002632:	f7ff fed1 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002636:	2002      	movs	r0, #2
 8002638:	f002 f938 	bl	80048ac <HAL_Delay>
    /* enable slave 0 and 1 access delay */
    mpu_write_byte(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 800263c:	2103      	movs	r1, #3
 800263e:	2067      	movs	r0, #103	; 0x67
 8002640:	f7ff feca 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002644:	2002      	movs	r0, #2
 8002646:	f002 f931 	bl	80048ac <HAL_Delay>
    /* enable slave 1 auto transmit */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800264a:	2181      	movs	r1, #129	; 0x81
 800264c:	202a      	movs	r0, #42	; 0x2a
 800264e:	f7ff fec3 	bl	80023d8 <mpu_write_byte>
		/* Wait 6ms (minimum waiting time for 16 times internal average setup) */
    MPU_DELAY(6);
 8002652:	2006      	movs	r0, #6
 8002654:	f002 f92a 	bl	80048ac <HAL_Delay>
    /* enable slave 0 with data_num bytes reading */
    mpu_write_byte(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	2027      	movs	r0, #39	; 0x27
 8002664:	f7ff feb8 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(2);
 8002668:	2002      	movs	r0, #2
 800266a:	f002 f91f 	bl	80048ac <HAL_Delay>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <ist8310_init>:
	* @param
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	IST8310_NSS_High(); // modified
 800267c:	2201      	movs	r2, #1
 800267e:	2104      	movs	r1, #4
 8002680:	4844      	ldr	r0, [pc, #272]	; (8002794 <ist8310_init+0x11c>)
 8002682:	f003 fde5 	bl	8006250 <HAL_GPIO_WritePin>
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
 8002686:	2130      	movs	r1, #48	; 0x30
 8002688:	206a      	movs	r0, #106	; 0x6a
 800268a:	f7ff fea5 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 800268e:	200a      	movs	r0, #10
 8002690:	f002 f90c 	bl	80048ac <HAL_Delay>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d);
 8002694:	210d      	movs	r1, #13
 8002696:	2024      	movs	r0, #36	; 0x24
 8002698:	f7ff fe9e 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 800269c:	200a      	movs	r0, #10
 800269e:	f002 f905 	bl	80048ac <HAL_Delay>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);
 80026a2:	210e      	movs	r1, #14
 80026a4:	2028      	movs	r0, #40	; 0x28
 80026a6:	f7ff fe97 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 80026aa:	200a      	movs	r0, #10
 80026ac:	f002 f8fe 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
 80026b0:	218e      	movs	r1, #142	; 0x8e
 80026b2:	2031      	movs	r0, #49	; 0x31
 80026b4:	f7ff fe90 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 80026b8:	200a      	movs	r0, #10
 80026ba:	f002 f8f7 	bl	80048ac <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 80026be:	2101      	movs	r1, #1
 80026c0:	200b      	movs	r0, #11
 80026c2:	f7ff ff33 	bl	800252c <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 80026c6:	200a      	movs	r0, #10
 80026c8:	f002 f8f0 	bl	80048ac <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff ff57 	bl	8002580 <ist_reg_read_by_mpu>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d001      	beq.n	80026dc <ist8310_init+0x64>
        return 1;
 80026d8:	2301      	movs	r3, #1
 80026da:	e059      	b.n	8002790 <ist8310_init+0x118>

		/* soft reset */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 80026dc:	2101      	movs	r1, #1
 80026de:	200b      	movs	r0, #11
 80026e0:	f7ff ff24 	bl	800252c <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 80026e4:	200a      	movs	r0, #10
 80026e6:	f002 f8e1 	bl	80048ac <HAL_Delay>

		/* config as ready mode to access register */
    ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 80026ea:	2100      	movs	r1, #0
 80026ec:	200a      	movs	r0, #10
 80026ee:	f7ff ff1d 	bl	800252c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 80026f2:	200a      	movs	r0, #10
 80026f4:	f7ff ff44 	bl	8002580 <ist_reg_read_by_mpu>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <ist8310_init+0x8a>
        return 2;
 80026fe:	2302      	movs	r3, #2
 8002700:	e046      	b.n	8002790 <ist8310_init+0x118>
    MPU_DELAY(10);
 8002702:	200a      	movs	r0, #10
 8002704:	f002 f8d2 	bl	80048ac <HAL_Delay>

		/* normal state, no int */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 8002708:	2100      	movs	r1, #0
 800270a:	200b      	movs	r0, #11
 800270c:	f7ff ff0e 	bl	800252c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8002710:	200b      	movs	r0, #11
 8002712:	f7ff ff35 	bl	8002580 <ist_reg_read_by_mpu>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <ist8310_init+0xa8>
        return 3;
 800271c:	2303      	movs	r3, #3
 800271e:	e037      	b.n	8002790 <ist8310_init+0x118>
    MPU_DELAY(10);
 8002720:	200a      	movs	r0, #10
 8002722:	f002 f8c3 	bl	80048ac <HAL_Delay>

    /* config low noise mode, x,y,z axis 16 time 1 avg */
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8002726:	2124      	movs	r1, #36	; 0x24
 8002728:	2041      	movs	r0, #65	; 0x41
 800272a:	f7ff feff 	bl	800252c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 800272e:	2041      	movs	r0, #65	; 0x41
 8002730:	f7ff ff26 	bl	8002580 <ist_reg_read_by_mpu>
 8002734:	4603      	mov	r3, r0
 8002736:	2b24      	cmp	r3, #36	; 0x24
 8002738:	d001      	beq.n	800273e <ist8310_init+0xc6>
        return 4;
 800273a:	2304      	movs	r3, #4
 800273c:	e028      	b.n	8002790 <ist8310_init+0x118>
    MPU_DELAY(10);
 800273e:	200a      	movs	r0, #10
 8002740:	f002 f8b4 	bl	80048ac <HAL_Delay>

    /* Set/Reset pulse duration setup,normal mode */
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8002744:	21c0      	movs	r1, #192	; 0xc0
 8002746:	2042      	movs	r0, #66	; 0x42
 8002748:	f7ff fef0 	bl	800252c <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 800274c:	2042      	movs	r0, #66	; 0x42
 800274e:	f7ff ff17 	bl	8002580 <ist_reg_read_by_mpu>
 8002752:	4603      	mov	r3, r0
 8002754:	2bc0      	cmp	r3, #192	; 0xc0
 8002756:	d001      	beq.n	800275c <ist8310_init+0xe4>
        return 5;
 8002758:	2305      	movs	r3, #5
 800275a:	e019      	b.n	8002790 <ist8310_init+0x118>
    MPU_DELAY(10);
 800275c:	200a      	movs	r0, #10
 800275e:	f002 f8a5 	bl	80048ac <HAL_Delay>

    /* turn off slave1 & slave 4 */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 8002762:	2100      	movs	r1, #0
 8002764:	202a      	movs	r0, #42	; 0x2a
 8002766:	f7ff fe37 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 800276a:	200a      	movs	r0, #10
 800276c:	f002 f89e 	bl	80048ac <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 8002770:	2100      	movs	r1, #0
 8002772:	2034      	movs	r0, #52	; 0x34
 8002774:	f7ff fe30 	bl	80023d8 <mpu_write_byte>
    MPU_DELAY(10);
 8002778:	200a      	movs	r0, #10
 800277a:	f002 f897 	bl	80048ac <HAL_Delay>

    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 800277e:	2206      	movs	r2, #6
 8002780:	2103      	movs	r1, #3
 8002782:	200e      	movs	r0, #14
 8002784:	f7ff ff21 	bl	80025ca <mpu_master_i2c_auto_read_config>
    MPU_DELAY(100);
 8002788:	2064      	movs	r0, #100	; 0x64
 800278a:	f002 f88f 	bl	80048ac <HAL_Delay>

    return 0;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000

08002798 <ist8310_get_data>:
  * @param  buff: the buffer to save the data of IST8310
	* @retval
  * @usage  call in mpu_get_data() function
	*/
void ist8310_get_data(uint8_t* buff)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    mpu_read_bytes(MPU6500_EXT_SENS_DATA_00, buff, 6);
 80027a0:	2206      	movs	r2, #6
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	2049      	movs	r0, #73	; 0x49
 80027a6:	f7ff fe83 	bl	80024b0 <mpu_read_bytes>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <mpu_get_data>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 80027b8:	220e      	movs	r2, #14
 80027ba:	4991      	ldr	r1, [pc, #580]	; (8002a00 <mpu_get_data+0x24c>)
 80027bc:	203b      	movs	r0, #59	; 0x3b
 80027be:	f7ff fe77 	bl	80024b0 <mpu_read_bytes>

    mpu_data.ax   = (mpu_buff[0] << 8 | mpu_buff[1]) - mpu_data.ax_offset;
 80027c2:	4b8f      	ldr	r3, [pc, #572]	; (8002a00 <mpu_get_data+0x24c>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <mpu_get_data+0x24c>)
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b8b      	ldr	r3, [pc, #556]	; (8002a04 <mpu_get_data+0x250>)
 80027d8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b21a      	sxth	r2, r3
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <mpu_get_data+0x250>)
 80027e6:	801a      	strh	r2, [r3, #0]
    mpu_data.ay   = (mpu_buff[2] << 8 | mpu_buff[3]) - mpu_data.ay_offset;
 80027e8:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <mpu_get_data+0x24c>)
 80027ea:	789b      	ldrb	r3, [r3, #2]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <mpu_get_data+0x24c>)
 80027f2:	78db      	ldrb	r3, [r3, #3]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	4b81      	ldr	r3, [pc, #516]	; (8002a04 <mpu_get_data+0x250>)
 80027fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002802:	b29b      	uxth	r3, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b29b      	uxth	r3, r3
 8002808:	b21a      	sxth	r2, r3
 800280a:	4b7e      	ldr	r3, [pc, #504]	; (8002a04 <mpu_get_data+0x250>)
 800280c:	805a      	strh	r2, [r3, #2]
    mpu_data.az   = (mpu_buff[4] << 8 | mpu_buff[5]) - mpu_data.az_offset;
 800280e:	4b7c      	ldr	r3, [pc, #496]	; (8002a00 <mpu_get_data+0x24c>)
 8002810:	791b      	ldrb	r3, [r3, #4]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <mpu_get_data+0x24c>)
 8002818:	795b      	ldrb	r3, [r3, #5]
 800281a:	b21b      	sxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b21b      	sxth	r3, r3
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <mpu_get_data+0x250>)
 8002824:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002828:	b29b      	uxth	r3, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	b29b      	uxth	r3, r3
 800282e:	b21a      	sxth	r2, r3
 8002830:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <mpu_get_data+0x250>)
 8002832:	809a      	strh	r2, [r3, #4]
    mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 8002834:	4b72      	ldr	r3, [pc, #456]	; (8002a00 <mpu_get_data+0x24c>)
 8002836:	799b      	ldrb	r3, [r3, #6]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b21a      	sxth	r2, r3
 800283c:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <mpu_get_data+0x24c>)
 800283e:	79db      	ldrb	r3, [r3, #7]
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	b21a      	sxth	r2, r3
 8002846:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <mpu_get_data+0x250>)
 8002848:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = ((mpu_buff[8]  << 8 | mpu_buff[9])  - mpu_data.gx_offset);
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <mpu_get_data+0x24c>)
 800284c:	7a1b      	ldrb	r3, [r3, #8]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b21a      	sxth	r2, r3
 8002852:	4b6b      	ldr	r3, [pc, #428]	; (8002a00 <mpu_get_data+0x24c>)
 8002854:	7a5b      	ldrb	r3, [r3, #9]
 8002856:	b21b      	sxth	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b21b      	sxth	r3, r3
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b69      	ldr	r3, [pc, #420]	; (8002a04 <mpu_get_data+0x250>)
 8002860:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002864:	b29b      	uxth	r3, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	b21a      	sxth	r2, r3
 800286c:	4b65      	ldr	r3, [pc, #404]	; (8002a04 <mpu_get_data+0x250>)
 800286e:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <mpu_get_data+0x24c>)
 8002872:	7a9b      	ldrb	r3, [r3, #10]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <mpu_get_data+0x24c>)
 800287a:	7adb      	ldrb	r3, [r3, #11]
 800287c:	b21b      	sxth	r3, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	b21b      	sxth	r3, r3
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <mpu_get_data+0x250>)
 8002886:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800288a:	b29b      	uxth	r3, r3
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b29b      	uxth	r3, r3
 8002890:	b21a      	sxth	r2, r3
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <mpu_get_data+0x250>)
 8002894:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <mpu_get_data+0x24c>)
 8002898:	7b1b      	ldrb	r3, [r3, #12]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21a      	sxth	r2, r3
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <mpu_get_data+0x24c>)
 80028a0:	7b5b      	ldrb	r3, [r3, #13]
 80028a2:	b21b      	sxth	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <mpu_get_data+0x250>)
 80028ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b21a      	sxth	r2, r3
 80028b8:	4b52      	ldr	r3, [pc, #328]	; (8002a04 <mpu_get_data+0x250>)
 80028ba:	825a      	strh	r2, [r3, #18]

    ist8310_get_data(ist_buff);
 80028bc:	4852      	ldr	r0, [pc, #328]	; (8002a08 <mpu_get_data+0x254>)
 80028be:	f7ff ff6b 	bl	8002798 <ist8310_get_data>
    memcpy(&mpu_data.mx, ist_buff, 6);
 80028c2:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <mpu_get_data+0x250>)
 80028c4:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <mpu_get_data+0x254>)
 80028c6:	3306      	adds	r3, #6
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	6019      	str	r1, [r3, #0]
 80028cc:	8892      	ldrh	r2, [r2, #4]
 80028ce:	809a      	strh	r2, [r3, #4]

    memcpy(&imu.ax, &mpu_data.ax, 6 * sizeof(int16_t));
 80028d0:	220c      	movs	r2, #12
 80028d2:	494c      	ldr	r1, [pc, #304]	; (8002a04 <mpu_get_data+0x250>)
 80028d4:	484d      	ldr	r0, [pc, #308]	; (8002a0c <mpu_get_data+0x258>)
 80028d6:	f005 fe33 	bl	8008540 <memcpy>

    imu.temp = 21 + mpu_data.temp / 333.87f;
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <mpu_get_data+0x250>)
 80028dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002a10 <mpu_get_data+0x25c>
 80028ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80028f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f8:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <mpu_get_data+0x258>)
 80028fa:	edc3 7a03 	vstr	s15, [r3, #12]
	  /* 2000dps -> rad/s */
	  imu.wx   = mpu_data.gx / 16.384f / 57.3f;
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <mpu_get_data+0x250>)
 8002900:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002a14 <mpu_get_data+0x260>
 8002910:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002914:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002a18 <mpu_get_data+0x264>
 8002918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <mpu_get_data+0x258>)
 800291e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu.wy   = mpu_data.gy / 16.384f / 57.3f;
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <mpu_get_data+0x250>)
 8002924:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002930:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002a14 <mpu_get_data+0x260>
 8002934:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002938:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002a18 <mpu_get_data+0x264>
 800293c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <mpu_get_data+0x258>)
 8002942:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu.wz   = mpu_data.gz / 16.384f / 57.3f;
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <mpu_get_data+0x250>)
 8002948:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002954:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002a14 <mpu_get_data+0x260>
 8002958:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800295c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002a18 <mpu_get_data+0x264>
 8002960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <mpu_get_data+0x258>)
 8002966:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    imu.ax_g = mpu_data.ax / 4096.0f;
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <mpu_get_data+0x250>)
 800296c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002978:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002a1c <mpu_get_data+0x268>
 800297c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <mpu_get_data+0x258>)
 8002982:	edc3 7a04 	vstr	s15, [r3, #16]
    imu.ay_g = mpu_data.ay / 4096.0f;
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <mpu_get_data+0x250>)
 8002988:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002994:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002a1c <mpu_get_data+0x268>
 8002998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <mpu_get_data+0x258>)
 800299e:	edc3 7a05 	vstr	s15, [r3, #20]
    imu.az_g = mpu_data.az / 4096.0f;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <mpu_get_data+0x250>)
 80029a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002a1c <mpu_get_data+0x268>
 80029b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <mpu_get_data+0x258>)
 80029ba:	edc3 7a06 	vstr	s15, [r3, #24]

    imu.ax_mps_2 = imu.ax_g * 9.8f;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <mpu_get_data+0x258>)
 80029c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80029c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002a20 <mpu_get_data+0x26c>
 80029c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <mpu_get_data+0x258>)
 80029ce:	edc3 7a07 	vstr	s15, [r3, #28]
    imu.ay_mps_2 = imu.ay_g * 9.8f;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <mpu_get_data+0x258>)
 80029d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80029d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002a20 <mpu_get_data+0x26c>
 80029dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <mpu_get_data+0x258>)
 80029e2:	edc3 7a08 	vstr	s15, [r3, #32]
    imu.az_mps_2 = imu.az_g * 9.8f;
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <mpu_get_data+0x258>)
 80029e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80029ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002a20 <mpu_get_data+0x26c>
 80029f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <mpu_get_data+0x258>)
 80029f6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200009c8 	.word	0x200009c8
 8002a04:	200009a8 	.word	0x200009a8
 8002a08:	20000998 	.word	0x20000998
 8002a0c:	200000e8 	.word	0x200000e8
 8002a10:	43a6ef5c 	.word	0x43a6ef5c
 8002a14:	4183126f 	.word	0x4183126f
 8002a18:	42653333 	.word	0x42653333
 8002a1c:	45800000 	.word	0x45800000
 8002a20:	411ccccd 	.word	0x411ccccd

08002a24 <mpu_set_gyro_fsr>:
  * @param  fsr: range(0,±250dps;1,±500dps;2,±1000dps;3,±2000dps)
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4619      	mov	r1, r3
 8002a36:	201b      	movs	r0, #27
 8002a38:	f7ff fcce 	bl	80023d8 <mpu_write_byte>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <mpu_set_accel_fsr>:
  * @param  fsr: range(0,±2g;1,±4g;2,±8g;3,±16g)
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	201c      	movs	r0, #28
 8002a5a:	f7ff fcbd 	bl	80023d8 <mpu_write_byte>
 8002a5e:	4603      	mov	r3, r0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <mpu_device_init>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
uint8_t mpu_device_init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
	MPU_DELAY(100);
 8002a6e:	2064      	movs	r0, #100	; 0x64
 8002a70:	f001 ff1c 	bl	80048ac <HAL_Delay>

	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 8002a74:	2075      	movs	r0, #117	; 0x75
 8002a76:	f7ff fce7 	bl	8002448 <mpu_read_byte>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <mpu_device_init+0xc4>)
 8002a80:	701a      	strb	r2, [r3, #0]
	uint8_t i                        = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]
	uint8_t MPU6500_Init_Data[10][2] = {{ MPU6500_PWR_MGMT_1, 0x80 },     /* Reset Device */
 8002a86:	463b      	mov	r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
 8002a94:	236b      	movs	r3, #107	; 0x6b
 8002a96:	703b      	strb	r3, [r7, #0]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	707b      	strb	r3, [r7, #1]
 8002a9c:	236b      	movs	r3, #107	; 0x6b
 8002a9e:	70bb      	strb	r3, [r7, #2]
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	70fb      	strb	r3, [r7, #3]
 8002aa4:	236c      	movs	r3, #108	; 0x6c
 8002aa6:	713b      	strb	r3, [r7, #4]
 8002aa8:	231a      	movs	r3, #26
 8002aaa:	71bb      	strb	r3, [r7, #6]
 8002aac:	2304      	movs	r3, #4
 8002aae:	71fb      	strb	r3, [r7, #7]
 8002ab0:	231b      	movs	r3, #27
 8002ab2:	723b      	strb	r3, [r7, #8]
 8002ab4:	2318      	movs	r3, #24
 8002ab6:	727b      	strb	r3, [r7, #9]
 8002ab8:	231c      	movs	r3, #28
 8002aba:	72bb      	strb	r3, [r7, #10]
 8002abc:	2310      	movs	r3, #16
 8002abe:	72fb      	strb	r3, [r7, #11]
 8002ac0:	231d      	movs	r3, #29
 8002ac2:	733b      	strb	r3, [r7, #12]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	737b      	strb	r3, [r7, #13]
 8002ac8:	236a      	movs	r3, #106	; 0x6a
 8002aca:	73bb      	strb	r3, [r7, #14]
 8002acc:	2320      	movs	r3, #32
 8002ace:	73fb      	strb	r3, [r7, #15]
																			{ MPU6500_CONFIG, 0x04 },         /* LPF 41Hz */
																			{ MPU6500_GYRO_CONFIG, 0x18 },    /* +-2000dps */
																			{ MPU6500_ACCEL_CONFIG, 0x10 },   /* +-8G */
																			{ MPU6500_ACCEL_CONFIG_2, 0x02 }, /* enable LowPassFilter  Set Acc LPF */
																			{ MPU6500_USER_CTRL, 0x20 },};    /* Enable AUX */
	for (i = 0; i < 10; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
 8002ad4:	e017      	b.n	8002b06 <mpu_device_init+0x9e>
	{
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	f107 0218 	add.w	r2, r7, #24
 8002ade:	4413      	add	r3, r2
 8002ae0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f107 0118 	add.w	r1, r7, #24
 8002aec:	440b      	add	r3, r1
 8002aee:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f7ff fc6f 	bl	80023d8 <mpu_write_byte>
		MPU_DELAY(1);
 8002afa:	2001      	movs	r0, #1
 8002afc:	f001 fed6 	bl	80048ac <HAL_Delay>
	for (i = 0; i < 10; i++)
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	3301      	adds	r3, #1
 8002b04:	75fb      	strb	r3, [r7, #23]
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d9e4      	bls.n	8002ad6 <mpu_device_init+0x6e>
	}

	mpu_set_gyro_fsr(3);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f7ff ff89 	bl	8002a24 <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(2);
 8002b12:	2002      	movs	r0, #2
 8002b14:	f7ff ff97 	bl	8002a46 <mpu_set_accel_fsr>

	ist8310_init();
 8002b18:	f7ff fdae 	bl	8002678 <ist8310_init>
	mpu_offset_call();
 8002b1c:	f000 f808 	bl	8002b30 <mpu_offset_call>
	return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000099e 	.word	0x2000099e

08002b30 <mpu_offset_call>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<300;i++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	e07c      	b.n	8002c36 <mpu_offset_call+0x106>
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8002b3c:	220e      	movs	r2, #14
 8002b3e:	4966      	ldr	r1, [pc, #408]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002b40:	203b      	movs	r0, #59	; 0x3b
 8002b42:	f7ff fcb5 	bl	80024b0 <mpu_read_bytes>

		mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002b48:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	b219      	sxth	r1, r3
 8002b56:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002b6a:	829a      	strh	r2, [r3, #20]
		mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8002b6c:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002b6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002b76:	789b      	ldrb	r3, [r3, #2]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	b219      	sxth	r1, r3
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002b7e:	78db      	ldrb	r3, [r3, #3]
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	430b      	orrs	r3, r1
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002b90:	82da      	strh	r2, [r3, #22]
		mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5];
 8002b92:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002b94:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002b9c:	791b      	ldrb	r3, [r3, #4]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b219      	sxth	r1, r3
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002ba4:	795b      	ldrb	r3, [r3, #5]
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002bb6:	831a      	strh	r2, [r3, #24]

		mpu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002bba:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b45      	ldr	r3, [pc, #276]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002bc2:	7a1b      	ldrb	r3, [r3, #8]
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	b219      	sxth	r1, r3
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002bca:	7a5b      	ldrb	r3, [r3, #9]
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b21a      	sxth	r2, r3
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002bdc:	835a      	strh	r2, [r3, #26]
		mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002be0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002be8:	7a9b      	ldrb	r3, [r3, #10]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b219      	sxth	r1, r3
 8002bee:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002bf0:	7adb      	ldrb	r3, [r3, #11]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c02:	839a      	strh	r2, [r3, #28]
		mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c06:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002c0e:	7b1b      	ldrb	r3, [r3, #12]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b219      	sxth	r1, r3
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <mpu_offset_call+0x1a8>)
 8002c16:	7b5b      	ldrb	r3, [r3, #13]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c28:	83da      	strh	r2, [r3, #30]

		MPU_DELAY(5);
 8002c2a:	2005      	movs	r0, #5
 8002c2c:	f001 fe3e 	bl	80048ac <HAL_Delay>
	for (i=0; i<300;i++)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3301      	adds	r3, #1
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c3c:	f6ff af7e 	blt.w	8002b3c <mpu_offset_call+0xc>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c42:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <mpu_offset_call+0x1b0>)
 8002c48:	fb82 1203 	smull	r1, r2, r2, r3
 8002c4c:	1152      	asrs	r2, r2, #5
 8002c4e:	17db      	asrs	r3, r3, #31
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c56:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c5a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <mpu_offset_call+0x1b0>)
 8002c60:	fb82 1203 	smull	r1, r2, r2, r3
 8002c64:	1152      	asrs	r2, r2, #5
 8002c66:	17db      	asrs	r3, r3, #31
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c6e:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c72:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002c76:	4a1a      	ldr	r2, [pc, #104]	; (8002ce0 <mpu_offset_call+0x1b0>)
 8002c78:	fb82 1203 	smull	r1, r2, r2, r3
 8002c7c:	1152      	asrs	r2, r2, #5
 8002c7e:	17db      	asrs	r3, r3, #31
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	b21a      	sxth	r2, r3
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c86:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c8a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <mpu_offset_call+0x1b0>)
 8002c90:	fb82 1203 	smull	r1, r2, r2, r3
 8002c94:	1152      	asrs	r2, r2, #5
 8002c96:	17db      	asrs	r3, r3, #31
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002c9e:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002ca2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <mpu_offset_call+0x1b0>)
 8002ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cac:	1152      	asrs	r2, r2, #5
 8002cae:	17db      	asrs	r3, r3, #31
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	b21a      	sxth	r2, r3
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002cb6:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002cba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002cbe:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <mpu_offset_call+0x1b0>)
 8002cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc4:	1152      	asrs	r2, r2, #5
 8002cc6:	17db      	asrs	r3, r3, #31
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <mpu_offset_call+0x1ac>)
 8002cce:	83da      	strh	r2, [r3, #30]
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200009c8 	.word	0x200009c8
 8002cdc:	200009a8 	.word	0x200009a8
 8002ce0:	1b4e81b5 	.word	0x1b4e81b5

08002ce4 <init_quaternion>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void init_quaternion(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
	int16_t hx, hy;//hz;

	hx = imu.mx;
 8002cec:	4b79      	ldr	r3, [pc, #484]	; (8002ed4 <init_quaternion+0x1f0>)
 8002cee:	88db      	ldrh	r3, [r3, #6]
 8002cf0:	81fb      	strh	r3, [r7, #14]
	hy = imu.my;
 8002cf2:	4b78      	ldr	r3, [pc, #480]	; (8002ed4 <init_quaternion+0x1f0>)
 8002cf4:	891b      	ldrh	r3, [r3, #8]
 8002cf6:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
		if (hx < 0 && hy < 0)
 8002cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da36      	bge.n	8002d6e <init_quaternion+0x8a>
 8002d00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da32      	bge.n	8002d6e <init_quaternion+0x8a>
	{
		if (fabs(hx / hy) >= 1)
 8002d08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fbbd 	bl	8000494 <__aeabi_i2d>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	4b6b      	ldr	r3, [pc, #428]	; (8002ed8 <init_quaternion+0x1f4>)
 8002d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d30:	f7fd fea0 	bl	8000a74 <__aeabi_dcmpge>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00c      	beq.n	8002d54 <init_quaternion+0x70>
		{
			q0 = 0.195;
 8002d3a:	4b68      	ldr	r3, [pc, #416]	; (8002edc <init_quaternion+0x1f8>)
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <init_quaternion+0x1fc>)
 8002d3e:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <init_quaternion+0x200>)
 8002d42:	4a69      	ldr	r2, [pc, #420]	; (8002ee8 <init_quaternion+0x204>)
 8002d44:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 8002d46:	4b69      	ldr	r3, [pc, #420]	; (8002eec <init_quaternion+0x208>)
 8002d48:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <init_quaternion+0x20c>)
 8002d4a:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8002d4c:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <init_quaternion+0x210>)
 8002d4e:	4a6a      	ldr	r2, [pc, #424]	; (8002ef8 <init_quaternion+0x214>)
 8002d50:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 8002d52:	e0ba      	b.n	8002eca <init_quaternion+0x1e6>
		}
		else
		{
			q0 = 0.555;
 8002d54:	4b61      	ldr	r3, [pc, #388]	; (8002edc <init_quaternion+0x1f8>)
 8002d56:	4a69      	ldr	r2, [pc, #420]	; (8002efc <init_quaternion+0x218>)
 8002d58:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8002d5a:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <init_quaternion+0x200>)
 8002d5c:	4a62      	ldr	r2, [pc, #392]	; (8002ee8 <init_quaternion+0x204>)
 8002d5e:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <init_quaternion+0x208>)
 8002d62:	4a67      	ldr	r2, [pc, #412]	; (8002f00 <init_quaternion+0x21c>)
 8002d64:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <init_quaternion+0x210>)
 8002d68:	4a66      	ldr	r2, [pc, #408]	; (8002f04 <init_quaternion+0x220>)
 8002d6a:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1)
 8002d6c:	e0ad      	b.n	8002eca <init_quaternion+0x1e6>
		}

	}
	else if (hx < 0 && hy > 0)
 8002d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da35      	bge.n	8002de2 <init_quaternion+0xfe>
 8002d76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dd31      	ble.n	8002de2 <init_quaternion+0xfe>
	{
		if(fabs(hx / hy) >= 1)
 8002d7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fb82 	bl	8000494 <__aeabi_i2d>
 8002d90:	4603      	mov	r3, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	469a      	mov	sl, r3
 8002d96:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <init_quaternion+0x1f4>)
 8002da0:	4650      	mov	r0, sl
 8002da2:	4659      	mov	r1, fp
 8002da4:	f7fd fe66 	bl	8000a74 <__aeabi_dcmpge>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <init_quaternion+0xe4>
		{
			q0 = -0.193;
 8002dae:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <init_quaternion+0x1f8>)
 8002db0:	4a55      	ldr	r2, [pc, #340]	; (8002f08 <init_quaternion+0x224>)
 8002db2:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <init_quaternion+0x200>)
 8002db6:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <init_quaternion+0x228>)
 8002db8:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 8002dba:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <init_quaternion+0x208>)
 8002dbc:	4a54      	ldr	r2, [pc, #336]	; (8002f10 <init_quaternion+0x22c>)
 8002dbe:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <init_quaternion+0x210>)
 8002dc2:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <init_quaternion+0x214>)
 8002dc4:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002dc6:	e080      	b.n	8002eca <init_quaternion+0x1e6>
		}
		else
		{
			q0 = -0.552;
 8002dc8:	4b44      	ldr	r3, [pc, #272]	; (8002edc <init_quaternion+0x1f8>)
 8002dca:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <init_quaternion+0x230>)
 8002dcc:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 8002dce:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <init_quaternion+0x200>)
 8002dd0:	4a51      	ldr	r2, [pc, #324]	; (8002f18 <init_quaternion+0x234>)
 8002dd2:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <init_quaternion+0x208>)
 8002dd6:	4a51      	ldr	r2, [pc, #324]	; (8002f1c <init_quaternion+0x238>)
 8002dd8:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 8002dda:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <init_quaternion+0x210>)
 8002ddc:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <init_quaternion+0x23c>)
 8002dde:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002de0:	e073      	b.n	8002eca <init_quaternion+0x1e6>
		}

	}
	else if (hx > 0 && hy > 0)
 8002de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	dd35      	ble.n	8002e56 <init_quaternion+0x172>
 8002dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	dd31      	ble.n	8002e56 <init_quaternion+0x172>
	{
		if(fabs(hx / hy) >= 1)
 8002df2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb48 	bl	8000494 <__aeabi_i2d>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4698      	mov	r8, r3
 8002e0a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <init_quaternion+0x1f4>)
 8002e14:	4640      	mov	r0, r8
 8002e16:	4649      	mov	r1, r9
 8002e18:	f7fd fe2c 	bl	8000a74 <__aeabi_dcmpge>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <init_quaternion+0x158>
		{
			q0 = -0.9785;
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <init_quaternion+0x1f8>)
 8002e24:	4a3f      	ldr	r2, [pc, #252]	; (8002f24 <init_quaternion+0x240>)
 8002e26:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <init_quaternion+0x200>)
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <init_quaternion+0x244>)
 8002e2c:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <init_quaternion+0x208>)
 8002e30:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <init_quaternion+0x248>)
 8002e32:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 8002e34:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <init_quaternion+0x210>)
 8002e36:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <init_quaternion+0x1fc>)
 8002e38:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002e3a:	e046      	b.n	8002eca <init_quaternion+0x1e6>
		}
		else
		{
			q0 = -0.9828;
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <init_quaternion+0x1f8>)
 8002e3e:	4a3c      	ldr	r2, [pc, #240]	; (8002f30 <init_quaternion+0x24c>)
 8002e40:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <init_quaternion+0x200>)
 8002e44:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <init_quaternion+0x250>)
 8002e46:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <init_quaternion+0x208>)
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <init_quaternion+0x254>)
 8002e4c:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <init_quaternion+0x210>)
 8002e50:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <init_quaternion+0x258>)
 8002e52:	601a      	str	r2, [r3, #0]
		if(fabs(hx / hy) >= 1)
 8002e54:	e039      	b.n	8002eca <init_quaternion+0x1e6>
		}

	}
	else if (hx > 0 && hy < 0)
 8002e56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dd35      	ble.n	8002eca <init_quaternion+0x1e6>
 8002e5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da31      	bge.n	8002eca <init_quaternion+0x1e6>
	{
		if(fabs(hx / hy) >= 1)
 8002e66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb0e 	bl	8000494 <__aeabi_i2d>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <init_quaternion+0x1f4>)
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	f7fd fdf2 	bl	8000a74 <__aeabi_dcmpge>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <init_quaternion+0x1cc>
		{
			q0 = -0.979;
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <init_quaternion+0x1f8>)
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <init_quaternion+0x25c>)
 8002e9a:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <init_quaternion+0x200>)
 8002e9e:	4a29      	ldr	r2, [pc, #164]	; (8002f44 <init_quaternion+0x260>)
 8002ea0:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <init_quaternion+0x208>)
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <init_quaternion+0x254>)
 8002ea6:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <init_quaternion+0x210>)
 8002eaa:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <init_quaternion+0x264>)
 8002eac:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
			q3 = -0.556;
		}
	}
	#endif
}
 8002eae:	e00c      	b.n	8002eca <init_quaternion+0x1e6>
			q0 = -0.83;
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <init_quaternion+0x1f8>)
 8002eb2:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <init_quaternion+0x268>)
 8002eb4:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <init_quaternion+0x200>)
 8002eb8:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <init_quaternion+0x26c>)
 8002eba:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <init_quaternion+0x208>)
 8002ebe:	4a25      	ldr	r2, [pc, #148]	; (8002f54 <init_quaternion+0x270>)
 8002ec0:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <init_quaternion+0x210>)
 8002ec4:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <init_quaternion+0x274>)
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	e7ff      	b.n	8002eca <init_quaternion+0x1e6>
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed4:	200000e8 	.word	0x200000e8
 8002ed8:	3ff00000 	.word	0x3ff00000
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	3e47ae14 	.word	0x3e47ae14
 8002ee4:	200000b4 	.word	0x200000b4
 8002ee8:	bc75c28f 	.word	0xbc75c28f
 8002eec:	200000b8 	.word	0x200000b8
 8002ef0:	3b8ce704 	.word	0x3b8ce704
 8002ef4:	200000bc 	.word	0x200000bc
 8002ef8:	3f7a9fbe 	.word	0x3f7a9fbe
 8002efc:	3f0e147b 	.word	0x3f0e147b
 8002f00:	3bc49ba6 	.word	0x3bc49ba6
 8002f04:	3f543958 	.word	0x3f543958
 8002f08:	be45a1cb 	.word	0xbe45a1cb
 8002f0c:	bc1374bc 	.word	0xbc1374bc
 8002f10:	bbc49ba6 	.word	0xbbc49ba6
 8002f14:	bf0d4fdf 	.word	0xbf0d4fdf
 8002f18:	bb9d4952 	.word	0xbb9d4952
 8002f1c:	bc3c6a7f 	.word	0xbc3c6a7f
 8002f20:	3f54d014 	.word	0x3f54d014
 8002f24:	bf7a7efa 	.word	0xbf7a7efa
 8002f28:	3c03126f 	.word	0x3c03126f
 8002f2c:	bca3d70a 	.word	0xbca3d70a
 8002f30:	bf7b98c8 	.word	0xbf7b98c8
 8002f34:	3b03126f 	.word	0x3b03126f
 8002f38:	bc88ce70 	.word	0xbc88ce70
 8002f3c:	3f0e425b 	.word	0x3f0e425b
 8002f40:	bf7a9fbe 	.word	0xbf7a9fbe
 8002f44:	3c3e0ded 	.word	0x3c3e0ded
 8002f48:	be47ae14 	.word	0xbe47ae14
 8002f4c:	bf547ae1 	.word	0xbf547ae1
 8002f50:	3c656042 	.word	0x3c656042
 8002f54:	bc449ba6 	.word	0xbc449ba6
 8002f58:	bf0e5604 	.word	0xbf0e5604

08002f5c <imu_ahrs_update>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void imu_ahrs_update(void)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b09f      	sub	sp, #124	; 0x7c
 8002f60:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0,tempq1,tempq2,tempq3;

	float q0q0 = q0*q0;
 8002f62:	4bd3      	ldr	r3, [pc, #844]	; (80032b0 <imu_ahrs_update+0x354>)
 8002f64:	ed93 7a00 	vldr	s14, [r3]
 8002f68:	4bd1      	ldr	r3, [pc, #836]	; (80032b0 <imu_ahrs_update+0x354>)
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f72:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0*q1;
 8002f76:	4bce      	ldr	r3, [pc, #824]	; (80032b0 <imu_ahrs_update+0x354>)
 8002f78:	ed93 7a00 	vldr	s14, [r3]
 8002f7c:	4bcd      	ldr	r3, [pc, #820]	; (80032b4 <imu_ahrs_update+0x358>)
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0*q2;
 8002f8a:	4bc9      	ldr	r3, [pc, #804]	; (80032b0 <imu_ahrs_update+0x354>)
 8002f8c:	ed93 7a00 	vldr	s14, [r3]
 8002f90:	4bc9      	ldr	r3, [pc, #804]	; (80032b8 <imu_ahrs_update+0x35c>)
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0*q3;
 8002f9e:	4bc4      	ldr	r3, [pc, #784]	; (80032b0 <imu_ahrs_update+0x354>)
 8002fa0:	ed93 7a00 	vldr	s14, [r3]
 8002fa4:	4bc5      	ldr	r3, [pc, #788]	; (80032bc <imu_ahrs_update+0x360>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1*q1;
 8002fb2:	4bc0      	ldr	r3, [pc, #768]	; (80032b4 <imu_ahrs_update+0x358>)
 8002fb4:	ed93 7a00 	vldr	s14, [r3]
 8002fb8:	4bbe      	ldr	r3, [pc, #760]	; (80032b4 <imu_ahrs_update+0x358>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1*q2;
 8002fc6:	4bbb      	ldr	r3, [pc, #748]	; (80032b4 <imu_ahrs_update+0x358>)
 8002fc8:	ed93 7a00 	vldr	s14, [r3]
 8002fcc:	4bba      	ldr	r3, [pc, #744]	; (80032b8 <imu_ahrs_update+0x35c>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1*q3;
 8002fda:	4bb6      	ldr	r3, [pc, #728]	; (80032b4 <imu_ahrs_update+0x358>)
 8002fdc:	ed93 7a00 	vldr	s14, [r3]
 8002fe0:	4bb6      	ldr	r3, [pc, #728]	; (80032bc <imu_ahrs_update+0x360>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fea:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2*q2;
 8002fee:	4bb2      	ldr	r3, [pc, #712]	; (80032b8 <imu_ahrs_update+0x35c>)
 8002ff0:	ed93 7a00 	vldr	s14, [r3]
 8002ff4:	4bb0      	ldr	r3, [pc, #704]	; (80032b8 <imu_ahrs_update+0x35c>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2*q3;
 8003002:	4bad      	ldr	r3, [pc, #692]	; (80032b8 <imu_ahrs_update+0x35c>)
 8003004:	ed93 7a00 	vldr	s14, [r3]
 8003008:	4bac      	ldr	r3, [pc, #688]	; (80032bc <imu_ahrs_update+0x360>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3*q3;
 8003016:	4ba9      	ldr	r3, [pc, #676]	; (80032bc <imu_ahrs_update+0x360>)
 8003018:	ed93 7a00 	vldr	s14, [r3]
 800301c:	4ba7      	ldr	r3, [pc, #668]	; (80032bc <imu_ahrs_update+0x360>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003026:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = imu.wx;
 800302a:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <imu_ahrs_update+0x364>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	4aa5      	ldr	r2, [pc, #660]	; (80032c4 <imu_ahrs_update+0x368>)
 8003030:	6013      	str	r3, [r2, #0]
	gy = imu.wy;
 8003032:	4ba3      	ldr	r3, [pc, #652]	; (80032c0 <imu_ahrs_update+0x364>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	4aa4      	ldr	r2, [pc, #656]	; (80032c8 <imu_ahrs_update+0x36c>)
 8003038:	6013      	str	r3, [r2, #0]
	gz = imu.wz;
 800303a:	4ba1      	ldr	r3, [pc, #644]	; (80032c0 <imu_ahrs_update+0x364>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4aa3      	ldr	r2, [pc, #652]	; (80032cc <imu_ahrs_update+0x370>)
 8003040:	6013      	str	r3, [r2, #0]
	ax = imu.ax;
 8003042:	4b9f      	ldr	r3, [pc, #636]	; (80032c0 <imu_ahrs_update+0x364>)
 8003044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003050:	4b9f      	ldr	r3, [pc, #636]	; (80032d0 <imu_ahrs_update+0x374>)
 8003052:	edc3 7a00 	vstr	s15, [r3]
	ay = imu.ay;
 8003056:	4b9a      	ldr	r3, [pc, #616]	; (80032c0 <imu_ahrs_update+0x364>)
 8003058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	4b9b      	ldr	r3, [pc, #620]	; (80032d4 <imu_ahrs_update+0x378>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
	az = imu.az;
 800306a:	4b95      	ldr	r3, [pc, #596]	; (80032c0 <imu_ahrs_update+0x364>)
 800306c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003078:	4b97      	ldr	r3, [pc, #604]	; (80032d8 <imu_ahrs_update+0x37c>)
 800307a:	edc3 7a00 	vstr	s15, [r3]
	mx = imu.mx;
 800307e:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <imu_ahrs_update+0x364>)
 8003080:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308c:	4b93      	ldr	r3, [pc, #588]	; (80032dc <imu_ahrs_update+0x380>)
 800308e:	edc3 7a00 	vstr	s15, [r3]
	my = imu.my;
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <imu_ahrs_update+0x364>)
 8003094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a0:	4b8f      	ldr	r3, [pc, #572]	; (80032e0 <imu_ahrs_update+0x384>)
 80030a2:	edc3 7a00 	vstr	s15, [r3]
	mz = imu.mz;
 80030a6:	4b86      	ldr	r3, [pc, #536]	; (80032c0 <imu_ahrs_update+0x364>)
 80030a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b4:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <imu_ahrs_update+0x388>)
 80030b6:	edc3 7a00 	vstr	s15, [r3]

	now_update  = HAL_GetTick(); //ms
 80030ba:	f001 fbeb 	bl	8004894 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b89      	ldr	r3, [pc, #548]	; (80032e8 <imu_ahrs_update+0x38c>)
 80030c2:	601a      	str	r2, [r3, #0]
	halfT       = ((float)(now_update - last_update) / 2000.0f);
 80030c4:	4b88      	ldr	r3, [pc, #544]	; (80032e8 <imu_ahrs_update+0x38c>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b88      	ldr	r3, [pc, #544]	; (80032ec <imu_ahrs_update+0x390>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030d6:	eddf 6a86 	vldr	s13, [pc, #536]	; 80032f0 <imu_ahrs_update+0x394>
 80030da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030de:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_update = now_update;
 80030e2:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <imu_ahrs_update+0x38c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a81      	ldr	r2, [pc, #516]	; (80032ec <imu_ahrs_update+0x390>)
 80030e8:	6013      	str	r3, [r2, #0]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax*ax + ay*ay + az*az);
 80030ea:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <imu_ahrs_update+0x374>)
 80030ec:	ed93 7a00 	vldr	s14, [r3]
 80030f0:	4b77      	ldr	r3, [pc, #476]	; (80032d0 <imu_ahrs_update+0x374>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <imu_ahrs_update+0x378>)
 80030fc:	edd3 6a00 	vldr	s13, [r3]
 8003100:	4b74      	ldr	r3, [pc, #464]	; (80032d4 <imu_ahrs_update+0x378>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800310e:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <imu_ahrs_update+0x37c>)
 8003110:	edd3 6a00 	vldr	s13, [r3]
 8003114:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <imu_ahrs_update+0x37c>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003122:	eeb0 0a67 	vmov.f32	s0, s15
 8003126:	f7ff f91b 	bl	8002360 <inv_sqrt>
 800312a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 800312e:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <imu_ahrs_update+0x374>)
 8003130:	ed93 7a00 	vldr	s14, [r3]
 8003134:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <imu_ahrs_update+0x374>)
 800313e:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8003142:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <imu_ahrs_update+0x378>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800314c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003150:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <imu_ahrs_update+0x378>)
 8003152:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 8003156:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <imu_ahrs_update+0x37c>)
 8003158:	ed93 7a00 	vldr	s14, [r3]
 800315c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003164:	4b5c      	ldr	r3, [pc, #368]	; (80032d8 <imu_ahrs_update+0x37c>)
 8003166:	edc3 7a00 	vstr	s15, [r3]

	#ifdef IST8310
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
 800316a:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <imu_ahrs_update+0x380>)
 800316c:	ed93 7a00 	vldr	s14, [r3]
 8003170:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <imu_ahrs_update+0x380>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317a:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <imu_ahrs_update+0x384>)
 800317c:	edd3 6a00 	vldr	s13, [r3]
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <imu_ahrs_update+0x384>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800318a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318e:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <imu_ahrs_update+0x388>)
 8003190:	edd3 6a00 	vldr	s13, [r3]
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <imu_ahrs_update+0x388>)
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	eeb0 0a67 	vmov.f32	s0, s15
 80031a6:	f7ff f8db 	bl	8002360 <inv_sqrt>
 80031aa:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		mx = mx * norm;
 80031ae:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <imu_ahrs_update+0x380>)
 80031b0:	ed93 7a00 	vldr	s14, [r3]
 80031b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <imu_ahrs_update+0x380>)
 80031be:	edc3 7a00 	vstr	s15, [r3]
		my = my * norm;
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <imu_ahrs_update+0x384>)
 80031c4:	ed93 7a00 	vldr	s14, [r3]
 80031c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80031cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <imu_ahrs_update+0x384>)
 80031d2:	edc3 7a00 	vstr	s15, [r3]
		mz = mz * norm;
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <imu_ahrs_update+0x388>)
 80031d8:	ed93 7a00 	vldr	s14, [r3]
 80031dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80031e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <imu_ahrs_update+0x388>)
 80031e6:	edc3 7a00 	vstr	s15, [r3]
		mx = 0;
		my = 0;
		mz = 0;
	#endif
	/* compute reference direction of flux */
	hx = 2.0f*mx*(0.5f - q2q2 - q3q3) + 2.0f*my*(q1q2 - q0q3) + 2.0f*mz*(q1q3 + q0q2);
 80031ea:	4b3c      	ldr	r3, [pc, #240]	; (80032dc <imu_ahrs_update+0x380>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80031f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80031f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003200:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003204:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <imu_ahrs_update+0x384>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003216:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 800321a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800321e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003226:	ee37 7a27 	vadd.f32	s14, s14, s15
 800322a:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <imu_ahrs_update+0x388>)
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003234:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8003238:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800323c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f*mx*(q1q2 + q0q3) + 2.0f*my*(0.5f - q1q1 - q3q3) + 2.0f*mz*(q2q3 - q0q1);
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <imu_ahrs_update+0x380>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003256:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800325a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <imu_ahrs_update+0x384>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003270:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003274:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003278:	ee36 6a67 	vsub.f32	s12, s12, s15
 800327c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003280:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <imu_ahrs_update+0x388>)
 800328e:	edd3 7a00 	vldr	s15, [r3]
 8003292:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003296:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800329a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800329e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80032ae:	e021      	b.n	80032f4 <imu_ahrs_update+0x398>
 80032b0:	20000000 	.word	0x20000000
 80032b4:	200000b4 	.word	0x200000b4
 80032b8:	200000b8 	.word	0x200000b8
 80032bc:	200000bc 	.word	0x200000bc
 80032c0:	200000e8 	.word	0x200000e8
 80032c4:	200000c0 	.word	0x200000c0
 80032c8:	200000c4 	.word	0x200000c4
 80032cc:	200000c8 	.word	0x200000c8
 80032d0:	200000cc 	.word	0x200000cc
 80032d4:	200000d0 	.word	0x200000d0
 80032d8:	200000d4 	.word	0x200000d4
 80032dc:	200000d8 	.word	0x200000d8
 80032e0:	200000dc 	.word	0x200000dc
 80032e4:	200000e0 	.word	0x200000e0
 80032e8:	200009a0 	.word	0x200009a0
 80032ec:	200009dc 	.word	0x200009dc
 80032f0:	44fa0000 	.word	0x44fa0000
	hz = 2.0f*mx*(q1q3 - q0q2) + 2.0f*my*(q2q3 + q0q1) + 2.0f*mz*(0.5f - q1q1 - q2q2);
 80032f4:	4be8      	ldr	r3, [pc, #928]	; (8003698 <imu_ahrs_update+0x73c>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80032fe:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003302:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003306:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	4be3      	ldr	r3, [pc, #908]	; (800369c <imu_ahrs_update+0x740>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003318:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800331c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003320:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332c:	4bdc      	ldr	r3, [pc, #880]	; (80036a0 <imu_ahrs_update+0x744>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003336:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800333a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800333e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003342:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003346:	ee76 7a67 	vsub.f32	s15, s12, s15
 800334a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx*hx) + (hy*hy));
 8003356:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800335a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800335e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003362:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003366:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800336a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	ee17 0a90 	vmov	r0, s15
 8003376:	f7fd f89f 	bl	80004b8 <__aeabi_f2d>
 800337a:	4603      	mov	r3, r0
 800337c:	460c      	mov	r4, r1
 800337e:	ec44 3b10 	vmov	d0, r3, r4
 8003382:	f005 f9af 	bl	80086e4 <sqrt>
 8003386:	ec54 3b10 	vmov	r3, r4, d0
 800338a:	4618      	mov	r0, r3
 800338c:	4621      	mov	r1, r4
 800338e:	f7fd fb9b 	bl	8000ac8 <__aeabi_d2f>
 8003392:	4603      	mov	r3, r0
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 8003396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003398:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f*(q1q3 - q0q2);
 800339a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800339e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80033a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033aa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f*(q0q1 + q2q3);
 80033ae:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80033b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80033b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 80033c2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80033c6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80033ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ce:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80033da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f*bx*(0.5f - q2q2 - q3q3) + 2.0f*bz*(q1q3 - q0q2);
 80033e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80033e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80033ee:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80033fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003402:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003406:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800340a:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 800340e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003412:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f*bx*(q1q2 - q0q3) + 2.0f*bz*(q0q1 + q2q3);
 8003422:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003426:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800342a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800342e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003432:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800343a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800343e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003442:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8003446:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800344a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800344e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003456:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f*bx*(q0q2 + q1q3) + 2.0f*bz*(0.5f - q1q1 - q2q2);
 800345a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800345e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003462:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8003466:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003472:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003476:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800347a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800347e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003482:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003486:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800348a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003496:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay*vz - az*vy) + (my*wz - mz*wy);
 800349a:	4b82      	ldr	r3, [pc, #520]	; (80036a4 <imu_ahrs_update+0x748>)
 800349c:	ed93 7a00 	vldr	s14, [r3]
 80034a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80034a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a8:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <imu_ahrs_update+0x74c>)
 80034aa:	edd3 6a00 	vldr	s13, [r3]
 80034ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80034b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ba:	4b78      	ldr	r3, [pc, #480]	; (800369c <imu_ahrs_update+0x740>)
 80034bc:	edd3 6a00 	vldr	s13, [r3]
 80034c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80034c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034c8:	4b75      	ldr	r3, [pc, #468]	; (80036a0 <imu_ahrs_update+0x744>)
 80034ca:	ed93 6a00 	vldr	s12, [r3]
 80034ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80034d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034de:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az*vx - ax*vz) + (mz*wx - mx*wz);
 80034e2:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <imu_ahrs_update+0x74c>)
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80034ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f0:	4b6e      	ldr	r3, [pc, #440]	; (80036ac <imu_ahrs_update+0x750>)
 80034f2:	edd3 6a00 	vldr	s13, [r3]
 80034f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80034fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003502:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <imu_ahrs_update+0x744>)
 8003504:	edd3 6a00 	vldr	s13, [r3]
 8003508:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800350c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <imu_ahrs_update+0x73c>)
 8003512:	ed93 6a00 	vldr	s12, [r3]
 8003516:	edd7 7a07 	vldr	s15, [r7, #28]
 800351a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800351e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003526:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax*vy - ay*vx) + (mx*wy - my*wx);
 800352a:	4b60      	ldr	r3, [pc, #384]	; (80036ac <imu_ahrs_update+0x750>)
 800352c:	ed93 7a00 	vldr	s14, [r3]
 8003530:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003538:	4b5a      	ldr	r3, [pc, #360]	; (80036a4 <imu_ahrs_update+0x748>)
 800353a:	edd3 6a00 	vldr	s13, [r3]
 800353e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800354a:	4b53      	ldr	r3, [pc, #332]	; (8003698 <imu_ahrs_update+0x73c>)
 800354c:	edd3 6a00 	vldr	s13, [r3]
 8003550:	edd7 7a08 	vldr	s15, [r7, #32]
 8003554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <imu_ahrs_update+0x740>)
 800355a:	ed93 6a00 	vldr	s12, [r3]
 800355e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003562:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003566:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8003572:	edd7 7a06 	vldr	s15, [r7, #24]
 8003576:	eef5 7a40 	vcmp.f32	s15, #0.0
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d076      	beq.n	800366e <imu_ahrs_update+0x712>
 8003580:	edd7 7a05 	vldr	s15, [r7, #20]
 8003584:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d06f      	beq.n	800366e <imu_ahrs_update+0x712>
 800358e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d068      	beq.n	800366e <imu_ahrs_update+0x712>
	{
		exInt = exInt + ex * Ki * halfT;
 800359c:	edd7 7a06 	vldr	s15, [r7, #24]
 80035a0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80036b0 <imu_ahrs_update+0x754>
 80035a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80035ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b0:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <imu_ahrs_update+0x758>)
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <imu_ahrs_update+0x758>)
 80035bc:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * Ki * halfT;
 80035c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80036b0 <imu_ahrs_update+0x754>
 80035c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035cc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80035d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d4:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <imu_ahrs_update+0x75c>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <imu_ahrs_update+0x75c>)
 80035e0:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * Ki * halfT;
 80035e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80036b0 <imu_ahrs_update+0x754>
 80035ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80035f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f8:	4b30      	ldr	r3, [pc, #192]	; (80036bc <imu_ahrs_update+0x760>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003602:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <imu_ahrs_update+0x760>)
 8003604:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + Kp*ex + exInt;
 8003608:	edd7 7a06 	vldr	s15, [r7, #24]
 800360c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <imu_ahrs_update+0x764>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <imu_ahrs_update+0x758>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003624:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <imu_ahrs_update+0x764>)
 8003626:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + Kp*ey + eyInt;
 800362a:	edd7 7a05 	vldr	s15, [r7, #20]
 800362e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <imu_ahrs_update+0x768>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800363c:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <imu_ahrs_update+0x75c>)
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <imu_ahrs_update+0x768>)
 8003648:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + Kp*ez + ezInt;
 800364c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003650:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <imu_ahrs_update+0x76c>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <imu_ahrs_update+0x760>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <imu_ahrs_update+0x76c>)
 800366a:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <imu_ahrs_update+0x770>)
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	eeb1 7a67 	vneg.f32	s14, s15
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <imu_ahrs_update+0x764>)
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <imu_ahrs_update+0x774>)
 8003684:	edd3 6a00 	vldr	s13, [r3]
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <imu_ahrs_update+0x768>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003692:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003696:	e01d      	b.n	80036d4 <imu_ahrs_update+0x778>
 8003698:	200000d8 	.word	0x200000d8
 800369c:	200000dc 	.word	0x200000dc
 80036a0:	200000e0 	.word	0x200000e0
 80036a4:	200000d0 	.word	0x200000d0
 80036a8:	200000d4 	.word	0x200000d4
 80036ac:	200000cc 	.word	0x200000cc
 80036b0:	3c23d70a 	.word	0x3c23d70a
 80036b4:	20000994 	.word	0x20000994
 80036b8:	200009a4 	.word	0x200009a4
 80036bc:	200009d8 	.word	0x200009d8
 80036c0:	200000c0 	.word	0x200000c0
 80036c4:	200000c4 	.word	0x200000c4
 80036c8:	200000c8 	.word	0x200000c8
 80036cc:	200000b4 	.word	0x200000b4
 80036d0:	200000b8 	.word	0x200000b8
 80036d4:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <imu_ahrs_update+0x924>)
 80036d6:	edd3 6a00 	vldr	s13, [r3]
 80036da:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <imu_ahrs_update+0x928>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80036ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f0:	4b65      	ldr	r3, [pc, #404]	; (8003888 <imu_ahrs_update+0x92c>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fa:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0*gx + q2*gz - q3*gy) * halfT;
 80036fe:	4b62      	ldr	r3, [pc, #392]	; (8003888 <imu_ahrs_update+0x92c>)
 8003700:	ed93 7a00 	vldr	s14, [r3]
 8003704:	4b61      	ldr	r3, [pc, #388]	; (800388c <imu_ahrs_update+0x930>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370e:	4b60      	ldr	r3, [pc, #384]	; (8003890 <imu_ahrs_update+0x934>)
 8003710:	edd3 6a00 	vldr	s13, [r3]
 8003714:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <imu_ahrs_update+0x928>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800371e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003722:	4b57      	ldr	r3, [pc, #348]	; (8003880 <imu_ahrs_update+0x924>)
 8003724:	edd3 6a00 	vldr	s13, [r3]
 8003728:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <imu_ahrs_update+0x938>)
 800372a:	edd3 7a00 	vldr	s15, [r3]
 800372e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003732:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003736:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800373a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373e:	4b56      	ldr	r3, [pc, #344]	; (8003898 <imu_ahrs_update+0x93c>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003748:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0*gy - q1*gz + q3*gx) * halfT;
 800374c:	4b4e      	ldr	r3, [pc, #312]	; (8003888 <imu_ahrs_update+0x92c>)
 800374e:	ed93 7a00 	vldr	s14, [r3]
 8003752:	4b50      	ldr	r3, [pc, #320]	; (8003894 <imu_ahrs_update+0x938>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <imu_ahrs_update+0x93c>)
 800375e:	edd3 6a00 	vldr	s13, [r3]
 8003762:	4b48      	ldr	r3, [pc, #288]	; (8003884 <imu_ahrs_update+0x928>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003770:	4b43      	ldr	r3, [pc, #268]	; (8003880 <imu_ahrs_update+0x924>)
 8003772:	edd3 6a00 	vldr	s13, [r3]
 8003776:	4b45      	ldr	r3, [pc, #276]	; (800388c <imu_ahrs_update+0x930>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003784:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800378c:	4b40      	ldr	r3, [pc, #256]	; (8003890 <imu_ahrs_update+0x934>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003796:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0*gz + q1*gy - q2*gx) * halfT;
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <imu_ahrs_update+0x92c>)
 800379c:	ed93 7a00 	vldr	s14, [r3]
 80037a0:	4b38      	ldr	r3, [pc, #224]	; (8003884 <imu_ahrs_update+0x928>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <imu_ahrs_update+0x93c>)
 80037ac:	edd3 6a00 	vldr	s13, [r3]
 80037b0:	4b38      	ldr	r3, [pc, #224]	; (8003894 <imu_ahrs_update+0x938>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <imu_ahrs_update+0x934>)
 80037c0:	edd3 6a00 	vldr	s13, [r3]
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <imu_ahrs_update+0x930>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037d2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80037d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037da:	4b29      	ldr	r3, [pc, #164]	; (8003880 <imu_ahrs_update+0x924>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e4:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
 80037e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80037ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f4:	edd7 6a02 	vldr	s13, [r7, #8]
 80037f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003804:	edd7 6a01 	vldr	s13, [r7, #4]
 8003808:	edd7 7a01 	vldr	s15, [r7, #4]
 800380c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003814:	edd7 6a00 	vldr	s13, [r7]
 8003818:	edd7 7a00 	vldr	s15, [r7]
 800381c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003824:	eeb0 0a67 	vmov.f32	s0, s15
 8003828:	f7fe fd9a 	bl	8002360 <inv_sqrt>
 800382c:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8003830:	ed97 7a03 	vldr	s14, [r7, #12]
 8003834:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <imu_ahrs_update+0x92c>)
 800383e:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8003842:	ed97 7a02 	vldr	s14, [r7, #8]
 8003846:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <imu_ahrs_update+0x93c>)
 8003850:	edc3 7a00 	vstr	s15, [r3]
	q2 = tempq2 * norm;
 8003854:	ed97 7a01 	vldr	s14, [r7, #4]
 8003858:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800385c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <imu_ahrs_update+0x934>)
 8003862:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 8003866:	ed97 7a00 	vldr	s14, [r7]
 800386a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	4b03      	ldr	r3, [pc, #12]	; (8003880 <imu_ahrs_update+0x924>)
 8003874:	edc3 7a00 	vstr	s15, [r3]
}
 8003878:	bf00      	nop
 800387a:	377c      	adds	r7, #124	; 0x7c
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	200000bc 	.word	0x200000bc
 8003884:	200000c8 	.word	0x200000c8
 8003888:	20000000 	.word	0x20000000
 800388c:	200000c0 	.word	0x200000c0
 8003890:	200000b8 	.word	0x200000b8
 8003894:	200000c4 	.word	0x200000c4
 8003898:	200000b4 	.word	0x200000b4
 800389c:	00000000 	.word	0x00000000

080038a0 <imu_attitude_update>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void imu_attitude_update(void)
{
 80038a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a4:	af00      	add	r7, sp, #0
	imu.last_yaw = imu.yaw;
 80038a6:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <imu_attitude_update+0x1f8>)
 80038a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038aa:	4a7b      	ldr	r2, [pc, #492]	; (8003a98 <imu_attitude_update+0x1f8>)
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
	/* yaw    0----2pi */
	imu.yaw = -atan2(2*q1*q2 + 2*q0*q3, -2*q2*q2 - 2*q3*q3 + 1)* 57.3 + 180.0;
 80038ae:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <imu_attitude_update+0x1fc>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038b8:	4b79      	ldr	r3, [pc, #484]	; (8003aa0 <imu_attitude_update+0x200>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c2:	4b78      	ldr	r3, [pc, #480]	; (8003aa4 <imu_attitude_update+0x204>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80038cc:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <imu_attitude_update+0x208>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038da:	ee17 0a90 	vmov	r0, s15
 80038de:	f7fc fdeb 	bl	80004b8 <__aeabi_f2d>
 80038e2:	4682      	mov	sl, r0
 80038e4:	468b      	mov	fp, r1
 80038e6:	4b6e      	ldr	r3, [pc, #440]	; (8003aa0 <imu_attitude_update+0x200>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80038f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <imu_attitude_update+0x200>)
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038fe:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <imu_attitude_update+0x208>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003908:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <imu_attitude_update+0x208>)
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800391a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800391e:	ee17 0a90 	vmov	r0, s15
 8003922:	f7fc fdc9 	bl	80004b8 <__aeabi_f2d>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	ec43 2b11 	vmov	d1, r2, r3
 800392e:	ec4b ab10 	vmov	d0, sl, fp
 8003932:	f004 fe71 	bl	8008618 <atan2>
 8003936:	ec53 2b10 	vmov	r2, r3, d0
 800393a:	4690      	mov	r8, r2
 800393c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003940:	a353      	add	r3, pc, #332	; (adr r3, 8003a90 <imu_attitude_update+0x1f0>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fe0d 	bl	8000568 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <imu_attitude_update+0x20c>)
 800395c:	f7fc fc4e 	bl	80001fc <__adddf3>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	f7fd f8ae 	bl	8000ac8 <__aeabi_d2f>
 800396c:	4602      	mov	r2, r0
 800396e:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <imu_attitude_update+0x1f8>)
 8003970:	651a      	str	r2, [r3, #80]	; 0x50
	/* pitch  -pi/2----pi/2 */
	imu.pit = -asin(-2*q1*q3 + 2*q0*q2)* 57.3;
 8003972:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <imu_attitude_update+0x1fc>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800397c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003980:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <imu_attitude_update+0x208>)
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800398a:	4b46      	ldr	r3, [pc, #280]	; (8003aa4 <imu_attitude_update+0x204>)
 800398c:	edd3 7a00 	vldr	s15, [r3]
 8003990:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <imu_attitude_update+0x200>)
 8003996:	edd3 7a00 	vldr	s15, [r3]
 800399a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800399e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a2:	ee17 0a90 	vmov	r0, s15
 80039a6:	f7fc fd87 	bl	80004b8 <__aeabi_f2d>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	ec43 2b10 	vmov	d0, r2, r3
 80039b2:	f004 fdd9 	bl	8008568 <asin>
 80039b6:	ec53 2b10 	vmov	r2, r3, d0
 80039ba:	4614      	mov	r4, r2
 80039bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80039c0:	a333      	add	r3, pc, #204	; (adr r3, 8003a90 <imu_attitude_update+0x1f0>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fc fdcd 	bl	8000568 <__aeabi_dmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	4618      	mov	r0, r3
 80039d4:	4621      	mov	r1, r4
 80039d6:	f7fd f877 	bl	8000ac8 <__aeabi_d2f>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <imu_attitude_update+0x1f8>)
 80039de:	64da      	str	r2, [r3, #76]	; 0x4c
	/* roll   -pi----pi  */
	imu.rol =  atan2(2*q2*q3 + 2*q0*q1, -2*q1*q1 - 2*q2*q2 + 1)* 57.3;
 80039e0:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <imu_attitude_update+0x200>)
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <imu_attitude_update+0x208>)
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f4:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <imu_attitude_update+0x204>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039fe:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <imu_attitude_update+0x1fc>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0c:	ee17 0a90 	vmov	r0, s15
 8003a10:	f7fc fd52 	bl	80004b8 <__aeabi_f2d>
 8003a14:	4604      	mov	r4, r0
 8003a16:	460d      	mov	r5, r1
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <imu_attitude_update+0x1fc>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003a22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <imu_attitude_update+0x1fc>)
 8003a28:	edd3 7a00 	vldr	s15, [r3]
 8003a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <imu_attitude_update+0x200>)
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <imu_attitude_update+0x200>)
 8003a3c:	edd3 7a00 	vldr	s15, [r3]
 8003a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a50:	ee17 0a90 	vmov	r0, s15
 8003a54:	f7fc fd30 	bl	80004b8 <__aeabi_f2d>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	ec43 2b11 	vmov	d1, r2, r3
 8003a60:	ec45 4b10 	vmov	d0, r4, r5
 8003a64:	f004 fdd8 	bl	8008618 <atan2>
 8003a68:	ec51 0b10 	vmov	r0, r1, d0
 8003a6c:	a308      	add	r3, pc, #32	; (adr r3, 8003a90 <imu_attitude_update+0x1f0>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc fd79 	bl	8000568 <__aeabi_dmul>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f7fd f823 	bl	8000ac8 <__aeabi_d2f>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <imu_attitude_update+0x1f8>)
 8003a86:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003a88:	bf00      	nop
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	66666666 	.word	0x66666666
 8003a94:	404ca666 	.word	0x404ca666
 8003a98:	200000e8 	.word	0x200000e8
 8003a9c:	200000b4 	.word	0x200000b4
 8003aa0:	200000b8 	.word	0x200000b8
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	200000bc 	.word	0x200000bc
 8003aac:	40668000 	.word	0x40668000

08003ab0 <pwm_imu_start>:
 */

#include "rm_pwm.h"
#include "main.h"

void pwm_imu_start(){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <pwm_imu_start+0x10>)
 8003ab8:	f003 fb18 	bl	80070ec <HAL_TIM_PWM_Start>
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000238 	.word	0x20000238

08003ac4 <pwm_buzzer_start>:

void pwm_buzzer_start(){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <pwm_buzzer_start+0x10>)
 8003acc:	f003 fb0e 	bl	80070ec <HAL_TIM_PWM_Start>
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000554 	.word	0x20000554

08003ad8 <set_pwm_imu>:

void set_pwm_imu(unsigned short int pwm){
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR2 = (pwm);
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <set_pwm_imu+0x1c>)
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40000400 	.word	0x40000400

08003af8 <set_pwm_buzzer>:

void set_pwm_buzzer(unsigned short int pwm){
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
	TIM12->CCR1 = (pwm);
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <set_pwm_buzzer+0x1c>)
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40001800 	.word	0x40001800

08003b18 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d125      	bne.n	8003b84 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <uart_receive_dma_no_it+0x2c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e01e      	b.n	8003b86 <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f001 ff00 	bl	8005970 <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7e:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
	}
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b29b      	uxth	r3, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bca:	b21a      	sxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	b21a      	sxth	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	015b      	lsls	r3, r3, #5
 8003bf8:	b21b      	sxth	r3, r3
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c02:	b21a      	sxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b21a      	sxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3302      	adds	r3, #2
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	b21a      	sxth	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	029b      	lsls	r3, r3, #10
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c48:	b21a      	sxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	b21a      	sxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3305      	adds	r3, #5
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	01db      	lsls	r3, r3, #7
 8003c76:	b21b      	sxth	r3, r3
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c80:	b21a      	sxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b21a      	sxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	3305      	adds	r3, #5
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	109b      	asrs	r3, r3, #2
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3305      	adds	r3, #5
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bfb8      	it	lt
 8003cd0:	425b      	neglt	r3, r3
 8003cd2:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003cd6:	dc1a      	bgt.n	8003d0e <rc_callback_handler+0x166>
      (abs(rc->ch2) > 660) || \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfb8      	it	lt
 8003ce2:	425b      	neglt	r3, r3
  if ((abs(rc->ch1) > 660) || \
 8003ce4:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003ce8:	dc11      	bgt.n	8003d0e <rc_callback_handler+0x166>
      (abs(rc->ch3) > 660) || \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bfb8      	it	lt
 8003cf4:	425b      	neglt	r3, r3
      (abs(rc->ch2) > 660) || \
 8003cf6:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003cfa:	dc08      	bgt.n	8003d0e <rc_callback_handler+0x166>
      (abs(rc->ch4) > 660))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfb8      	it	lt
 8003d06:	425b      	neglt	r3, r3
      (abs(rc->ch3) > 660) || \
 8003d08:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003d0c:	dd04      	ble.n	8003d18 <rc_callback_handler+0x170>
  {
    memset(rc, 0, sizeof(rc_info_t));
 8003d0e:	2216      	movs	r2, #22
 8003d10:	2100      	movs	r1, #0
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f004 fc1f 	bl	8008556 <memset>
  }

  rc->mouse.x = buff[6] | (buff[7] << 8);                    //!< Mouse X axis
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	3306      	adds	r3, #6
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	3307      	adds	r3, #7
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b21a      	sxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	819a      	strh	r2, [r3, #12]
  rc->mouse.y = buff[8] | (buff[9] << 8);                    //!< Mouse Y axis
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	3309      	adds	r3, #9
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b21a      	sxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	81da      	strh	r2, [r3, #14]
  rc->mouse.z = buff[10] | (buff[11] << 8);                  //!< Mouse Z axis
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	330a      	adds	r3, #10
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	330b      	adds	r3, #11
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	b21b      	sxth	r3, r3
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	b21a      	sxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	821a      	strh	r2, [r3, #16]
  rc->mouse.l = buff[12];                                  //!< Mouse Left Is Press ?
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	7b1a      	ldrb	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	749a      	strb	r2, [r3, #18]
  rc->mouse.r = buff[13];                                  //!< Mouse Right Is Press ?
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	7b5a      	ldrb	r2, [r3, #13]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	74da      	strb	r2, [r3, #19]
  rc->kb.key_code = buff[14] | (buff[15] << 8);                    //!< KeyBoard value
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	330e      	adds	r3, #14
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	330f      	adds	r3, #15
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	829a      	strh	r2, [r3, #20]
  rc->wheel = buff[16] | ( buff[17] << 8);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	3310      	adds	r3, #16
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b21a      	sxth	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	3311      	adds	r3, #17
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b21a      	sxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	811a      	strh	r2, [r3, #8]
  rc->wheel -= 1024;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b21a      	sxth	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	811a      	strh	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <uart_rx_idle_callback+0x80>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d127      	bne.n	8003e3e <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fec0 	bl	8003b8e <dma_current_data_counter>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8003e14:	2b12      	cmp	r3, #18
 8003e16:	d103      	bne.n	8003e20 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 8003e18:	490c      	ldr	r1, [pc, #48]	; (8003e4c <uart_rx_idle_callback+0x84>)
 8003e1a:	480d      	ldr	r0, [pc, #52]	; (8003e50 <uart_rx_idle_callback+0x88>)
 8003e1c:	f7ff fec4 	bl	8003ba8 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2224      	movs	r2, #36	; 0x24
 8003e28:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
	}
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000360 	.word	0x20000360
 8003e4c:	200009f8 	.word	0x200009f8
 8003e50:	200009e0 	.word	0x200009e0

08003e54 <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d109      	bne.n	8003e7e <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ffa5 	bl	8003dc8 <uart_rx_idle_callback>
	}
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <dbus_uart_init+0x40>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <dbus_uart_init+0x40>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <dbus_uart_init+0x40>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <dbus_uart_init+0x40>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0210 	orr.w	r2, r2, #16
 8003eb2:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 8003eb4:	2224      	movs	r2, #36	; 0x24
 8003eb6:	4905      	ldr	r1, [pc, #20]	; (8003ecc <dbus_uart_init+0x44>)
 8003eb8:	4803      	ldr	r0, [pc, #12]	; (8003ec8 <dbus_uart_init+0x40>)
 8003eba:	f7ff fe2d 	bl	8003b18 <uart_receive_dma_no_it>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000360 	.word	0x20000360
 8003ecc:	200009f8 	.word	0x200009f8

08003ed0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_MspInit+0x4c>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4a0f      	ldr	r2, [pc, #60]	; (8003f1c <HAL_MspInit+0x4c>)
 8003ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_MspInit+0x4c>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_MspInit+0x4c>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <HAL_MspInit+0x4c>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_MspInit+0x4c>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800

08003f20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08c      	sub	sp, #48	; 0x30
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	f107 031c 	add.w	r3, r7, #28
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a52      	ldr	r2, [pc, #328]	; (8004088 <HAL_CAN_MspInit+0x168>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d145      	bne.n	8003fce <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003f42:	4b52      	ldr	r3, [pc, #328]	; (800408c <HAL_CAN_MspInit+0x16c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	4a50      	ldr	r2, [pc, #320]	; (800408c <HAL_CAN_MspInit+0x16c>)
 8003f4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	; (800408c <HAL_CAN_MspInit+0x16c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10d      	bne.n	8003f70 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	4b4d      	ldr	r3, [pc, #308]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	4a4c      	ldr	r2, [pc, #304]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f62:	6413      	str	r3, [r2, #64]	; 0x40
 8003f64:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	4b46      	ldr	r3, [pc, #280]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a45      	ldr	r2, [pc, #276]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003f7a:	f043 0308 	orr.w	r3, r3, #8
 8003f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003f9c:	2309      	movs	r3, #9
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	483b      	ldr	r0, [pc, #236]	; (8004094 <HAL_CAN_MspInit+0x174>)
 8003fa8:	f001 ffa8 	bl	8005efc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	2013      	movs	r0, #19
 8003fb2:	f001 fbf8 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003fb6:	2013      	movs	r0, #19
 8003fb8:	f001 fc11 	bl	80057de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	2014      	movs	r0, #20
 8003fc2:	f001 fbf0 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003fc6:	2014      	movs	r0, #20
 8003fc8:	f001 fc09 	bl	80057de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003fcc:	e058      	b.n	8004080 <HAL_CAN_MspInit+0x160>
  else if(hcan->Instance==CAN2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a31      	ldr	r2, [pc, #196]	; (8004098 <HAL_CAN_MspInit+0x178>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d153      	bne.n	8004080 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_CAN_MspInit+0x16c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_CAN_MspInit+0x16c>)
 8003ffc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_CAN_MspInit+0x16c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10d      	bne.n	8004022 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_CAN_MspInit+0x170>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8004010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_CAN_MspInit+0x170>)
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_CAN_MspInit+0x170>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800403e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004050:	2309      	movs	r3, #9
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	4810      	ldr	r0, [pc, #64]	; (800409c <HAL_CAN_MspInit+0x17c>)
 800405c:	f001 ff4e 	bl	8005efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8004060:	2200      	movs	r2, #0
 8004062:	2100      	movs	r1, #0
 8004064:	203f      	movs	r0, #63	; 0x3f
 8004066:	f001 fb9e 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800406a:	203f      	movs	r0, #63	; 0x3f
 800406c:	f001 fbb7 	bl	80057de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004070:	2200      	movs	r2, #0
 8004072:	2100      	movs	r1, #0
 8004074:	2040      	movs	r0, #64	; 0x40
 8004076:	f001 fb96 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800407a:	2040      	movs	r0, #64	; 0x40
 800407c:	f001 fbaf 	bl	80057de <HAL_NVIC_EnableIRQ>
}
 8004080:	bf00      	nop
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40006400 	.word	0x40006400
 800408c:	2000013c 	.word	0x2000013c
 8004090:	40023800 	.word	0x40023800
 8004094:	40020c00 	.word	0x40020c00
 8004098:	40006800 	.word	0x40006800
 800409c:	40020400 	.word	0x40020400

080040a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_SPI_MspInit+0x84>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d12c      	bne.n	800411c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_SPI_MspInit+0x88>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_SPI_MspInit+0x88>)
 80040cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d0:	6453      	str	r3, [r2, #68]	; 0x44
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_SPI_MspInit+0x88>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_SPI_MspInit+0x88>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <HAL_SPI_MspInit+0x88>)
 80040e8:	f043 0320 	orr.w	r3, r3, #32
 80040ec:	6313      	str	r3, [r2, #48]	; 0x30
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_SPI_MspInit+0x88>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80040fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80040fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004100:	2302      	movs	r3, #2
 8004102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004108:	2303      	movs	r3, #3
 800410a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800410c:	2305      	movs	r3, #5
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	4619      	mov	r1, r3
 8004116:	4805      	ldr	r0, [pc, #20]	; (800412c <HAL_SPI_MspInit+0x8c>)
 8004118:	f001 fef0 	bl	8005efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800411c:	bf00      	nop
 800411e:	3728      	adds	r7, #40	; 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40015000 	.word	0x40015000
 8004128:	40023800 	.word	0x40023800
 800412c:	40021400 	.word	0x40021400

08004130 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800415e:	e03a      	b.n	80041d6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_TIM_PWM_MspInit+0xb8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]
}
 8004186:	e026      	b.n	80041d6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a17      	ldr	r2, [pc, #92]	; (80041ec <HAL_TIM_PWM_MspInit+0xbc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	e012      	b.n	80041d6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM12)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10d      	bne.n	80041d6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80041c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800
 80041f0:	40001800 	.word	0x40001800

080041f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08c      	sub	sp, #48	; 0x30
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fc:	f107 031c 	add.w	r3, r7, #28
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d11e      	bne.n	8004254 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4a45      	ldr	r2, [pc, #276]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6313      	str	r3, [r2, #48]	; 0x30
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8004232:	230f      	movs	r3, #15
 8004234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	2302      	movs	r3, #2
 8004238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423e:	2300      	movs	r3, #0
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004242:	2301      	movs	r3, #1
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004246:	f107 031c 	add.w	r3, r7, #28
 800424a:	4619      	mov	r1, r3
 800424c:	483a      	ldr	r0, [pc, #232]	; (8004338 <HAL_TIM_MspPostInit+0x144>)
 800424e:	f001 fe55 	bl	8005efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004252:	e06b      	b.n	800432c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a38      	ldr	r2, [pc, #224]	; (800433c <HAL_TIM_MspPostInit+0x148>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d11e      	bne.n	800429c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a33      	ldr	r2, [pc, #204]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800427a:	2320      	movs	r3, #32
 800427c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004286:	2300      	movs	r3, #0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800428a:	2302      	movs	r3, #2
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428e:	f107 031c 	add.w	r3, r7, #28
 8004292:	4619      	mov	r1, r3
 8004294:	482a      	ldr	r0, [pc, #168]	; (8004340 <HAL_TIM_MspPostInit+0x14c>)
 8004296:	f001 fe31 	bl	8005efc <HAL_GPIO_Init>
}
 800429a:	e047      	b.n	800432c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a28      	ldr	r2, [pc, #160]	; (8004344 <HAL_TIM_MspPostInit+0x150>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d11f      	bne.n	80042e6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a21      	ldr	r2, [pc, #132]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80042c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80042c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042d4:	2302      	movs	r3, #2
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042d8:	f107 031c 	add.w	r3, r7, #28
 80042dc:	4619      	mov	r1, r3
 80042de:	481a      	ldr	r0, [pc, #104]	; (8004348 <HAL_TIM_MspPostInit+0x154>)
 80042e0:	f001 fe0c 	bl	8005efc <HAL_GPIO_Init>
}
 80042e4:	e022      	b.n	800432c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM12)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIM_MspPostInit+0x158>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d11d      	bne.n	800432c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 80042fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_TIM_MspPostInit+0x140>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800430c:	2340      	movs	r3, #64	; 0x40
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	2302      	movs	r3, #2
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004318:	2300      	movs	r3, #0
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800431c:	2309      	movs	r3, #9
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	4619      	mov	r1, r3
 8004326:	480a      	ldr	r0, [pc, #40]	; (8004350 <HAL_TIM_MspPostInit+0x15c>)
 8004328:	f001 fde8 	bl	8005efc <HAL_GPIO_Init>
}
 800432c:	bf00      	nop
 800432e:	3730      	adds	r7, #48	; 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	40020000 	.word	0x40020000
 800433c:	40000400 	.word	0x40000400
 8004340:	40020400 	.word	0x40020400
 8004344:	40000800 	.word	0x40000800
 8004348:	40020c00 	.word	0x40020c00
 800434c:	40001800 	.word	0x40001800
 8004350:	40021c00 	.word	0x40021c00

08004354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08e      	sub	sp, #56	; 0x38
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a9e      	ldr	r2, [pc, #632]	; (80045ec <HAL_UART_MspInit+0x298>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d164      	bne.n	8004440 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	4b9d      	ldr	r3, [pc, #628]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	4a9c      	ldr	r2, [pc, #624]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	6453      	str	r3, [r2, #68]	; 0x44
 8004386:	4b9a      	ldr	r3, [pc, #616]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	4b96      	ldr	r3, [pc, #600]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a95      	ldr	r2, [pc, #596]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b93      	ldr	r3, [pc, #588]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80043ae:	23c0      	movs	r3, #192	; 0xc0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b2:	2302      	movs	r3, #2
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ba:	2303      	movs	r3, #3
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043be:	2307      	movs	r3, #7
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c6:	4619      	mov	r1, r3
 80043c8:	488a      	ldr	r0, [pc, #552]	; (80045f4 <HAL_UART_MspInit+0x2a0>)
 80043ca:	f001 fd97 	bl	8005efc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80043ce:	4b8a      	ldr	r3, [pc, #552]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043d0:	4a8a      	ldr	r2, [pc, #552]	; (80045fc <HAL_UART_MspInit+0x2a8>)
 80043d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80043d4:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043dc:	4b86      	ldr	r3, [pc, #536]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e2:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043e8:	4b83      	ldr	r3, [pc, #524]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f0:	4b81      	ldr	r3, [pc, #516]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f6:	4b80      	ldr	r3, [pc, #512]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80043fc:	4b7e      	ldr	r3, [pc, #504]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 80043fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004402:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004404:	4b7c      	ldr	r3, [pc, #496]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 8004406:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800440a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800440c:	4b7a      	ldr	r3, [pc, #488]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 800440e:	2200      	movs	r2, #0
 8004410:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004412:	4879      	ldr	r0, [pc, #484]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 8004414:	f001 f9fe 	bl	8005814 <HAL_DMA_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800441e:	f7fd fa31 	bl	8001884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a74      	ldr	r2, [pc, #464]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 8004426:	635a      	str	r2, [r3, #52]	; 0x34
 8004428:	4a73      	ldr	r2, [pc, #460]	; (80045f8 <HAL_UART_MspInit+0x2a4>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	2025      	movs	r0, #37	; 0x25
 8004434:	f001 f9b7 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004438:	2025      	movs	r0, #37	; 0x25
 800443a:	f001 f9d0 	bl	80057de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800443e:	e0d0      	b.n	80045e2 <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a6e      	ldr	r2, [pc, #440]	; (8004600 <HAL_UART_MspInit+0x2ac>)
 8004446:	4293      	cmp	r3, r2
 8004448:	f040 8091 	bne.w	800456e <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	4b67      	ldr	r3, [pc, #412]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a66      	ldr	r2, [pc, #408]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
 800445c:	4b64      	ldr	r3, [pc, #400]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	4b60      	ldr	r3, [pc, #384]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a5f      	ldr	r2, [pc, #380]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004472:	f043 0308 	orr.w	r3, r3, #8
 8004476:	6313      	str	r3, [r2, #48]	; 0x30
 8004478:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8004484:	2360      	movs	r3, #96	; 0x60
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004488:	2302      	movs	r3, #2
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004490:	2303      	movs	r3, #3
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004494:	2307      	movs	r3, #7
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449c:	4619      	mov	r1, r3
 800449e:	4859      	ldr	r0, [pc, #356]	; (8004604 <HAL_UART_MspInit+0x2b0>)
 80044a0:	f001 fd2c 	bl	8005efc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80044a4:	4b58      	ldr	r3, [pc, #352]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044a6:	4a59      	ldr	r2, [pc, #356]	; (800460c <HAL_UART_MspInit+0x2b8>)
 80044a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80044aa:	4b57      	ldr	r3, [pc, #348]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044b2:	4b55      	ldr	r3, [pc, #340]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b8:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044be:	4b52      	ldr	r3, [pc, #328]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044c6:	4b50      	ldr	r3, [pc, #320]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044cc:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80044d2:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d8:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044da:	2200      	movs	r2, #0
 80044dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044de:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044e4:	4848      	ldr	r0, [pc, #288]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044e6:	f001 f995 	bl	8005814 <HAL_DMA_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80044f0:	f7fd f9c8 	bl	8001884 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a44      	ldr	r2, [pc, #272]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
 80044fa:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_UART_MspInit+0x2b4>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004500:	4b43      	ldr	r3, [pc, #268]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004502:	4a44      	ldr	r2, [pc, #272]	; (8004614 <HAL_UART_MspInit+0x2c0>)
 8004504:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004506:	4b42      	ldr	r3, [pc, #264]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800450c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800450e:	4b40      	ldr	r3, [pc, #256]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004510:	2240      	movs	r2, #64	; 0x40
 8004512:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004514:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800451a:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 800451c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004520:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004528:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800452e:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004530:	2200      	movs	r2, #0
 8004532:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004534:	4b36      	ldr	r3, [pc, #216]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004536:	2200      	movs	r2, #0
 8004538:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800453a:	4b35      	ldr	r3, [pc, #212]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 800453c:	2200      	movs	r2, #0
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004540:	4833      	ldr	r0, [pc, #204]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004542:	f001 f967 	bl	8005814 <HAL_DMA_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800454c:	f7fd f99a 	bl	8001884 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a2f      	ldr	r2, [pc, #188]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_UART_MspInit+0x2bc>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800455c:	2200      	movs	r2, #0
 800455e:	2100      	movs	r1, #0
 8004560:	2026      	movs	r0, #38	; 0x26
 8004562:	f001 f920 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004566:	2026      	movs	r0, #38	; 0x26
 8004568:	f001 f939 	bl	80057de <HAL_NVIC_EnableIRQ>
}
 800456c:	e039      	b.n	80045e2 <HAL_UART_MspInit+0x28e>
  else if(huart->Instance==USART6)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a29      	ldr	r2, [pc, #164]	; (8004618 <HAL_UART_MspInit+0x2c4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d134      	bne.n	80045e2 <HAL_UART_MspInit+0x28e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 8004582:	f043 0320 	orr.w	r3, r3, #32
 8004586:	6453      	str	r3, [r2, #68]	; 0x44
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 800459e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a2:	6313      	str	r3, [r2, #48]	; 0x30
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_UART_MspInit+0x29c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80045b0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b6:	2302      	movs	r3, #2
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045be:	2303      	movs	r3, #3
 80045c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045c2:	2308      	movs	r3, #8
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ca:	4619      	mov	r1, r3
 80045cc:	4813      	ldr	r0, [pc, #76]	; (800461c <HAL_UART_MspInit+0x2c8>)
 80045ce:	f001 fc95 	bl	8005efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	2047      	movs	r0, #71	; 0x47
 80045d8:	f001 f8e5 	bl	80057a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80045dc:	2047      	movs	r0, #71	; 0x47
 80045de:	f001 f8fe 	bl	80057de <HAL_NVIC_EnableIRQ>
}
 80045e2:	bf00      	nop
 80045e4:	3738      	adds	r7, #56	; 0x38
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40011000 	.word	0x40011000
 80045f0:	40023800 	.word	0x40023800
 80045f4:	40020400 	.word	0x40020400
 80045f8:	200002a0 	.word	0x200002a0
 80045fc:	40026440 	.word	0x40026440
 8004600:	40004400 	.word	0x40004400
 8004604:	40020c00 	.word	0x40020c00
 8004608:	20000140 	.word	0x20000140
 800460c:	40026088 	.word	0x40026088
 8004610:	20000300 	.word	0x20000300
 8004614:	400260a0 	.word	0x400260a0
 8004618:	40011400 	.word	0x40011400
 800461c:	40021800 	.word	0x40021800

08004620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004632:	e7fe      	b.n	8004632 <HardFault_Handler+0x4>

08004634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004638:	e7fe      	b.n	8004638 <MemManage_Handler+0x4>

0800463a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800463a:	b480      	push	{r7}
 800463c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800463e:	e7fe      	b.n	800463e <BusFault_Handler+0x4>

08004640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004644:	e7fe      	b.n	8004644 <UsageFault_Handler+0x4>

08004646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004674:	f000 f8fa 	bl	800486c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}

0800467c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <DMA1_Stream5_IRQHandler+0x10>)
 8004682:	f001 f9d3 	bl	8005a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000140 	.word	0x20000140

08004690 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <DMA1_Stream6_IRQHandler+0x10>)
 8004696:	f001 f9c9 	bl	8005a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000300 	.word	0x20000300

080046a4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <CAN1_TX_IRQHandler+0x10>)
 80046aa:	f000 fd78 	bl	800519e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	2000052c 	.word	0x2000052c

080046b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <CAN1_RX0_IRQHandler+0x10>)
 80046be:	f000 fd6e 	bl	800519e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	2000052c 	.word	0x2000052c

080046cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 80046d0:	4803      	ldr	r0, [pc, #12]	; (80046e0 <USART1_IRQHandler+0x14>)
 80046d2:	f7ff fbbf 	bl	8003e54 <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80046d6:	4802      	ldr	r0, [pc, #8]	; (80046e0 <USART1_IRQHandler+0x14>)
 80046d8:	f003 f94c 	bl	8007974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000360 	.word	0x20000360

080046e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <USART2_IRQHandler+0x10>)
 80046ea:	f003 f943 	bl	8007974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200004ec 	.word	0x200004ec

080046f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80046fc:	4802      	ldr	r0, [pc, #8]	; (8004708 <DMA2_Stream2_IRQHandler+0x10>)
 80046fe:	f001 f995 	bl	8005a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200002a0 	.word	0x200002a0

0800470c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004710:	4802      	ldr	r0, [pc, #8]	; (800471c <CAN2_TX_IRQHandler+0x10>)
 8004712:	f000 fd44 	bl	800519e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000278 	.word	0x20000278

08004720 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004724:	4802      	ldr	r0, [pc, #8]	; (8004730 <CAN2_RX0_IRQHandler+0x10>)
 8004726:	f000 fd3a 	bl	800519e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800472a:	bf00      	nop
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000278 	.word	0x20000278

08004734 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004738:	4802      	ldr	r0, [pc, #8]	; (8004744 <USART6_IRQHandler+0x10>)
 800473a:	f003 f91b 	bl	8007974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	200003a4 	.word	0x200003a4

08004748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <SystemInit+0x28>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	4a07      	ldr	r2, [pc, #28]	; (8004770 <SystemInit+0x28>)
 8004754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <SystemInit+0x28>)
 800475e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004762:	609a      	str	r2, [r3, #8]
#endif
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800477a:	e003      	b.n	8004784 <LoopCopyDataInit>

0800477c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800477e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004782:	3104      	adds	r1, #4

08004784 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004784:	480b      	ldr	r0, [pc, #44]	; (80047b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800478a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800478c:	d3f6      	bcc.n	800477c <CopyDataInit>
  ldr  r2, =_sbss
 800478e:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004790:	e002      	b.n	8004798 <LoopFillZerobss>

08004792 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004794:	f842 3b04 	str.w	r3, [r2], #4

08004798 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800479a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800479c:	d3f9      	bcc.n	8004792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800479e:	f7ff ffd3 	bl	8004748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047a2:	f003 fea9 	bl	80084f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047a6:	f7fc fb5f 	bl	8000e68 <main>
  bx  lr    
 80047aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80047b0:	08009580 	.word	0x08009580
  ldr  r0, =_sdata
 80047b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047b8:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80047bc:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80047c0:	20000a20 	.word	0x20000a20

080047c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047c4:	e7fe      	b.n	80047c4 <ADC_IRQHandler>
	...

080047c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_Init+0x40>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <HAL_Init+0x40>)
 80047d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_Init+0x40>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_Init+0x40>)
 80047de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e4:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_Init+0x40>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a07      	ldr	r2, [pc, #28]	; (8004808 <HAL_Init+0x40>)
 80047ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047f0:	2003      	movs	r0, #3
 80047f2:	f000 ffcd 	bl	8005790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047f6:	2000      	movs	r0, #0
 80047f8:	f000 f808 	bl	800480c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047fc:	f7ff fb68 	bl	8003ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40023c00 	.word	0x40023c00

0800480c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_InitTick+0x54>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_InitTick+0x58>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004822:	fbb3 f3f1 	udiv	r3, r3, r1
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	4618      	mov	r0, r3
 800482c:	f000 ffe5 	bl	80057fa <HAL_SYSTICK_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e00e      	b.n	8004858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b0f      	cmp	r3, #15
 800483e:	d80a      	bhi.n	8004856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004840:	2200      	movs	r2, #0
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	f000 ffad 	bl	80057a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800484c:	4a06      	ldr	r2, [pc, #24]	; (8004868 <HAL_InitTick+0x5c>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000014 	.word	0x20000014
 8004864:	2000001c 	.word	0x2000001c
 8004868:	20000018 	.word	0x20000018

0800486c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_IncTick+0x20>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_IncTick+0x24>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4413      	add	r3, r2
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <HAL_IncTick+0x24>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	2000001c 	.word	0x2000001c
 8004890:	20000a1c 	.word	0x20000a1c

08004894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return uwTick;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <HAL_GetTick+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000a1c 	.word	0x20000a1c

080048ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048b4:	f7ff ffee 	bl	8004894 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d005      	beq.n	80048d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_Delay+0x40>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048d2:	bf00      	nop
 80048d4:	f7ff ffde 	bl	8004894 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d8f7      	bhi.n	80048d4 <HAL_Delay+0x28>
  {
  }
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	2000001c 	.word	0x2000001c

080048f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e0ed      	b.n	8004ade <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fb06 	bl	8003f20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0202 	bic.w	r2, r2, #2
 8004922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004924:	f7ff ffb6 	bl	8004894 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800492a:	e012      	b.n	8004952 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800492c:	f7ff ffb2 	bl	8004894 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b0a      	cmp	r3, #10
 8004938:	d90b      	bls.n	8004952 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2205      	movs	r2, #5
 800494a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0c5      	b.n	8004ade <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004970:	f7ff ff90 	bl	8004894 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004976:	e012      	b.n	800499e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004978:	f7ff ff8c 	bl	8004894 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b0a      	cmp	r3, #10
 8004984:	d90b      	bls.n	800499e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2205      	movs	r2, #5
 8004996:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e09f      	b.n	8004ade <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0e5      	beq.n	8004978 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7e1b      	ldrb	r3, [r3, #24]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d108      	bne.n	80049c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e007      	b.n	80049d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	7e5b      	ldrb	r3, [r3, #25]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e007      	b.n	8004a00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7e9b      	ldrb	r3, [r3, #26]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d108      	bne.n	8004a1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0220 	orr.w	r2, r2, #32
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e007      	b.n	8004a2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0220 	bic.w	r2, r2, #32
 8004a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7edb      	ldrb	r3, [r3, #27]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d108      	bne.n	8004a44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0210 	bic.w	r2, r2, #16
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e007      	b.n	8004a54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0210 	orr.w	r2, r2, #16
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7f1b      	ldrb	r3, [r3, #28]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0208 	orr.w	r2, r2, #8
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e007      	b.n	8004a7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0208 	bic.w	r2, r2, #8
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7f5b      	ldrb	r3, [r3, #29]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d108      	bne.n	8004a98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0204 	orr.w	r2, r2, #4
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e007      	b.n	8004aa8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0204 	bic.w	r2, r2, #4
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	ea42 0103 	orr.w	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	1e5a      	subs	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d003      	beq.n	8004b0e <HAL_CAN_ConfigFilter+0x26>
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f040 80be 	bne.w	8004c8a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004b10:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2201      	movs	r2, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	401a      	ands	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d123      	bne.n	8004bb8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3248      	adds	r2, #72	; 0x48
 8004b98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	3348      	adds	r3, #72	; 0x48
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d122      	bne.n	8004c06 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004be0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	3248      	adds	r2, #72	; 0x48
 8004be6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bfa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bfc:	6979      	ldr	r1, [r7, #20]
 8004bfe:	3348      	adds	r3, #72	; 0x48
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	440b      	add	r3, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	401a      	ands	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004c20:	e007      	b.n	8004c32 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	401a      	ands	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004c4c:	e007      	b.n	8004c5e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d107      	bne.n	8004c76 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c7c:	f023 0201 	bic.w	r2, r3, #1
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e006      	b.n	8004c98 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40006400 	.word	0x40006400

08004ca8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d12e      	bne.n	8004d1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd4:	f7ff fdde 	bl	8004894 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004cda:	e012      	b.n	8004d02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cdc:	f7ff fdda 	bl	8004894 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b0a      	cmp	r3, #10
 8004ce8:	d90b      	bls.n	8004d02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e012      	b.n	8004d28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e5      	bne.n	8004cdc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e006      	b.n	8004d28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
  }
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d003      	beq.n	8004d5c <HAL_CAN_AddTxMessage+0x2c>
 8004d54:	7ffb      	ldrb	r3, [r7, #31]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	f040 80b8 	bne.w	8004ecc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80a0 	beq.w	8004ebc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	0e1b      	lsrs	r3, r3, #24
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d907      	bls.n	8004d9c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e09e      	b.n	8004eda <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	409a      	lsls	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	6809      	ldr	r1, [r1, #0]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	440b      	add	r3, r1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e00f      	b.n	8004dea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004dd4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004dde:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3318      	adds	r3, #24
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	440b      	add	r3, r1
 8004de8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3318      	adds	r3, #24
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	440b      	add	r3, r1
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	7d1b      	ldrb	r3, [r3, #20]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d111      	bne.n	8004e2a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	4413      	add	r3, r2
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6811      	ldr	r1, [r2, #0]
 8004e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3318      	adds	r3, #24
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	440b      	add	r3, r1
 8004e26:	3304      	adds	r3, #4
 8004e28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3307      	adds	r3, #7
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	061a      	lsls	r2, r3, #24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3306      	adds	r3, #6
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3305      	adds	r3, #5
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4313      	orrs	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	3204      	adds	r2, #4
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	6811      	ldr	r1, [r2, #0]
 8004e52:	ea43 0200 	orr.w	r2, r3, r0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004e60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3303      	adds	r3, #3
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	061a      	lsls	r2, r3, #24
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	4610      	mov	r0, r2
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	6811      	ldr	r1, [r2, #0]
 8004e88:	ea43 0200 	orr.w	r2, r3, r0
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	440b      	add	r3, r1
 8004e92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004e96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3318      	adds	r3, #24
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	440b      	add	r3, r1
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e00e      	b.n	8004eda <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e006      	b.n	8004eda <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3724      	adds	r7, #36	; 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004efa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004efc:	7afb      	ldrb	r3, [r7, #11]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d002      	beq.n	8004f08 <HAL_CAN_IsTxMessagePending+0x22>
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d10b      	bne.n	8004f20 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	069b      	lsls	r3, r3, #26
 8004f12:	401a      	ands	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	069b      	lsls	r3, r3, #26
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004f20:	68fb      	ldr	r3, [r7, #12]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f42:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d003      	beq.n	8004f52 <HAL_CAN_GetRxMessage+0x24>
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	f040 80f3 	bne.w	8005138 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0e7      	b.n	8005146 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0d8      	b.n	8005146 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	331b      	adds	r3, #27
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	4413      	add	r3, r2
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0204 	and.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	331b      	adds	r3, #27
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	4413      	add	r3, r2
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0d5b      	lsrs	r3, r3, #21
 8004fc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	331b      	adds	r3, #27
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	4413      	add	r3, r2
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	331b      	adds	r3, #27
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	4413      	add	r3, r2
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0202 	and.w	r2, r3, #2
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	331b      	adds	r3, #27
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	331b      	adds	r3, #27
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	4413      	add	r3, r2
 800501e:	3304      	adds	r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	b2da      	uxtb	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	331b      	adds	r3, #27
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	4413      	add	r3, r2
 8005036:	3304      	adds	r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4413      	add	r3, r2
 800504c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	4413      	add	r3, r2
 8005062:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	0a1a      	lsrs	r2, r3, #8
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	4413      	add	r3, r2
 800507c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	0c1a      	lsrs	r2, r3, #16
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	3302      	adds	r3, #2
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	4413      	add	r3, r2
 8005096:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	0e1a      	lsrs	r2, r3, #24
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3303      	adds	r3, #3
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3304      	adds	r3, #4
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0a1a      	lsrs	r2, r3, #8
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	3305      	adds	r3, #5
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0c1a      	lsrs	r2, r3, #16
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	3306      	adds	r3, #6
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	0e1a      	lsrs	r2, r3, #24
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	3307      	adds	r3, #7
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d108      	bne.n	8005124 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0220 	orr.w	r2, r2, #32
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	e007      	b.n	8005134 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0220 	orr.w	r2, r2, #32
 8005132:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e006      	b.n	8005146 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005162:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d002      	beq.n	8005170 <HAL_CAN_ActivateNotification+0x1e>
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d109      	bne.n	8005184 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6959      	ldr	r1, [r3, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e006      	b.n	8005192 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b08a      	sub	sp, #40	; 0x28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d07c      	beq.n	80052de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d023      	beq.n	8005236 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f97d 	bl	8005500 <HAL_CAN_TxMailbox0CompleteCallback>
 8005206:	e016      	b.n	8005236 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e00c      	b.n	8005236 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e002      	b.n	8005236 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f983 	bl	800553c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d024      	beq.n	800528a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005248:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f95d 	bl	8005514 <HAL_CAN_TxMailbox1CompleteCallback>
 800525a:	e016      	b.n	800528a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e00c      	b.n	800528a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
 8005282:	e002      	b.n	800528a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f963 	bl	8005550 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d024      	beq.n	80052de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800529c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f93d 	bl	8005528 <HAL_CAN_TxMailbox2CompleteCallback>
 80052ae:	e016      	b.n	80052de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	e00c      	b.n	80052de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	e002      	b.n	80052de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f943 	bl	8005564 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2210      	movs	r2, #16
 8005300:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2208      	movs	r2, #8
 800531c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f92a 	bl	8005578 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fc fd75 	bl	8001e2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00c      	beq.n	8005366 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2210      	movs	r2, #16
 8005364:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2208      	movs	r2, #8
 8005380:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f90c 	bl	80055a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8f3 	bl	800558c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d006      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2210      	movs	r2, #16
 80053c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8f6 	bl	80055b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8ef 	bl	80055c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d075      	beq.n	80054e0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d06c      	beq.n	80054d8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	f043 0302 	orr.w	r3, r3, #2
 8005434:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	f043 0304 	orr.w	r3, r3, #4
 8005450:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005458:	2b00      	cmp	r3, #0
 800545a:	d03d      	beq.n	80054d8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005462:	2b00      	cmp	r3, #0
 8005464:	d038      	beq.n	80054d8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800546c:	2b30      	cmp	r3, #48	; 0x30
 800546e:	d017      	beq.n	80054a0 <HAL_CAN_IRQHandler+0x302>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d804      	bhi.n	800547e <HAL_CAN_IRQHandler+0x2e0>
 8005474:	2b10      	cmp	r3, #16
 8005476:	d009      	beq.n	800548c <HAL_CAN_IRQHandler+0x2ee>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d00c      	beq.n	8005496 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800547c:	e024      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800547e:	2b50      	cmp	r3, #80	; 0x50
 8005480:	d018      	beq.n	80054b4 <HAL_CAN_IRQHandler+0x316>
 8005482:	2b60      	cmp	r3, #96	; 0x60
 8005484:	d01b      	beq.n	80054be <HAL_CAN_IRQHandler+0x320>
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d00f      	beq.n	80054aa <HAL_CAN_IRQHandler+0x30c>
            break;
 800548a:	e01d      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	f043 0308 	orr.w	r3, r3, #8
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005494:	e018      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	f043 0310 	orr.w	r3, r3, #16
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800549e:	e013      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054a8:	e00e      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054b2:	e009      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054bc:	e004      	b.n	80054c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2204      	movs	r2, #4
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f872 	bl	80055dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80054f8:	bf00      	nop
 80054fa:	3728      	adds	r7, #40	; 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <__NVIC_SetPriorityGrouping+0x44>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800560c:	4013      	ands	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800561c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005622:	4a04      	ldr	r2, [pc, #16]	; (8005634 <__NVIC_SetPriorityGrouping+0x44>)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	60d3      	str	r3, [r2, #12]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <__NVIC_GetPriorityGrouping+0x18>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	f003 0307 	and.w	r3, r3, #7
}
 8005646:	4618      	mov	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800565e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005662:	2b00      	cmp	r3, #0
 8005664:	db0b      	blt.n	800567e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	f003 021f 	and.w	r2, r3, #31
 800566c:	4907      	ldr	r1, [pc, #28]	; (800568c <__NVIC_EnableIRQ+0x38>)
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2001      	movs	r0, #1
 8005676:	fa00 f202 	lsl.w	r2, r0, r2
 800567a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	e000e100 	.word	0xe000e100

08005690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	6039      	str	r1, [r7, #0]
 800569a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800569c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	db0a      	blt.n	80056ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	490c      	ldr	r1, [pc, #48]	; (80056dc <__NVIC_SetPriority+0x4c>)
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	0112      	lsls	r2, r2, #4
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	440b      	add	r3, r1
 80056b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056b8:	e00a      	b.n	80056d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	4908      	ldr	r1, [pc, #32]	; (80056e0 <__NVIC_SetPriority+0x50>)
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	3b04      	subs	r3, #4
 80056c8:	0112      	lsls	r2, r2, #4
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	440b      	add	r3, r1
 80056ce:	761a      	strb	r2, [r3, #24]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	e000e100 	.word	0xe000e100
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	; 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f1c3 0307 	rsb	r3, r3, #7
 80056fe:	2b04      	cmp	r3, #4
 8005700:	bf28      	it	cs
 8005702:	2304      	movcs	r3, #4
 8005704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3304      	adds	r3, #4
 800570a:	2b06      	cmp	r3, #6
 800570c:	d902      	bls.n	8005714 <NVIC_EncodePriority+0x30>
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3b03      	subs	r3, #3
 8005712:	e000      	b.n	8005716 <NVIC_EncodePriority+0x32>
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005718:	f04f 32ff 	mov.w	r2, #4294967295
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43da      	mvns	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	401a      	ands	r2, r3
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800572c:	f04f 31ff 	mov.w	r1, #4294967295
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	fa01 f303 	lsl.w	r3, r1, r3
 8005736:	43d9      	mvns	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800573c:	4313      	orrs	r3, r2
         );
}
 800573e:	4618      	mov	r0, r3
 8005740:	3724      	adds	r7, #36	; 0x24
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3b01      	subs	r3, #1
 8005758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800575c:	d301      	bcc.n	8005762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800575e:	2301      	movs	r3, #1
 8005760:	e00f      	b.n	8005782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <SysTick_Config+0x40>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800576a:	210f      	movs	r1, #15
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	f7ff ff8e 	bl	8005690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <SysTick_Config+0x40>)
 8005776:	2200      	movs	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800577a:	4b04      	ldr	r3, [pc, #16]	; (800578c <SysTick_Config+0x40>)
 800577c:	2207      	movs	r2, #7
 800577e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	e000e010 	.word	0xe000e010

08005790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ff29 	bl	80055f0 <__NVIC_SetPriorityGrouping>
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	4603      	mov	r3, r0
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057b8:	f7ff ff3e 	bl	8005638 <__NVIC_GetPriorityGrouping>
 80057bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7ff ff8e 	bl	80056e4 <NVIC_EncodePriority>
 80057c8:	4602      	mov	r2, r0
 80057ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ff5d 	bl	8005690 <__NVIC_SetPriority>
}
 80057d6:	bf00      	nop
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	4603      	mov	r3, r0
 80057e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff ff31 	bl	8005654 <__NVIC_EnableIRQ>
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ffa2 	bl	800574c <SysTick_Config>
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005820:	f7ff f838 	bl	8004894 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e099      	b.n	8005964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005850:	e00f      	b.n	8005872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005852:	f7ff f81f 	bl	8004894 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b05      	cmp	r3, #5
 800585e:	d908      	bls.n	8005872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2203      	movs	r2, #3
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e078      	b.n	8005964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e8      	bne.n	8005852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4b38      	ldr	r3, [pc, #224]	; (800596c <HAL_DMA_Init+0x158>)
 800588c:	4013      	ands	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800589e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d107      	bne.n	80058dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	4313      	orrs	r3, r2
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0307 	bic.w	r3, r3, #7
 80058f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	2b04      	cmp	r3, #4
 8005904:	d117      	bne.n	8005936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00e      	beq.n	8005936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fa75 	bl	8005e08 <DMA_CheckFifoParam>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2240      	movs	r2, #64	; 0x40
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005932:	2301      	movs	r3, #1
 8005934:	e016      	b.n	8005964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa2c 	bl	8005d9c <DMA_CalcBaseAndBitshift>
 8005944:	4603      	mov	r3, r0
 8005946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594c:	223f      	movs	r2, #63	; 0x3f
 800594e:	409a      	lsls	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	f010803f 	.word	0xf010803f

08005970 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_DMA_Start+0x20>
 800598c:	2302      	movs	r3, #2
 800598e:	e026      	b.n	80059de <HAL_DMA_Start+0x6e>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d115      	bne.n	80059d0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f9c1 	bl	8005d40 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e005      	b.n	80059dc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
 80059da:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d004      	beq.n	8005a04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e00c      	b.n	8005a1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2205      	movs	r2, #5
 8005a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a38:	4b92      	ldr	r3, [pc, #584]	; (8005c84 <HAL_DMA_IRQHandler+0x258>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a92      	ldr	r2, [pc, #584]	; (8005c88 <HAL_DMA_IRQHandler+0x25c>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	0a9b      	lsrs	r3, r3, #10
 8005a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	2208      	movs	r2, #8
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01a      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	2208      	movs	r2, #8
 8005a86:	409a      	lsls	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	f043 0201 	orr.w	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d012      	beq.n	8005ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aba:	2201      	movs	r2, #1
 8005abc:	409a      	lsls	r2, r3
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f043 0202 	orr.w	r2, r3, #2
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d012      	beq.n	8005b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af0:	2204      	movs	r2, #4
 8005af2:	409a      	lsls	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	f043 0204 	orr.w	r2, r3, #4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b08:	2210      	movs	r2, #16
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d043      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d03c      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b26:	2210      	movs	r2, #16
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d018      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d024      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
 8005b5a:	e01f      	b.n	8005b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01b      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
 8005b6c:	e016      	b.n	8005b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0208 	bic.w	r2, r2, #8
 8005b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	409a      	lsls	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 808e 	beq.w	8005cca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8086 	beq.w	8005cca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	409a      	lsls	r2, r3
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d136      	bne.n	8005c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0216 	bic.w	r2, r2, #22
 8005be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695a      	ldr	r2, [r3, #20]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <HAL_DMA_IRQHandler+0x1da>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0208 	bic.w	r2, r2, #8
 8005c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1a:	223f      	movs	r2, #63	; 0x3f
 8005c1c:	409a      	lsls	r2, r3
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d07d      	beq.n	8005d36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
        }
        return;
 8005c42:	e078      	b.n	8005d36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01c      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d108      	bne.n	8005c72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d030      	beq.n	8005cca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
 8005c70:	e02b      	b.n	8005cca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d027      	beq.n	8005cca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
 8005c82:	e022      	b.n	8005cca <HAL_DMA_IRQHandler+0x29e>
 8005c84:	20000014 	.word	0x20000014
 8005c88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10f      	bne.n	8005cba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0210 	bic.w	r2, r2, #16
 8005ca8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d032      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d022      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d307      	bcc.n	8005d12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f2      	bne.n	8005cf6 <HAL_DMA_IRQHandler+0x2ca>
 8005d10:	e000      	b.n	8005d14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	e000      	b.n	8005d38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d36:	bf00      	nop
    }
  }
}
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop

08005d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d108      	bne.n	8005d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d7e:	e007      	b.n	8005d90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	60da      	str	r2, [r3, #12]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	3b10      	subs	r3, #16
 8005dac:	4a14      	ldr	r2, [pc, #80]	; (8005e00 <DMA_CalcBaseAndBitshift+0x64>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005db6:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <DMA_CalcBaseAndBitshift+0x68>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d909      	bls.n	8005dde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	1d1a      	adds	r2, r3, #4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	659a      	str	r2, [r3, #88]	; 0x58
 8005ddc:	e007      	b.n	8005dee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	aaaaaaab 	.word	0xaaaaaaab
 8005e04:	08009508 	.word	0x08009508

08005e08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d11f      	bne.n	8005e62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d855      	bhi.n	8005ed4 <DMA_CheckFifoParam+0xcc>
 8005e28:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <DMA_CheckFifoParam+0x28>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e41 	.word	0x08005e41
 8005e34:	08005e53 	.word	0x08005e53
 8005e38:	08005e41 	.word	0x08005e41
 8005e3c:	08005ed5 	.word	0x08005ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d045      	beq.n	8005ed8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e50:	e042      	b.n	8005ed8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e5a:	d13f      	bne.n	8005edc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e60:	e03c      	b.n	8005edc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	d121      	bne.n	8005eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d836      	bhi.n	8005ee0 <DMA_CheckFifoParam+0xd8>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <DMA_CheckFifoParam+0x70>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08005e8f 	.word	0x08005e8f
 8005e80:	08005e89 	.word	0x08005e89
 8005e84:	08005ea1 	.word	0x08005ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e02f      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d024      	beq.n	8005ee4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e9e:	e021      	b.n	8005ee4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ea8:	d11e      	bne.n	8005ee8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005eae:	e01b      	b.n	8005ee8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d902      	bls.n	8005ebc <DMA_CheckFifoParam+0xb4>
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d003      	beq.n	8005ec2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005eba:	e018      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec0:	e015      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed2:	e00b      	b.n	8005eec <DMA_CheckFifoParam+0xe4>
      break;
 8005ed4:	bf00      	nop
 8005ed6:	e00a      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      break;
 8005ed8:	bf00      	nop
 8005eda:	e008      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      break;
 8005edc:	bf00      	nop
 8005ede:	e006      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      break;
 8005ee0:	bf00      	nop
 8005ee2:	e004      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      break;
 8005ee4:	bf00      	nop
 8005ee6:	e002      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      break;   
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <DMA_CheckFifoParam+0xe6>
      break;
 8005eec:	bf00      	nop
    }
  } 
  
  return status; 
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	e177      	b.n	8006208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f18:	2201      	movs	r2, #1
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	f040 8166 	bne.w	8006202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d00b      	beq.n	8005f56 <HAL_GPIO_Init+0x5a>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d007      	beq.n	8005f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f4a:	2b11      	cmp	r3, #17
 8005f4c:	d003      	beq.n	8005f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b12      	cmp	r3, #18
 8005f54:	d130      	bne.n	8005fb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2203      	movs	r2, #3
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 0201 	and.w	r2, r3, #1
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d003      	beq.n	8005ff8 <HAL_GPIO_Init+0xfc>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b12      	cmp	r3, #18
 8005ff6:	d123      	bne.n	8006040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	08da      	lsrs	r2, r3, #3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3208      	adds	r2, #8
 8006000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	220f      	movs	r2, #15
 8006010:	fa02 f303 	lsl.w	r3, r2, r3
 8006014:	43db      	mvns	r3, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4013      	ands	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4313      	orrs	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	08da      	lsrs	r2, r3, #3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3208      	adds	r2, #8
 800603a:	69b9      	ldr	r1, [r7, #24]
 800603c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	2203      	movs	r2, #3
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	4013      	ands	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 0203 	and.w	r2, r3, #3
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80c0 	beq.w	8006202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_GPIO_Init+0x320>)
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	4a64      	ldr	r2, [pc, #400]	; (800621c <HAL_GPIO_Init+0x320>)
 800608c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006090:	6453      	str	r3, [r2, #68]	; 0x44
 8006092:	4b62      	ldr	r3, [pc, #392]	; (800621c <HAL_GPIO_Init+0x320>)
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800609e:	4a60      	ldr	r2, [pc, #384]	; (8006220 <HAL_GPIO_Init+0x324>)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	089b      	lsrs	r3, r3, #2
 80060a4:	3302      	adds	r3, #2
 80060a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	220f      	movs	r2, #15
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a57      	ldr	r2, [pc, #348]	; (8006224 <HAL_GPIO_Init+0x328>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d037      	beq.n	800613a <HAL_GPIO_Init+0x23e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a56      	ldr	r2, [pc, #344]	; (8006228 <HAL_GPIO_Init+0x32c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d031      	beq.n	8006136 <HAL_GPIO_Init+0x23a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a55      	ldr	r2, [pc, #340]	; (800622c <HAL_GPIO_Init+0x330>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02b      	beq.n	8006132 <HAL_GPIO_Init+0x236>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a54      	ldr	r2, [pc, #336]	; (8006230 <HAL_GPIO_Init+0x334>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d025      	beq.n	800612e <HAL_GPIO_Init+0x232>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a53      	ldr	r2, [pc, #332]	; (8006234 <HAL_GPIO_Init+0x338>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01f      	beq.n	800612a <HAL_GPIO_Init+0x22e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a52      	ldr	r2, [pc, #328]	; (8006238 <HAL_GPIO_Init+0x33c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d019      	beq.n	8006126 <HAL_GPIO_Init+0x22a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a51      	ldr	r2, [pc, #324]	; (800623c <HAL_GPIO_Init+0x340>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_GPIO_Init+0x226>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a50      	ldr	r2, [pc, #320]	; (8006240 <HAL_GPIO_Init+0x344>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00d      	beq.n	800611e <HAL_GPIO_Init+0x222>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a4f      	ldr	r2, [pc, #316]	; (8006244 <HAL_GPIO_Init+0x348>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <HAL_GPIO_Init+0x21e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a4e      	ldr	r2, [pc, #312]	; (8006248 <HAL_GPIO_Init+0x34c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <HAL_GPIO_Init+0x21a>
 8006112:	2309      	movs	r3, #9
 8006114:	e012      	b.n	800613c <HAL_GPIO_Init+0x240>
 8006116:	230a      	movs	r3, #10
 8006118:	e010      	b.n	800613c <HAL_GPIO_Init+0x240>
 800611a:	2308      	movs	r3, #8
 800611c:	e00e      	b.n	800613c <HAL_GPIO_Init+0x240>
 800611e:	2307      	movs	r3, #7
 8006120:	e00c      	b.n	800613c <HAL_GPIO_Init+0x240>
 8006122:	2306      	movs	r3, #6
 8006124:	e00a      	b.n	800613c <HAL_GPIO_Init+0x240>
 8006126:	2305      	movs	r3, #5
 8006128:	e008      	b.n	800613c <HAL_GPIO_Init+0x240>
 800612a:	2304      	movs	r3, #4
 800612c:	e006      	b.n	800613c <HAL_GPIO_Init+0x240>
 800612e:	2303      	movs	r3, #3
 8006130:	e004      	b.n	800613c <HAL_GPIO_Init+0x240>
 8006132:	2302      	movs	r3, #2
 8006134:	e002      	b.n	800613c <HAL_GPIO_Init+0x240>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_GPIO_Init+0x240>
 800613a:	2300      	movs	r3, #0
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	f002 0203 	and.w	r2, r2, #3
 8006142:	0092      	lsls	r2, r2, #2
 8006144:	4093      	lsls	r3, r2
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800614c:	4934      	ldr	r1, [pc, #208]	; (8006220 <HAL_GPIO_Init+0x324>)
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	089b      	lsrs	r3, r3, #2
 8006152:	3302      	adds	r3, #2
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800615a:	4b3c      	ldr	r3, [pc, #240]	; (800624c <HAL_GPIO_Init+0x350>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800617e:	4a33      	ldr	r2, [pc, #204]	; (800624c <HAL_GPIO_Init+0x350>)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006184:	4b31      	ldr	r3, [pc, #196]	; (800624c <HAL_GPIO_Init+0x350>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	43db      	mvns	r3, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4013      	ands	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061a8:	4a28      	ldr	r2, [pc, #160]	; (800624c <HAL_GPIO_Init+0x350>)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ae:	4b27      	ldr	r3, [pc, #156]	; (800624c <HAL_GPIO_Init+0x350>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061d2:	4a1e      	ldr	r2, [pc, #120]	; (800624c <HAL_GPIO_Init+0x350>)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061d8:	4b1c      	ldr	r3, [pc, #112]	; (800624c <HAL_GPIO_Init+0x350>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4013      	ands	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <HAL_GPIO_Init+0x350>)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	3301      	adds	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b0f      	cmp	r3, #15
 800620c:	f67f ae84 	bls.w	8005f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006210:	bf00      	nop
 8006212:	3724      	adds	r7, #36	; 0x24
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40023800 	.word	0x40023800
 8006220:	40013800 	.word	0x40013800
 8006224:	40020000 	.word	0x40020000
 8006228:	40020400 	.word	0x40020400
 800622c:	40020800 	.word	0x40020800
 8006230:	40020c00 	.word	0x40020c00
 8006234:	40021000 	.word	0x40021000
 8006238:	40021400 	.word	0x40021400
 800623c:	40021800 	.word	0x40021800
 8006240:	40021c00 	.word	0x40021c00
 8006244:	40022000 	.word	0x40022000
 8006248:	40022400 	.word	0x40022400
 800624c:	40013c00 	.word	0x40013c00

08006250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	807b      	strh	r3, [r7, #2]
 800625c:	4613      	mov	r3, r2
 800625e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006260:	787b      	ldrb	r3, [r7, #1]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006266:	887a      	ldrh	r2, [r7, #2]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800626c:	e003      	b.n	8006276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800626e:	887b      	ldrh	r3, [r7, #2]
 8006270:	041a      	lsls	r2, r3, #16
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	619a      	str	r2, [r3, #24]
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	887b      	ldrh	r3, [r7, #2]
 8006294:	401a      	ands	r2, r3
 8006296:	887b      	ldrh	r3, [r7, #2]
 8006298:	429a      	cmp	r2, r3
 800629a:	d104      	bne.n	80062a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	041a      	lsls	r2, r3, #16
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80062a4:	e002      	b.n	80062ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e25b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d075      	beq.n	80063c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062d6:	4ba3      	ldr	r3, [pc, #652]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00c      	beq.n	80062fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d112      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ee:	4b9d      	ldr	r3, [pc, #628]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062fa:	d10b      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	4b99      	ldr	r3, [pc, #612]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05b      	beq.n	80063c0 <HAL_RCC_OscConfig+0x108>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d157      	bne.n	80063c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e236      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d106      	bne.n	800632c <HAL_RCC_OscConfig+0x74>
 800631e:	4b91      	ldr	r3, [pc, #580]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a90      	ldr	r2, [pc, #576]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e01d      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x98>
 8006336:	4b8b      	ldr	r3, [pc, #556]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a8a      	ldr	r2, [pc, #552]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b88      	ldr	r3, [pc, #544]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a87      	ldr	r2, [pc, #540]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e00b      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 8006350:	4b84      	ldr	r3, [pc, #528]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4b81      	ldr	r3, [pc, #516]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a80      	ldr	r2, [pc, #512]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7fe fa90 	bl	8004894 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006378:	f7fe fa8c 	bl	8004894 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e1fb      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b76      	ldr	r3, [pc, #472]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0xc0>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fe fa7c 	bl	8004894 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fe fa78 	bl	8004894 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1e7      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0xe8>
 80063be:	e000      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d063      	beq.n	8006496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ce:	4b65      	ldr	r3, [pc, #404]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b62      	ldr	r3, [pc, #392]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d11c      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	4b5c      	ldr	r3, [pc, #368]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e1bb      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4952      	ldr	r1, [pc, #328]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	e03a      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b4f      	ldr	r3, [pc, #316]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fe fa31 	bl	8004894 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006436:	f7fe fa2d 	bl	8004894 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e19c      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	4b46      	ldr	r3, [pc, #280]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b43      	ldr	r3, [pc, #268]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4940      	ldr	r1, [pc, #256]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fe fa10 	bl	8004894 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fe fa0c 	bl	8004894 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e17b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d030      	beq.n	8006504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fe f9f0 	bl	8004894 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fe f9ec 	bl	8004894 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e15b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x200>
 80064d6:	e015      	b.n	8006504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fe f9d9 	bl	8004894 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fe f9d5 	bl	8004894 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e144      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a0 	beq.w	8006652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d121      	bne.n	8006592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654e:	4b08      	ldr	r3, [pc, #32]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fe f99b 	bl	8004894 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	e011      	b.n	8006586 <HAL_RCC_OscConfig+0x2ce>
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	42470000 	.word	0x42470000
 800656c:	42470e80 	.word	0x42470e80
 8006570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006574:	f7fe f98e 	bl	8004894 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e0fd      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006586:	4b81      	ldr	r3, [pc, #516]	; (800678c <HAL_RCC_OscConfig+0x4d4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d106      	bne.n	80065a8 <HAL_RCC_OscConfig+0x2f0>
 800659a:	4b7d      	ldr	r3, [pc, #500]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4a7c      	ldr	r2, [pc, #496]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70
 80065a6:	e01c      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_OscConfig+0x312>
 80065b0:	4b77      	ldr	r3, [pc, #476]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a76      	ldr	r2, [pc, #472]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065b6:	f043 0304 	orr.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
 80065bc:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	4a73      	ldr	r2, [pc, #460]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6713      	str	r3, [r2, #112]	; 0x70
 80065c8:	e00b      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065ca:	4b71      	ldr	r3, [pc, #452]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a70      	ldr	r2, [pc, #448]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
 80065d6:	4b6e      	ldr	r3, [pc, #440]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a6d      	ldr	r2, [pc, #436]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d015      	beq.n	8006616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fe f953 	bl	8004894 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fe f94f 	bl	8004894 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e0bc      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	4b61      	ldr	r3, [pc, #388]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ee      	beq.n	80065f2 <HAL_RCC_OscConfig+0x33a>
 8006614:	e014      	b.n	8006640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fe f93d 	bl	8004894 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fe f939 	bl	8004894 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0a6      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	4b56      	ldr	r3, [pc, #344]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ee      	bne.n	800661e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d105      	bne.n	8006652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006646:	4b52      	ldr	r3, [pc, #328]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a51      	ldr	r2, [pc, #324]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8092 	beq.w	8006780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665c:	4b4c      	ldr	r3, [pc, #304]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b08      	cmp	r3, #8
 8006666:	d05c      	beq.n	8006722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d141      	bne.n	80066f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006670:	4b48      	ldr	r3, [pc, #288]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006676:	f7fe f90d 	bl	8004894 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667e:	f7fe f909 	bl	8004894 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e078      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006690:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	3b01      	subs	r3, #1
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	4933      	ldr	r1, [pc, #204]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c6:	4b33      	ldr	r3, [pc, #204]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fe f8e2 	bl	8004894 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fe f8de 	bl	8004894 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e04d      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x41c>
 80066f2:	e045      	b.n	8006780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fa:	f7fe f8cb 	bl	8004894 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006702:	f7fe f8c7 	bl	8004894 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e036      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006714:	4b1e      	ldr	r3, [pc, #120]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x44a>
 8006720:	e02e      	b.n	8006780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e029      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800672e:	4b18      	ldr	r3, [pc, #96]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	429a      	cmp	r2, r3
 8006740:	d11c      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674c:	429a      	cmp	r2, r3
 800674e:	d115      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006756:	4013      	ands	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800675c:	4293      	cmp	r3, r2
 800675e:	d10d      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40007000 	.word	0x40007000
 8006790:	40023800 	.word	0x40023800
 8006794:	42470060 	.word	0x42470060

08006798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0cc      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067ac:	4b68      	ldr	r3, [pc, #416]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d90c      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b65      	ldr	r3, [pc, #404]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b63      	ldr	r3, [pc, #396]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0b8      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ec:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a52      	ldr	r2, [pc, #328]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800680e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006810:	4b50      	ldr	r3, [pc, #320]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	494d      	ldr	r1, [pc, #308]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d044      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d107      	bne.n	8006846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	4b47      	ldr	r3, [pc, #284]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e07f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d003      	beq.n	8006856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006856:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e06f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006866:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e067      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f023 0203 	bic.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4934      	ldr	r1, [pc, #208]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	4313      	orrs	r3, r2
 8006886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006888:	f7fe f804 	bl	8004894 <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	e00a      	b.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006890:	f7fe f800 	bl	8004894 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f241 3288 	movw	r2, #5000	; 0x1388
 800689e:	4293      	cmp	r3, r2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e04f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 020c 	and.w	r2, r3, #12
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d1eb      	bne.n	8006890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d20c      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e032      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4916      	ldr	r1, [pc, #88]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	490e      	ldr	r1, [pc, #56]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800691e:	f000 f821 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8006922:	4601      	mov	r1, r0
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x1c0>)
 8006930:	5cd3      	ldrb	r3, [r2, r3]
 8006932:	fa21 f303 	lsr.w	r3, r1, r3
 8006936:	4a09      	ldr	r2, [pc, #36]	; (800695c <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_RCC_ClockConfig+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd ff64 	bl	800480c <HAL_InitTick>

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40023c00 	.word	0x40023c00
 8006954:	40023800 	.word	0x40023800
 8006958:	080094f0 	.word	0x080094f0
 800695c:	20000014 	.word	0x20000014
 8006960:	20000018 	.word	0x20000018

08006964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	2300      	movs	r3, #0
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800697a:	4b50      	ldr	r3, [pc, #320]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b04      	cmp	r3, #4
 8006984:	d007      	beq.n	8006996 <HAL_RCC_GetSysClockFreq+0x32>
 8006986:	2b08      	cmp	r3, #8
 8006988:	d008      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x38>
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 808d 	bne.w	8006aaa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4b4b      	ldr	r3, [pc, #300]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006992:	60bb      	str	r3, [r7, #8]
       break;
 8006994:	e08c      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006996:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006998:	60bb      	str	r3, [r7, #8]
      break;
 800699a:	e089      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800699c:	4b47      	ldr	r3, [pc, #284]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069a6:	4b45      	ldr	r3, [pc, #276]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d023      	beq.n	80069fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b2:	4b42      	ldr	r3, [pc, #264]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	f04f 0400 	mov.w	r4, #0
 80069bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	ea03 0501 	and.w	r5, r3, r1
 80069c8:	ea04 0602 	and.w	r6, r4, r2
 80069cc:	4a3d      	ldr	r2, [pc, #244]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80069ce:	fb02 f106 	mul.w	r1, r2, r6
 80069d2:	2200      	movs	r2, #0
 80069d4:	fb02 f205 	mul.w	r2, r2, r5
 80069d8:	440a      	add	r2, r1
 80069da:	493a      	ldr	r1, [pc, #232]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80069dc:	fba5 0101 	umull	r0, r1, r5, r1
 80069e0:	1853      	adds	r3, r2, r1
 80069e2:	4619      	mov	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f04f 0400 	mov.w	r4, #0
 80069ea:	461a      	mov	r2, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f7fa f8bb 	bl	8000b68 <__aeabi_uldivmod>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e049      	b.n	8006a8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	ea03 0501 	and.w	r5, r3, r1
 8006a10:	ea04 0602 	and.w	r6, r4, r2
 8006a14:	4629      	mov	r1, r5
 8006a16:	4632      	mov	r2, r6
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f04f 0400 	mov.w	r4, #0
 8006a20:	0154      	lsls	r4, r2, #5
 8006a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a26:	014b      	lsls	r3, r1, #5
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	1b49      	subs	r1, r1, r5
 8006a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	f04f 0400 	mov.w	r4, #0
 8006a3a:	0194      	lsls	r4, r2, #6
 8006a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a40:	018b      	lsls	r3, r1, #6
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	eb64 0402 	sbc.w	r4, r4, r2
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	00e2      	lsls	r2, r4, #3
 8006a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a56:	00d9      	lsls	r1, r3, #3
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	195b      	adds	r3, r3, r5
 8006a5e:	eb44 0406 	adc.w	r4, r4, r6
 8006a62:	f04f 0100 	mov.w	r1, #0
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	02a2      	lsls	r2, r4, #10
 8006a6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a70:	0299      	lsls	r1, r3, #10
 8006a72:	460b      	mov	r3, r1
 8006a74:	4614      	mov	r4, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	4621      	mov	r1, r4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f04f 0400 	mov.w	r4, #0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	f7fa f870 	bl	8000b68 <__aeabi_uldivmod>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	60bb      	str	r3, [r7, #8]
      break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006aac:	60bb      	str	r3, [r7, #8]
      break;
 8006aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	00b71b00 	.word	0x00b71b00

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000014 	.word	0x20000014

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff0 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4a03      	ldr	r2, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5cd3      	ldrb	r3, [r2, r3]
 8006af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	08009500 	.word	0x08009500

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffdc 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006b10:	4601      	mov	r1, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5cd3      	ldrb	r3, [r2, r3]
 8006b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	08009500 	.word	0x08009500

08006b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e056      	b.n	8006bf0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7fd fa9f 	bl	80040a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	ea42 0103 	orr.w	r1, r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	f003 0104 	and.w	r1, r3, #4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69da      	ldr	r2, [r3, #28]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08c      	sub	sp, #48	; 0x30
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c06:	2301      	movs	r3, #1
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_SPI_TransmitReceive+0x26>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e18a      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x33c>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c26:	f7fd fe35 	bl	8004894 <HAL_GetTick>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c3c:	887b      	ldrh	r3, [r7, #2]
 8006c3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d00f      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x70>
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4e:	d107      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x68>
 8006c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d003      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c66:	e15b      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_SPI_TransmitReceive+0x82>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <HAL_SPI_TransmitReceive+0x82>
 8006c74:	887b      	ldrh	r3, [r7, #2]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c80:	e14e      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d003      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2205      	movs	r2, #5
 8006c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	887a      	ldrh	r2, [r7, #2]
 8006ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	887a      	ldrh	r2, [r7, #2]
 8006cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	887a      	ldrh	r2, [r7, #2]
 8006cb8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	887a      	ldrh	r2, [r7, #2]
 8006cbe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d007      	beq.n	8006cea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf2:	d178      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_SPI_TransmitReceive+0x10a>
 8006cfc:	8b7b      	ldrh	r3, [r7, #26]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d166      	bne.n	8006dd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	881a      	ldrh	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	1c9a      	adds	r2, r3, #2
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d26:	e053      	b.n	8006dd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d11b      	bne.n	8006d6e <HAL_SPI_TransmitReceive+0x176>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d016      	beq.n	8006d6e <HAL_SPI_TransmitReceive+0x176>
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d113      	bne.n	8006d6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d119      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1b8>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d014      	beq.n	8006db0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	b292      	uxth	r2, r2
 8006d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	1c9a      	adds	r2, r3, #2
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dac:	2301      	movs	r3, #1
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006db0:	f7fd fd70 	bl	8004894 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d807      	bhi.n	8006dd0 <HAL_SPI_TransmitReceive+0x1d8>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc6:	d003      	beq.n	8006dd0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dce:	e0a7      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1a6      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x130>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1a1      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x130>
 8006de4:	e07c      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x1fc>
 8006dee:	8b7b      	ldrh	r3, [r7, #26]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d16b      	bne.n	8006ecc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	7812      	ldrb	r2, [r2, #0]
 8006e00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e1a:	e057      	b.n	8006ecc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d11c      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x26c>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d017      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x26c>
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d114      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	7812      	ldrb	r2, [r2, #0]
 8006e46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d119      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x2ae>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d014      	beq.n	8006ea6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ea6:	f7fd fcf5 	bl	8004894 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d803      	bhi.n	8006ebe <HAL_SPI_TransmitReceive+0x2c6>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x2cc>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d103      	bne.n	8006ecc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006eca:	e029      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1a2      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x224>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d19d      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f893 	bl	8007010 <SPI_EndRxTxTransaction>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006efc:	e010      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	e000      	b.n	8006f20 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3730      	adds	r7, #48	; 0x30
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f4c:	e04c      	b.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d048      	beq.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f56:	f7fd fc9d 	bl	8004894 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d902      	bls.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d13d      	bne.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f84:	d111      	bne.n	8006faa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8e:	d004      	beq.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f98:	d107      	bne.n	8006faa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb2:	d10f      	bne.n	8006fd4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e00f      	b.n	8007008 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	429a      	cmp	r2, r3
 8007004:	d1a3      	bne.n	8006f4e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800701c:	4b1b      	ldr	r3, [pc, #108]	; (800708c <SPI_EndRxTxTransaction+0x7c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1b      	ldr	r2, [pc, #108]	; (8007090 <SPI_EndRxTxTransaction+0x80>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	0d5b      	lsrs	r3, r3, #21
 8007028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800703a:	d112      	bne.n	8007062 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff78 	bl	8006f3c <SPI_WaitFlagStateUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d016      	beq.n	8007080 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e00f      	b.n	8007082 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	3b01      	subs	r3, #1
 800706c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007078:	2b80      	cmp	r3, #128	; 0x80
 800707a:	d0f2      	beq.n	8007062 <SPI_EndRxTxTransaction+0x52>
 800707c:	e000      	b.n	8007080 <SPI_EndRxTxTransaction+0x70>
        break;
 800707e:	bf00      	nop
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000014 	.word	0x20000014
 8007090:	165e9f81 	.word	0x165e9f81

08007094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e01d      	b.n	80070e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fd f838 	bl	8004130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f000 f90e 	bl	80072f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2201      	movs	r2, #1
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fb48 	bl	8007794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <HAL_TIM_PWM_Start+0x74>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_TIM_PWM_Start+0x2c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a14      	ldr	r2, [pc, #80]	; (8007164 <HAL_TIM_PWM_Start+0x78>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d101      	bne.n	800711c <HAL_TIM_PWM_Start+0x30>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <HAL_TIM_PWM_Start+0x32>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b06      	cmp	r3, #6
 8007142:	d007      	beq.n	8007154 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40010000 	.word	0x40010000
 8007164:	40010400 	.word	0x40010400

08007168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800717e:	2302      	movs	r3, #2
 8007180:	e0b4      	b.n	80072ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b0c      	cmp	r3, #12
 8007196:	f200 809f 	bhi.w	80072d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080072d9 	.word	0x080072d9
 80071a8:	080072d9 	.word	0x080072d9
 80071ac:	080072d9 	.word	0x080072d9
 80071b0:	08007215 	.word	0x08007215
 80071b4:	080072d9 	.word	0x080072d9
 80071b8:	080072d9 	.word	0x080072d9
 80071bc:	080072d9 	.word	0x080072d9
 80071c0:	08007257 	.word	0x08007257
 80071c4:	080072d9 	.word	0x080072d9
 80071c8:	080072d9 	.word	0x080072d9
 80071cc:	080072d9 	.word	0x080072d9
 80071d0:	08007297 	.word	0x08007297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f92a 	bl	8007434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0208 	orr.w	r2, r2, #8
 80071ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0204 	bic.w	r2, r2, #4
 80071fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6999      	ldr	r1, [r3, #24]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	619a      	str	r2, [r3, #24]
      break;
 8007212:	e062      	b.n	80072da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f97a 	bl	8007514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800722e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6999      	ldr	r1, [r3, #24]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	021a      	lsls	r2, r3, #8
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	619a      	str	r2, [r3, #24]
      break;
 8007254:	e041      	b.n	80072da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	4618      	mov	r0, r3
 800725e:	f000 f9cf 	bl	8007600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69da      	ldr	r2, [r3, #28]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0208 	orr.w	r2, r2, #8
 8007270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0204 	bic.w	r2, r2, #4
 8007280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69d9      	ldr	r1, [r3, #28]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	61da      	str	r2, [r3, #28]
      break;
 8007294:	e021      	b.n	80072da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68b9      	ldr	r1, [r7, #8]
 800729c:	4618      	mov	r0, r3
 800729e:	f000 fa23 	bl	80076e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69d9      	ldr	r1, [r3, #28]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	021a      	lsls	r2, r3, #8
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	61da      	str	r2, [r3, #28]
      break;
 80072d6:	e000      	b.n	80072da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80072d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a40      	ldr	r2, [pc, #256]	; (8007408 <TIM_Base_SetConfig+0x114>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <TIM_Base_SetConfig+0x40>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007312:	d00f      	beq.n	8007334 <TIM_Base_SetConfig+0x40>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a3d      	ldr	r2, [pc, #244]	; (800740c <TIM_Base_SetConfig+0x118>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00b      	beq.n	8007334 <TIM_Base_SetConfig+0x40>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a3c      	ldr	r2, [pc, #240]	; (8007410 <TIM_Base_SetConfig+0x11c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d007      	beq.n	8007334 <TIM_Base_SetConfig+0x40>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a3b      	ldr	r2, [pc, #236]	; (8007414 <TIM_Base_SetConfig+0x120>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d003      	beq.n	8007334 <TIM_Base_SetConfig+0x40>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a3a      	ldr	r2, [pc, #232]	; (8007418 <TIM_Base_SetConfig+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d108      	bne.n	8007346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2f      	ldr	r2, [pc, #188]	; (8007408 <TIM_Base_SetConfig+0x114>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d02b      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007354:	d027      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2c      	ldr	r2, [pc, #176]	; (800740c <TIM_Base_SetConfig+0x118>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d023      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2b      	ldr	r2, [pc, #172]	; (8007410 <TIM_Base_SetConfig+0x11c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01f      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <TIM_Base_SetConfig+0x120>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01b      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a29      	ldr	r2, [pc, #164]	; (8007418 <TIM_Base_SetConfig+0x124>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d017      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a28      	ldr	r2, [pc, #160]	; (800741c <TIM_Base_SetConfig+0x128>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d013      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a27      	ldr	r2, [pc, #156]	; (8007420 <TIM_Base_SetConfig+0x12c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00f      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a26      	ldr	r2, [pc, #152]	; (8007424 <TIM_Base_SetConfig+0x130>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00b      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a25      	ldr	r2, [pc, #148]	; (8007428 <TIM_Base_SetConfig+0x134>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d007      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a24      	ldr	r2, [pc, #144]	; (800742c <TIM_Base_SetConfig+0x138>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d003      	beq.n	80073a6 <TIM_Base_SetConfig+0xb2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a23      	ldr	r2, [pc, #140]	; (8007430 <TIM_Base_SetConfig+0x13c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d108      	bne.n	80073b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a0a      	ldr	r2, [pc, #40]	; (8007408 <TIM_Base_SetConfig+0x114>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_Base_SetConfig+0xf8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <TIM_Base_SetConfig+0x124>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d103      	bne.n	80073f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	615a      	str	r2, [r3, #20]
}
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000
 800740c:	40000400 	.word	0x40000400
 8007410:	40000800 	.word	0x40000800
 8007414:	40000c00 	.word	0x40000c00
 8007418:	40010400 	.word	0x40010400
 800741c:	40014000 	.word	0x40014000
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800
 8007428:	40001800 	.word	0x40001800
 800742c:	40001c00 	.word	0x40001c00
 8007430:	40002000 	.word	0x40002000

08007434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f023 0201 	bic.w	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f023 0302 	bic.w	r3, r3, #2
 800747c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a20      	ldr	r2, [pc, #128]	; (800750c <TIM_OC1_SetConfig+0xd8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_OC1_SetConfig+0x64>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <TIM_OC1_SetConfig+0xdc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d10c      	bne.n	80074b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0308 	bic.w	r3, r3, #8
 800749e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 0304 	bic.w	r3, r3, #4
 80074b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a15      	ldr	r2, [pc, #84]	; (800750c <TIM_OC1_SetConfig+0xd8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d003      	beq.n	80074c2 <TIM_OC1_SetConfig+0x8e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a14      	ldr	r2, [pc, #80]	; (8007510 <TIM_OC1_SetConfig+0xdc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d111      	bne.n	80074e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	621a      	str	r2, [r3, #32]
}
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40010000 	.word	0x40010000
 8007510:	40010400 	.word	0x40010400

08007514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f023 0210 	bic.w	r2, r3, #16
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f023 0320 	bic.w	r3, r3, #32
 800755e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4313      	orrs	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a22      	ldr	r2, [pc, #136]	; (80075f8 <TIM_OC2_SetConfig+0xe4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d003      	beq.n	800757c <TIM_OC2_SetConfig+0x68>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a21      	ldr	r2, [pc, #132]	; (80075fc <TIM_OC2_SetConfig+0xe8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d10d      	bne.n	8007598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <TIM_OC2_SetConfig+0xe4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_OC2_SetConfig+0x94>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a16      	ldr	r2, [pc, #88]	; (80075fc <TIM_OC2_SetConfig+0xe8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d113      	bne.n	80075d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40010000 	.word	0x40010000
 80075fc:	40010400 	.word	0x40010400

08007600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a21      	ldr	r2, [pc, #132]	; (80076e0 <TIM_OC3_SetConfig+0xe0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d003      	beq.n	8007666 <TIM_OC3_SetConfig+0x66>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a20      	ldr	r2, [pc, #128]	; (80076e4 <TIM_OC3_SetConfig+0xe4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10d      	bne.n	8007682 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800766c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a16      	ldr	r2, [pc, #88]	; (80076e0 <TIM_OC3_SetConfig+0xe0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d003      	beq.n	8007692 <TIM_OC3_SetConfig+0x92>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <TIM_OC3_SetConfig+0xe4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d113      	bne.n	80076ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	621a      	str	r2, [r3, #32]
}
 80076d4:	bf00      	nop
 80076d6:	371c      	adds	r7, #28
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400

080076e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800771e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	031b      	lsls	r3, r3, #12
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4313      	orrs	r3, r2
 800773e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a12      	ldr	r2, [pc, #72]	; (800778c <TIM_OC4_SetConfig+0xa4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC4_SetConfig+0x68>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a11      	ldr	r2, [pc, #68]	; (8007790 <TIM_OC4_SetConfig+0xa8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d109      	bne.n	8007764 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	019b      	lsls	r3, r3, #6
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40010400 	.word	0x40010400

08007794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	2201      	movs	r2, #1
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1a      	ldr	r2, [r3, #32]
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	fa01 f303 	lsl.w	r3, r1, r3
 80077cc:	431a      	orrs	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	621a      	str	r2, [r3, #32]
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e05a      	b.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d022      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007844:	d01d      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1d      	ldr	r2, [pc, #116]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d018      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1b      	ldr	r2, [pc, #108]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a18      	ldr	r2, [pc, #96]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d009      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d10c      	bne.n	800789c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4313      	orrs	r3, r2
 8007892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40010000 	.word	0x40010000
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	40010400 	.word	0x40010400
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40001800 	.word	0x40001800

080078d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e03f      	b.n	800796a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fc fd28 	bl	8004354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2224      	movs	r2, #36	; 0x24
 8007908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800791a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa69 	bl	8007df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10d      	bne.n	80079c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <HAL_UART_IRQHandler+0x52>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f996 	bl	8007cf0 <UART_Receive_IT>
      return;
 80079c4:	e0d1      	b.n	8007b6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80b0 	beq.w	8007b2e <HAL_UART_IRQHandler+0x1ba>
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <HAL_UART_IRQHandler+0x70>
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 80a5 	beq.w	8007b2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_UART_IRQHandler+0x90>
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fc:	f043 0201 	orr.w	r2, r3, #1
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <HAL_UART_IRQHandler+0xb0>
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	f043 0202 	orr.w	r2, r3, #2
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <HAL_UART_IRQHandler+0xd0>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3c:	f043 0204 	orr.w	r2, r3, #4
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00f      	beq.n	8007a6e <HAL_UART_IRQHandler+0xfa>
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <HAL_UART_IRQHandler+0xee>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	f043 0208 	orr.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d078      	beq.n	8007b68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <HAL_UART_IRQHandler+0x11c>
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f930 	bl	8007cf0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	bf0c      	ite	eq
 8007a9e:	2301      	moveq	r3, #1
 8007aa0:	2300      	movne	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x144>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d031      	beq.n	8007b1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f879 	bl	8007bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac8:	2b40      	cmp	r3, #64	; 0x40
 8007aca:	d123      	bne.n	8007b14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ada:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d013      	beq.n	8007b0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae8:	4a21      	ldr	r2, [pc, #132]	; (8007b70 <HAL_UART_IRQHandler+0x1fc>)
 8007aea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fd ff78 	bl	80059e6 <HAL_DMA_Abort_IT>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d016      	beq.n	8007b2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b06:	4610      	mov	r0, r2
 8007b08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0a:	e00e      	b.n	8007b2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f845 	bl	8007b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b12:	e00a      	b.n	8007b2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f841 	bl	8007b9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1a:	e006      	b.n	8007b2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f83d 	bl	8007b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007b28:	e01e      	b.n	8007b68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2a:	bf00      	nop
    return;
 8007b2c:	e01c      	b.n	8007b68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_UART_IRQHandler+0x1d6>
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f866 	bl	8007c14 <UART_Transmit_IT>
    return;
 8007b48:	e00f      	b.n	8007b6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1f6>
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f8ae 	bl	8007cc0 <UART_EndTransmit_IT>
    return;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007b68:	bf00      	nop
  }
}
 8007b6a:	3720      	adds	r7, #32
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	08007bed 	.word	0x08007bed

08007b74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695a      	ldr	r2, [r3, #20]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ffc8 	bl	8007b9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b21      	cmp	r3, #33	; 0x21
 8007c26:	d144      	bne.n	8007cb2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d11a      	bne.n	8007c68 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c46:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	1c9a      	adds	r2, r3, #2
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]
 8007c5a:	e00e      	b.n	8007c7a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	621a      	str	r2, [r3, #32]
 8007c66:	e008      	b.n	8007c7a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	1c59      	adds	r1, r3, #1
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6211      	str	r1, [r2, #32]
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4619      	mov	r1, r3
 8007c88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10f      	bne.n	8007cae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e000      	b.n	8007cb4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
  }
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff ff47 	bl	8007b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b22      	cmp	r3, #34	; 0x22
 8007d02:	d171      	bne.n	8007de8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0c:	d123      	bne.n	8007d56 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10e      	bne.n	8007d3a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	1c9a      	adds	r2, r3, #2
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28
 8007d38:	e029      	b.n	8007d8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	629a      	str	r2, [r3, #40]	; 0x28
 8007d54:	e01b      	b.n	8007d8e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6858      	ldr	r0, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	1c59      	adds	r1, r3, #1
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6291      	str	r1, [r2, #40]	; 0x28
 8007d6e:	b2c2      	uxtb	r2, r0
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	e00c      	b.n	8007d8e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	1c58      	adds	r0, r3, #1
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	6288      	str	r0, [r1, #40]	; 0x28
 8007d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	3b01      	subs	r3, #1
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d120      	bne.n	8007de4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0220 	bic.w	r2, r2, #32
 8007db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695a      	ldr	r2, [r3, #20]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fed4 	bl	8007b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e002      	b.n	8007dea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e000      	b.n	8007dea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007e36:	f023 030c 	bic.w	r3, r3, #12
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6812      	ldr	r2, [r2, #0]
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e62:	f040 818b 	bne.w	800817c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4ac1      	ldr	r2, [pc, #772]	; (8008170 <UART_SetConfig+0x37c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d005      	beq.n	8007e7c <UART_SetConfig+0x88>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4abf      	ldr	r2, [pc, #764]	; (8008174 <UART_SetConfig+0x380>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	f040 80bd 	bne.w	8007ff6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e7c:	f7fe fe44 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8007e80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	461d      	mov	r5, r3
 8007e86:	f04f 0600 	mov.w	r6, #0
 8007e8a:	46a8      	mov	r8, r5
 8007e8c:	46b1      	mov	r9, r6
 8007e8e:	eb18 0308 	adds.w	r3, r8, r8
 8007e92:	eb49 0409 	adc.w	r4, r9, r9
 8007e96:	4698      	mov	r8, r3
 8007e98:	46a1      	mov	r9, r4
 8007e9a:	eb18 0805 	adds.w	r8, r8, r5
 8007e9e:	eb49 0906 	adc.w	r9, r9, r6
 8007ea2:	f04f 0100 	mov.w	r1, #0
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007eae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007eb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007eb6:	4688      	mov	r8, r1
 8007eb8:	4691      	mov	r9, r2
 8007eba:	eb18 0005 	adds.w	r0, r8, r5
 8007ebe:	eb49 0106 	adc.w	r1, r9, r6
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	f04f 0600 	mov.w	r6, #0
 8007ecc:	196b      	adds	r3, r5, r5
 8007ece:	eb46 0406 	adc.w	r4, r6, r6
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	f7f8 fe47 	bl	8000b68 <__aeabi_uldivmod>
 8007eda:	4603      	mov	r3, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4ba5      	ldr	r3, [pc, #660]	; (8008178 <UART_SetConfig+0x384>)
 8007ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	461d      	mov	r5, r3
 8007ef0:	f04f 0600 	mov.w	r6, #0
 8007ef4:	46a9      	mov	r9, r5
 8007ef6:	46b2      	mov	sl, r6
 8007ef8:	eb19 0309 	adds.w	r3, r9, r9
 8007efc:	eb4a 040a 	adc.w	r4, sl, sl
 8007f00:	4699      	mov	r9, r3
 8007f02:	46a2      	mov	sl, r4
 8007f04:	eb19 0905 	adds.w	r9, r9, r5
 8007f08:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f0c:	f04f 0100 	mov.w	r1, #0
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f20:	4689      	mov	r9, r1
 8007f22:	4692      	mov	sl, r2
 8007f24:	eb19 0005 	adds.w	r0, r9, r5
 8007f28:	eb4a 0106 	adc.w	r1, sl, r6
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	461d      	mov	r5, r3
 8007f32:	f04f 0600 	mov.w	r6, #0
 8007f36:	196b      	adds	r3, r5, r5
 8007f38:	eb46 0406 	adc.w	r4, r6, r6
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4623      	mov	r3, r4
 8007f40:	f7f8 fe12 	bl	8000b68 <__aeabi_uldivmod>
 8007f44:	4603      	mov	r3, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b8b      	ldr	r3, [pc, #556]	; (8008178 <UART_SetConfig+0x384>)
 8007f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	2164      	movs	r1, #100	; 0x64
 8007f54:	fb01 f303 	mul.w	r3, r1, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	3332      	adds	r3, #50	; 0x32
 8007f5e:	4a86      	ldr	r2, [pc, #536]	; (8008178 <UART_SetConfig+0x384>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f6c:	4498      	add	r8, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	461d      	mov	r5, r3
 8007f72:	f04f 0600 	mov.w	r6, #0
 8007f76:	46a9      	mov	r9, r5
 8007f78:	46b2      	mov	sl, r6
 8007f7a:	eb19 0309 	adds.w	r3, r9, r9
 8007f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8007f82:	4699      	mov	r9, r3
 8007f84:	46a2      	mov	sl, r4
 8007f86:	eb19 0905 	adds.w	r9, r9, r5
 8007f8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f8e:	f04f 0100 	mov.w	r1, #0
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fa2:	4689      	mov	r9, r1
 8007fa4:	4692      	mov	sl, r2
 8007fa6:	eb19 0005 	adds.w	r0, r9, r5
 8007faa:	eb4a 0106 	adc.w	r1, sl, r6
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	461d      	mov	r5, r3
 8007fb4:	f04f 0600 	mov.w	r6, #0
 8007fb8:	196b      	adds	r3, r5, r5
 8007fba:	eb46 0406 	adc.w	r4, r6, r6
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	f7f8 fdd1 	bl	8000b68 <__aeabi_uldivmod>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4b6a      	ldr	r3, [pc, #424]	; (8008178 <UART_SetConfig+0x384>)
 8007fce:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	2164      	movs	r1, #100	; 0x64
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	3332      	adds	r3, #50	; 0x32
 8007fe0:	4a65      	ldr	r2, [pc, #404]	; (8008178 <UART_SetConfig+0x384>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	095b      	lsrs	r3, r3, #5
 8007fe8:	f003 0207 	and.w	r2, r3, #7
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4442      	add	r2, r8
 8007ff2:	609a      	str	r2, [r3, #8]
 8007ff4:	e26f      	b.n	80084d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ff6:	f7fe fd73 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8007ffa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	461d      	mov	r5, r3
 8008000:	f04f 0600 	mov.w	r6, #0
 8008004:	46a8      	mov	r8, r5
 8008006:	46b1      	mov	r9, r6
 8008008:	eb18 0308 	adds.w	r3, r8, r8
 800800c:	eb49 0409 	adc.w	r4, r9, r9
 8008010:	4698      	mov	r8, r3
 8008012:	46a1      	mov	r9, r4
 8008014:	eb18 0805 	adds.w	r8, r8, r5
 8008018:	eb49 0906 	adc.w	r9, r9, r6
 800801c:	f04f 0100 	mov.w	r1, #0
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008028:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800802c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008030:	4688      	mov	r8, r1
 8008032:	4691      	mov	r9, r2
 8008034:	eb18 0005 	adds.w	r0, r8, r5
 8008038:	eb49 0106 	adc.w	r1, r9, r6
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	461d      	mov	r5, r3
 8008042:	f04f 0600 	mov.w	r6, #0
 8008046:	196b      	adds	r3, r5, r5
 8008048:	eb46 0406 	adc.w	r4, r6, r6
 800804c:	461a      	mov	r2, r3
 800804e:	4623      	mov	r3, r4
 8008050:	f7f8 fd8a 	bl	8000b68 <__aeabi_uldivmod>
 8008054:	4603      	mov	r3, r0
 8008056:	460c      	mov	r4, r1
 8008058:	461a      	mov	r2, r3
 800805a:	4b47      	ldr	r3, [pc, #284]	; (8008178 <UART_SetConfig+0x384>)
 800805c:	fba3 2302 	umull	r2, r3, r3, r2
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	461d      	mov	r5, r3
 800806a:	f04f 0600 	mov.w	r6, #0
 800806e:	46a9      	mov	r9, r5
 8008070:	46b2      	mov	sl, r6
 8008072:	eb19 0309 	adds.w	r3, r9, r9
 8008076:	eb4a 040a 	adc.w	r4, sl, sl
 800807a:	4699      	mov	r9, r3
 800807c:	46a2      	mov	sl, r4
 800807e:	eb19 0905 	adds.w	r9, r9, r5
 8008082:	eb4a 0a06 	adc.w	sl, sl, r6
 8008086:	f04f 0100 	mov.w	r1, #0
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008092:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008096:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800809a:	4689      	mov	r9, r1
 800809c:	4692      	mov	sl, r2
 800809e:	eb19 0005 	adds.w	r0, r9, r5
 80080a2:	eb4a 0106 	adc.w	r1, sl, r6
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	461d      	mov	r5, r3
 80080ac:	f04f 0600 	mov.w	r6, #0
 80080b0:	196b      	adds	r3, r5, r5
 80080b2:	eb46 0406 	adc.w	r4, r6, r6
 80080b6:	461a      	mov	r2, r3
 80080b8:	4623      	mov	r3, r4
 80080ba:	f7f8 fd55 	bl	8000b68 <__aeabi_uldivmod>
 80080be:	4603      	mov	r3, r0
 80080c0:	460c      	mov	r4, r1
 80080c2:	461a      	mov	r2, r3
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <UART_SetConfig+0x384>)
 80080c6:	fba3 1302 	umull	r1, r3, r3, r2
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	2164      	movs	r1, #100	; 0x64
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	3332      	adds	r3, #50	; 0x32
 80080d8:	4a27      	ldr	r2, [pc, #156]	; (8008178 <UART_SetConfig+0x384>)
 80080da:	fba2 2303 	umull	r2, r3, r2, r3
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080e6:	4498      	add	r8, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	461d      	mov	r5, r3
 80080ec:	f04f 0600 	mov.w	r6, #0
 80080f0:	46a9      	mov	r9, r5
 80080f2:	46b2      	mov	sl, r6
 80080f4:	eb19 0309 	adds.w	r3, r9, r9
 80080f8:	eb4a 040a 	adc.w	r4, sl, sl
 80080fc:	4699      	mov	r9, r3
 80080fe:	46a2      	mov	sl, r4
 8008100:	eb19 0905 	adds.w	r9, r9, r5
 8008104:	eb4a 0a06 	adc.w	sl, sl, r6
 8008108:	f04f 0100 	mov.w	r1, #0
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800811c:	4689      	mov	r9, r1
 800811e:	4692      	mov	sl, r2
 8008120:	eb19 0005 	adds.w	r0, r9, r5
 8008124:	eb4a 0106 	adc.w	r1, sl, r6
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	461d      	mov	r5, r3
 800812e:	f04f 0600 	mov.w	r6, #0
 8008132:	196b      	adds	r3, r5, r5
 8008134:	eb46 0406 	adc.w	r4, r6, r6
 8008138:	461a      	mov	r2, r3
 800813a:	4623      	mov	r3, r4
 800813c:	f7f8 fd14 	bl	8000b68 <__aeabi_uldivmod>
 8008140:	4603      	mov	r3, r0
 8008142:	460c      	mov	r4, r1
 8008144:	461a      	mov	r2, r3
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <UART_SetConfig+0x384>)
 8008148:	fba3 1302 	umull	r1, r3, r3, r2
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	2164      	movs	r1, #100	; 0x64
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	3332      	adds	r3, #50	; 0x32
 800815a:	4a07      	ldr	r2, [pc, #28]	; (8008178 <UART_SetConfig+0x384>)
 800815c:	fba2 2303 	umull	r2, r3, r2, r3
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	f003 0207 	and.w	r2, r3, #7
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4442      	add	r2, r8
 800816c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800816e:	e1b2      	b.n	80084d6 <UART_SetConfig+0x6e2>
 8008170:	40011000 	.word	0x40011000
 8008174:	40011400 	.word	0x40011400
 8008178:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4ad7      	ldr	r2, [pc, #860]	; (80084e0 <UART_SetConfig+0x6ec>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d005      	beq.n	8008192 <UART_SetConfig+0x39e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4ad6      	ldr	r2, [pc, #856]	; (80084e4 <UART_SetConfig+0x6f0>)
 800818c:	4293      	cmp	r3, r2
 800818e:	f040 80d1 	bne.w	8008334 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008192:	f7fe fcb9 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8008196:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	469a      	mov	sl, r3
 800819c:	f04f 0b00 	mov.w	fp, #0
 80081a0:	46d0      	mov	r8, sl
 80081a2:	46d9      	mov	r9, fp
 80081a4:	eb18 0308 	adds.w	r3, r8, r8
 80081a8:	eb49 0409 	adc.w	r4, r9, r9
 80081ac:	4698      	mov	r8, r3
 80081ae:	46a1      	mov	r9, r4
 80081b0:	eb18 080a 	adds.w	r8, r8, sl
 80081b4:	eb49 090b 	adc.w	r9, r9, fp
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081cc:	4688      	mov	r8, r1
 80081ce:	4691      	mov	r9, r2
 80081d0:	eb1a 0508 	adds.w	r5, sl, r8
 80081d4:	eb4b 0609 	adc.w	r6, fp, r9
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4619      	mov	r1, r3
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	f04f 0400 	mov.w	r4, #0
 80081ea:	0094      	lsls	r4, r2, #2
 80081ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081f0:	008b      	lsls	r3, r1, #2
 80081f2:	461a      	mov	r2, r3
 80081f4:	4623      	mov	r3, r4
 80081f6:	4628      	mov	r0, r5
 80081f8:	4631      	mov	r1, r6
 80081fa:	f7f8 fcb5 	bl	8000b68 <__aeabi_uldivmod>
 80081fe:	4603      	mov	r3, r0
 8008200:	460c      	mov	r4, r1
 8008202:	461a      	mov	r2, r3
 8008204:	4bb8      	ldr	r3, [pc, #736]	; (80084e8 <UART_SetConfig+0x6f4>)
 8008206:	fba3 2302 	umull	r2, r3, r3, r2
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	469b      	mov	fp, r3
 8008214:	f04f 0c00 	mov.w	ip, #0
 8008218:	46d9      	mov	r9, fp
 800821a:	46e2      	mov	sl, ip
 800821c:	eb19 0309 	adds.w	r3, r9, r9
 8008220:	eb4a 040a 	adc.w	r4, sl, sl
 8008224:	4699      	mov	r9, r3
 8008226:	46a2      	mov	sl, r4
 8008228:	eb19 090b 	adds.w	r9, r9, fp
 800822c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008230:	f04f 0100 	mov.w	r1, #0
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800823c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008240:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008244:	4689      	mov	r9, r1
 8008246:	4692      	mov	sl, r2
 8008248:	eb1b 0509 	adds.w	r5, fp, r9
 800824c:	eb4c 060a 	adc.w	r6, ip, sl
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	4619      	mov	r1, r3
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	f04f 0400 	mov.w	r4, #0
 8008262:	0094      	lsls	r4, r2, #2
 8008264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008268:	008b      	lsls	r3, r1, #2
 800826a:	461a      	mov	r2, r3
 800826c:	4623      	mov	r3, r4
 800826e:	4628      	mov	r0, r5
 8008270:	4631      	mov	r1, r6
 8008272:	f7f8 fc79 	bl	8000b68 <__aeabi_uldivmod>
 8008276:	4603      	mov	r3, r0
 8008278:	460c      	mov	r4, r1
 800827a:	461a      	mov	r2, r3
 800827c:	4b9a      	ldr	r3, [pc, #616]	; (80084e8 <UART_SetConfig+0x6f4>)
 800827e:	fba3 1302 	umull	r1, r3, r3, r2
 8008282:	095b      	lsrs	r3, r3, #5
 8008284:	2164      	movs	r1, #100	; 0x64
 8008286:	fb01 f303 	mul.w	r3, r1, r3
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	3332      	adds	r3, #50	; 0x32
 8008290:	4a95      	ldr	r2, [pc, #596]	; (80084e8 <UART_SetConfig+0x6f4>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	095b      	lsrs	r3, r3, #5
 8008298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800829c:	4498      	add	r8, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	469b      	mov	fp, r3
 80082a2:	f04f 0c00 	mov.w	ip, #0
 80082a6:	46d9      	mov	r9, fp
 80082a8:	46e2      	mov	sl, ip
 80082aa:	eb19 0309 	adds.w	r3, r9, r9
 80082ae:	eb4a 040a 	adc.w	r4, sl, sl
 80082b2:	4699      	mov	r9, r3
 80082b4:	46a2      	mov	sl, r4
 80082b6:	eb19 090b 	adds.w	r9, r9, fp
 80082ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082be:	f04f 0100 	mov.w	r1, #0
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082d2:	4689      	mov	r9, r1
 80082d4:	4692      	mov	sl, r2
 80082d6:	eb1b 0509 	adds.w	r5, fp, r9
 80082da:	eb4c 060a 	adc.w	r6, ip, sl
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4619      	mov	r1, r3
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	f04f 0400 	mov.w	r4, #0
 80082f0:	0094      	lsls	r4, r2, #2
 80082f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082f6:	008b      	lsls	r3, r1, #2
 80082f8:	461a      	mov	r2, r3
 80082fa:	4623      	mov	r3, r4
 80082fc:	4628      	mov	r0, r5
 80082fe:	4631      	mov	r1, r6
 8008300:	f7f8 fc32 	bl	8000b68 <__aeabi_uldivmod>
 8008304:	4603      	mov	r3, r0
 8008306:	460c      	mov	r4, r1
 8008308:	461a      	mov	r2, r3
 800830a:	4b77      	ldr	r3, [pc, #476]	; (80084e8 <UART_SetConfig+0x6f4>)
 800830c:	fba3 1302 	umull	r1, r3, r3, r2
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	2164      	movs	r1, #100	; 0x64
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	3332      	adds	r3, #50	; 0x32
 800831e:	4a72      	ldr	r2, [pc, #456]	; (80084e8 <UART_SetConfig+0x6f4>)
 8008320:	fba2 2303 	umull	r2, r3, r2, r3
 8008324:	095b      	lsrs	r3, r3, #5
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4442      	add	r2, r8
 8008330:	609a      	str	r2, [r3, #8]
 8008332:	e0d0      	b.n	80084d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008334:	f7fe fbd4 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8008338:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	469a      	mov	sl, r3
 800833e:	f04f 0b00 	mov.w	fp, #0
 8008342:	46d0      	mov	r8, sl
 8008344:	46d9      	mov	r9, fp
 8008346:	eb18 0308 	adds.w	r3, r8, r8
 800834a:	eb49 0409 	adc.w	r4, r9, r9
 800834e:	4698      	mov	r8, r3
 8008350:	46a1      	mov	r9, r4
 8008352:	eb18 080a 	adds.w	r8, r8, sl
 8008356:	eb49 090b 	adc.w	r9, r9, fp
 800835a:	f04f 0100 	mov.w	r1, #0
 800835e:	f04f 0200 	mov.w	r2, #0
 8008362:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008366:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800836a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800836e:	4688      	mov	r8, r1
 8008370:	4691      	mov	r9, r2
 8008372:	eb1a 0508 	adds.w	r5, sl, r8
 8008376:	eb4b 0609 	adc.w	r6, fp, r9
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	4619      	mov	r1, r3
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	f04f 0300 	mov.w	r3, #0
 8008388:	f04f 0400 	mov.w	r4, #0
 800838c:	0094      	lsls	r4, r2, #2
 800838e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008392:	008b      	lsls	r3, r1, #2
 8008394:	461a      	mov	r2, r3
 8008396:	4623      	mov	r3, r4
 8008398:	4628      	mov	r0, r5
 800839a:	4631      	mov	r1, r6
 800839c:	f7f8 fbe4 	bl	8000b68 <__aeabi_uldivmod>
 80083a0:	4603      	mov	r3, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b50      	ldr	r3, [pc, #320]	; (80084e8 <UART_SetConfig+0x6f4>)
 80083a8:	fba3 2302 	umull	r2, r3, r3, r2
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	469b      	mov	fp, r3
 80083b6:	f04f 0c00 	mov.w	ip, #0
 80083ba:	46d9      	mov	r9, fp
 80083bc:	46e2      	mov	sl, ip
 80083be:	eb19 0309 	adds.w	r3, r9, r9
 80083c2:	eb4a 040a 	adc.w	r4, sl, sl
 80083c6:	4699      	mov	r9, r3
 80083c8:	46a2      	mov	sl, r4
 80083ca:	eb19 090b 	adds.w	r9, r9, fp
 80083ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083d2:	f04f 0100 	mov.w	r1, #0
 80083d6:	f04f 0200 	mov.w	r2, #0
 80083da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083e6:	4689      	mov	r9, r1
 80083e8:	4692      	mov	sl, r2
 80083ea:	eb1b 0509 	adds.w	r5, fp, r9
 80083ee:	eb4c 060a 	adc.w	r6, ip, sl
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	f04f 0400 	mov.w	r4, #0
 8008404:	0094      	lsls	r4, r2, #2
 8008406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800840a:	008b      	lsls	r3, r1, #2
 800840c:	461a      	mov	r2, r3
 800840e:	4623      	mov	r3, r4
 8008410:	4628      	mov	r0, r5
 8008412:	4631      	mov	r1, r6
 8008414:	f7f8 fba8 	bl	8000b68 <__aeabi_uldivmod>
 8008418:	4603      	mov	r3, r0
 800841a:	460c      	mov	r4, r1
 800841c:	461a      	mov	r2, r3
 800841e:	4b32      	ldr	r3, [pc, #200]	; (80084e8 <UART_SetConfig+0x6f4>)
 8008420:	fba3 1302 	umull	r1, r3, r3, r2
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	2164      	movs	r1, #100	; 0x64
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	3332      	adds	r3, #50	; 0x32
 8008432:	4a2d      	ldr	r2, [pc, #180]	; (80084e8 <UART_SetConfig+0x6f4>)
 8008434:	fba2 2303 	umull	r2, r3, r2, r3
 8008438:	095b      	lsrs	r3, r3, #5
 800843a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800843e:	4498      	add	r8, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	469b      	mov	fp, r3
 8008444:	f04f 0c00 	mov.w	ip, #0
 8008448:	46d9      	mov	r9, fp
 800844a:	46e2      	mov	sl, ip
 800844c:	eb19 0309 	adds.w	r3, r9, r9
 8008450:	eb4a 040a 	adc.w	r4, sl, sl
 8008454:	4699      	mov	r9, r3
 8008456:	46a2      	mov	sl, r4
 8008458:	eb19 090b 	adds.w	r9, r9, fp
 800845c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008460:	f04f 0100 	mov.w	r1, #0
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800846c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008470:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008474:	4689      	mov	r9, r1
 8008476:	4692      	mov	sl, r2
 8008478:	eb1b 0509 	adds.w	r5, fp, r9
 800847c:	eb4c 060a 	adc.w	r6, ip, sl
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4619      	mov	r1, r3
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	f04f 0400 	mov.w	r4, #0
 8008492:	0094      	lsls	r4, r2, #2
 8008494:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008498:	008b      	lsls	r3, r1, #2
 800849a:	461a      	mov	r2, r3
 800849c:	4623      	mov	r3, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	4631      	mov	r1, r6
 80084a2:	f7f8 fb61 	bl	8000b68 <__aeabi_uldivmod>
 80084a6:	4603      	mov	r3, r0
 80084a8:	460c      	mov	r4, r1
 80084aa:	461a      	mov	r2, r3
 80084ac:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <UART_SetConfig+0x6f4>)
 80084ae:	fba3 1302 	umull	r1, r3, r3, r2
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2164      	movs	r1, #100	; 0x64
 80084b6:	fb01 f303 	mul.w	r3, r1, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	3332      	adds	r3, #50	; 0x32
 80084c0:	4a09      	ldr	r2, [pc, #36]	; (80084e8 <UART_SetConfig+0x6f4>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f003 020f 	and.w	r2, r3, #15
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4442      	add	r2, r8
 80084d2:	609a      	str	r2, [r3, #8]
}
 80084d4:	e7ff      	b.n	80084d6 <UART_SetConfig+0x6e2>
 80084d6:	bf00      	nop
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	40011000 	.word	0x40011000
 80084e4:	40011400 	.word	0x40011400
 80084e8:	51eb851f 	.word	0x51eb851f

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	; (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000020 	.word	0x20000020

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4e0d      	ldr	r6, [pc, #52]	; (8008530 <__libc_init_array+0x38>)
 80084fc:	4c0d      	ldr	r4, [pc, #52]	; (8008534 <__libc_init_array+0x3c>)
 80084fe:	1ba4      	subs	r4, r4, r6
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	2500      	movs	r5, #0
 8008504:	42a5      	cmp	r5, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	4e0b      	ldr	r6, [pc, #44]	; (8008538 <__libc_init_array+0x40>)
 800850a:	4c0c      	ldr	r4, [pc, #48]	; (800853c <__libc_init_array+0x44>)
 800850c:	f000 ffa8 	bl	8009460 <_init>
 8008510:	1ba4      	subs	r4, r4, r6
 8008512:	10a4      	asrs	r4, r4, #2
 8008514:	2500      	movs	r5, #0
 8008516:	42a5      	cmp	r5, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008520:	4798      	blx	r3
 8008522:	3501      	adds	r5, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800852a:	4798      	blx	r3
 800852c:	3501      	adds	r5, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	08009578 	.word	0x08009578
 8008534:	08009578 	.word	0x08009578
 8008538:	08009578 	.word	0x08009578
 800853c:	0800957c 	.word	0x0800957c

08008540 <memcpy>:
 8008540:	b510      	push	{r4, lr}
 8008542:	1e43      	subs	r3, r0, #1
 8008544:	440a      	add	r2, r1
 8008546:	4291      	cmp	r1, r2
 8008548:	d100      	bne.n	800854c <memcpy+0xc>
 800854a:	bd10      	pop	{r4, pc}
 800854c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008554:	e7f7      	b.n	8008546 <memcpy+0x6>

08008556 <memset>:
 8008556:	4402      	add	r2, r0
 8008558:	4603      	mov	r3, r0
 800855a:	4293      	cmp	r3, r2
 800855c:	d100      	bne.n	8008560 <memset+0xa>
 800855e:	4770      	bx	lr
 8008560:	f803 1b01 	strb.w	r1, [r3], #1
 8008564:	e7f9      	b.n	800855a <memset+0x4>
	...

08008568 <asin>:
 8008568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800856a:	ed2d 8b02 	vpush	{d8}
 800856e:	4e26      	ldr	r6, [pc, #152]	; (8008608 <asin+0xa0>)
 8008570:	b08b      	sub	sp, #44	; 0x2c
 8008572:	ec55 4b10 	vmov	r4, r5, d0
 8008576:	f000 f90f 	bl	8008798 <__ieee754_asin>
 800857a:	f996 3000 	ldrsb.w	r3, [r6]
 800857e:	eeb0 8a40 	vmov.f32	s16, s0
 8008582:	eef0 8a60 	vmov.f32	s17, s1
 8008586:	3301      	adds	r3, #1
 8008588:	d036      	beq.n	80085f8 <asin+0x90>
 800858a:	4622      	mov	r2, r4
 800858c:	462b      	mov	r3, r5
 800858e:	4620      	mov	r0, r4
 8008590:	4629      	mov	r1, r5
 8008592:	f7f8 fa83 	bl	8000a9c <__aeabi_dcmpun>
 8008596:	4607      	mov	r7, r0
 8008598:	bb70      	cbnz	r0, 80085f8 <asin+0x90>
 800859a:	ec45 4b10 	vmov	d0, r4, r5
 800859e:	f000 ff4b 	bl	8009438 <fabs>
 80085a2:	2200      	movs	r2, #0
 80085a4:	4b19      	ldr	r3, [pc, #100]	; (800860c <asin+0xa4>)
 80085a6:	ec51 0b10 	vmov	r0, r1, d0
 80085aa:	f7f8 fa6d 	bl	8000a88 <__aeabi_dcmpgt>
 80085ae:	b318      	cbz	r0, 80085f8 <asin+0x90>
 80085b0:	2301      	movs	r3, #1
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	4816      	ldr	r0, [pc, #88]	; (8008610 <asin+0xa8>)
 80085b6:	4b17      	ldr	r3, [pc, #92]	; (8008614 <asin+0xac>)
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	9708      	str	r7, [sp, #32]
 80085bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80085c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80085c4:	f000 ff44 	bl	8009450 <nan>
 80085c8:	f996 3000 	ldrsb.w	r3, [r6]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	ed8d 0b06 	vstr	d0, [sp, #24]
 80085d2:	d104      	bne.n	80085de <asin+0x76>
 80085d4:	f7ff ff8a 	bl	80084ec <__errno>
 80085d8:	2321      	movs	r3, #33	; 0x21
 80085da:	6003      	str	r3, [r0, #0]
 80085dc:	e004      	b.n	80085e8 <asin+0x80>
 80085de:	4668      	mov	r0, sp
 80085e0:	f000 ff33 	bl	800944a <matherr>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d0f5      	beq.n	80085d4 <asin+0x6c>
 80085e8:	9b08      	ldr	r3, [sp, #32]
 80085ea:	b11b      	cbz	r3, 80085f4 <asin+0x8c>
 80085ec:	f7ff ff7e 	bl	80084ec <__errno>
 80085f0:	9b08      	ldr	r3, [sp, #32]
 80085f2:	6003      	str	r3, [r0, #0]
 80085f4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80085f8:	eeb0 0a48 	vmov.f32	s0, s16
 80085fc:	eef0 0a68 	vmov.f32	s1, s17
 8008600:	b00b      	add	sp, #44	; 0x2c
 8008602:	ecbd 8b02 	vpop	{d8}
 8008606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008608:	20000084 	.word	0x20000084
 800860c:	3ff00000 	.word	0x3ff00000
 8008610:	08009519 	.word	0x08009519
 8008614:	08009510 	.word	0x08009510

08008618 <atan2>:
 8008618:	f000 bace 	b.w	8008bb8 <__ieee754_atan2>

0800861c <fmod>:
 800861c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008620:	ed2d 8b02 	vpush	{d8}
 8008624:	b08b      	sub	sp, #44	; 0x2c
 8008626:	ec55 4b10 	vmov	r4, r5, d0
 800862a:	ec57 6b11 	vmov	r6, r7, d1
 800862e:	f000 fba1 	bl	8008d74 <__ieee754_fmod>
 8008632:	4b2a      	ldr	r3, [pc, #168]	; (80086dc <fmod+0xc0>)
 8008634:	eeb0 8a40 	vmov.f32	s16, s0
 8008638:	eef0 8a60 	vmov.f32	s17, s1
 800863c:	f993 8000 	ldrsb.w	r8, [r3]
 8008640:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008644:	d030      	beq.n	80086a8 <fmod+0x8c>
 8008646:	4632      	mov	r2, r6
 8008648:	463b      	mov	r3, r7
 800864a:	4630      	mov	r0, r6
 800864c:	4639      	mov	r1, r7
 800864e:	f7f8 fa25 	bl	8000a9c <__aeabi_dcmpun>
 8008652:	bb48      	cbnz	r0, 80086a8 <fmod+0x8c>
 8008654:	4622      	mov	r2, r4
 8008656:	462b      	mov	r3, r5
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f8 fa1e 	bl	8000a9c <__aeabi_dcmpun>
 8008660:	4681      	mov	r9, r0
 8008662:	bb08      	cbnz	r0, 80086a8 <fmod+0x8c>
 8008664:	2200      	movs	r2, #0
 8008666:	2300      	movs	r3, #0
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f8 f9e4 	bl	8000a38 <__aeabi_dcmpeq>
 8008670:	b1d0      	cbz	r0, 80086a8 <fmod+0x8c>
 8008672:	2301      	movs	r3, #1
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <fmod+0xc4>)
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800867e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008682:	f8cd 9020 	str.w	r9, [sp, #32]
 8008686:	f1b8 0f00 	cmp.w	r8, #0
 800868a:	d116      	bne.n	80086ba <fmod+0x9e>
 800868c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008690:	4668      	mov	r0, sp
 8008692:	f000 feda 	bl	800944a <matherr>
 8008696:	b1d8      	cbz	r0, 80086d0 <fmod+0xb4>
 8008698:	9b08      	ldr	r3, [sp, #32]
 800869a:	b11b      	cbz	r3, 80086a4 <fmod+0x88>
 800869c:	f7ff ff26 	bl	80084ec <__errno>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	6003      	str	r3, [r0, #0]
 80086a4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80086a8:	eeb0 0a48 	vmov.f32	s0, s16
 80086ac:	eef0 0a68 	vmov.f32	s1, s17
 80086b0:	b00b      	add	sp, #44	; 0x2c
 80086b2:	ecbd 8b02 	vpop	{d8}
 80086b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ba:	2200      	movs	r2, #0
 80086bc:	2300      	movs	r3, #0
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	f7f8 f87b 	bl	80007bc <__aeabi_ddiv>
 80086c6:	f1b8 0f02 	cmp.w	r8, #2
 80086ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086ce:	d1df      	bne.n	8008690 <fmod+0x74>
 80086d0:	f7ff ff0c 	bl	80084ec <__errno>
 80086d4:	2321      	movs	r3, #33	; 0x21
 80086d6:	6003      	str	r3, [r0, #0]
 80086d8:	e7de      	b.n	8008698 <fmod+0x7c>
 80086da:	bf00      	nop
 80086dc:	20000084 	.word	0x20000084
 80086e0:	08009515 	.word	0x08009515

080086e4 <sqrt>:
 80086e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086e8:	ed2d 8b02 	vpush	{d8}
 80086ec:	b08b      	sub	sp, #44	; 0x2c
 80086ee:	ec55 4b10 	vmov	r4, r5, d0
 80086f2:	f000 fc51 	bl	8008f98 <__ieee754_sqrt>
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <sqrt+0xac>)
 80086f8:	eeb0 8a40 	vmov.f32	s16, s0
 80086fc:	eef0 8a60 	vmov.f32	s17, s1
 8008700:	f993 6000 	ldrsb.w	r6, [r3]
 8008704:	1c73      	adds	r3, r6, #1
 8008706:	d02a      	beq.n	800875e <sqrt+0x7a>
 8008708:	4622      	mov	r2, r4
 800870a:	462b      	mov	r3, r5
 800870c:	4620      	mov	r0, r4
 800870e:	4629      	mov	r1, r5
 8008710:	f7f8 f9c4 	bl	8000a9c <__aeabi_dcmpun>
 8008714:	4607      	mov	r7, r0
 8008716:	bb10      	cbnz	r0, 800875e <sqrt+0x7a>
 8008718:	f04f 0800 	mov.w	r8, #0
 800871c:	f04f 0900 	mov.w	r9, #0
 8008720:	4642      	mov	r2, r8
 8008722:	464b      	mov	r3, r9
 8008724:	4620      	mov	r0, r4
 8008726:	4629      	mov	r1, r5
 8008728:	f7f8 f990 	bl	8000a4c <__aeabi_dcmplt>
 800872c:	b1b8      	cbz	r0, 800875e <sqrt+0x7a>
 800872e:	2301      	movs	r3, #1
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	4b18      	ldr	r3, [pc, #96]	; (8008794 <sqrt+0xb0>)
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	9708      	str	r7, [sp, #32]
 8008738:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800873c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008740:	b9b6      	cbnz	r6, 8008770 <sqrt+0x8c>
 8008742:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008746:	4668      	mov	r0, sp
 8008748:	f000 fe7f 	bl	800944a <matherr>
 800874c:	b1d0      	cbz	r0, 8008784 <sqrt+0xa0>
 800874e:	9b08      	ldr	r3, [sp, #32]
 8008750:	b11b      	cbz	r3, 800875a <sqrt+0x76>
 8008752:	f7ff fecb 	bl	80084ec <__errno>
 8008756:	9b08      	ldr	r3, [sp, #32]
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800875e:	eeb0 0a48 	vmov.f32	s0, s16
 8008762:	eef0 0a68 	vmov.f32	s1, s17
 8008766:	b00b      	add	sp, #44	; 0x2c
 8008768:	ecbd 8b02 	vpop	{d8}
 800876c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f820 	bl	80007bc <__aeabi_ddiv>
 800877c:	2e02      	cmp	r6, #2
 800877e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008782:	d1e0      	bne.n	8008746 <sqrt+0x62>
 8008784:	f7ff feb2 	bl	80084ec <__errno>
 8008788:	2321      	movs	r3, #33	; 0x21
 800878a:	6003      	str	r3, [r0, #0]
 800878c:	e7df      	b.n	800874e <sqrt+0x6a>
 800878e:	bf00      	nop
 8008790:	20000084 	.word	0x20000084
 8008794:	0800951a 	.word	0x0800951a

08008798 <__ieee754_asin>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	ec55 4b10 	vmov	r4, r5, d0
 80087a0:	4bcb      	ldr	r3, [pc, #812]	; (8008ad0 <__ieee754_asin+0x338>)
 80087a2:	b087      	sub	sp, #28
 80087a4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80087a8:	429f      	cmp	r7, r3
 80087aa:	9501      	str	r5, [sp, #4]
 80087ac:	dd31      	ble.n	8008812 <__ieee754_asin+0x7a>
 80087ae:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80087b2:	ee10 3a10 	vmov	r3, s0
 80087b6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80087ba:	433b      	orrs	r3, r7
 80087bc:	d117      	bne.n	80087ee <__ieee754_asin+0x56>
 80087be:	a3aa      	add	r3, pc, #680	; (adr r3, 8008a68 <__ieee754_asin+0x2d0>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	ee10 0a10 	vmov	r0, s0
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f7 fecd 	bl	8000568 <__aeabi_dmul>
 80087ce:	a3a8      	add	r3, pc, #672	; (adr r3, 8008a70 <__ieee754_asin+0x2d8>)
 80087d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f7f7 fec4 	bl	8000568 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f7 fd08 	bl	80001fc <__adddf3>
 80087ec:	e00a      	b.n	8008804 <__ieee754_asin+0x6c>
 80087ee:	ee10 2a10 	vmov	r2, s0
 80087f2:	462b      	mov	r3, r5
 80087f4:	4620      	mov	r0, r4
 80087f6:	4629      	mov	r1, r5
 80087f8:	f7f7 fcfe 	bl	80001f8 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	f7f7 ffdc 	bl	80007bc <__aeabi_ddiv>
 8008804:	4604      	mov	r4, r0
 8008806:	460d      	mov	r5, r1
 8008808:	ec45 4b10 	vmov	d0, r4, r5
 800880c:	b007      	add	sp, #28
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	4bb0      	ldr	r3, [pc, #704]	; (8008ad4 <__ieee754_asin+0x33c>)
 8008814:	429f      	cmp	r7, r3
 8008816:	dc11      	bgt.n	800883c <__ieee754_asin+0xa4>
 8008818:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800881c:	f280 80ae 	bge.w	800897c <__ieee754_asin+0x1e4>
 8008820:	a395      	add	r3, pc, #596	; (adr r3, 8008a78 <__ieee754_asin+0x2e0>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	ee10 0a10 	vmov	r0, s0
 800882a:	4629      	mov	r1, r5
 800882c:	f7f7 fce6 	bl	80001fc <__adddf3>
 8008830:	2200      	movs	r2, #0
 8008832:	4ba9      	ldr	r3, [pc, #676]	; (8008ad8 <__ieee754_asin+0x340>)
 8008834:	f7f8 f928 	bl	8000a88 <__aeabi_dcmpgt>
 8008838:	2800      	cmp	r0, #0
 800883a:	d1e5      	bne.n	8008808 <__ieee754_asin+0x70>
 800883c:	ec45 4b10 	vmov	d0, r4, r5
 8008840:	f000 fdfa 	bl	8009438 <fabs>
 8008844:	2000      	movs	r0, #0
 8008846:	ec53 2b10 	vmov	r2, r3, d0
 800884a:	49a3      	ldr	r1, [pc, #652]	; (8008ad8 <__ieee754_asin+0x340>)
 800884c:	f7f7 fcd4 	bl	80001f8 <__aeabi_dsub>
 8008850:	2200      	movs	r2, #0
 8008852:	4ba2      	ldr	r3, [pc, #648]	; (8008adc <__ieee754_asin+0x344>)
 8008854:	f7f7 fe88 	bl	8000568 <__aeabi_dmul>
 8008858:	a389      	add	r3, pc, #548	; (adr r3, 8008a80 <__ieee754_asin+0x2e8>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	f7f7 fe81 	bl	8000568 <__aeabi_dmul>
 8008866:	a388      	add	r3, pc, #544	; (adr r3, 8008a88 <__ieee754_asin+0x2f0>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fcc6 	bl	80001fc <__adddf3>
 8008870:	4622      	mov	r2, r4
 8008872:	462b      	mov	r3, r5
 8008874:	f7f7 fe78 	bl	8000568 <__aeabi_dmul>
 8008878:	a385      	add	r3, pc, #532	; (adr r3, 8008a90 <__ieee754_asin+0x2f8>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fcbb 	bl	80001f8 <__aeabi_dsub>
 8008882:	4622      	mov	r2, r4
 8008884:	462b      	mov	r3, r5
 8008886:	f7f7 fe6f 	bl	8000568 <__aeabi_dmul>
 800888a:	a383      	add	r3, pc, #524	; (adr r3, 8008a98 <__ieee754_asin+0x300>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f7f7 fcb4 	bl	80001fc <__adddf3>
 8008894:	4622      	mov	r2, r4
 8008896:	462b      	mov	r3, r5
 8008898:	f7f7 fe66 	bl	8000568 <__aeabi_dmul>
 800889c:	a380      	add	r3, pc, #512	; (adr r3, 8008aa0 <__ieee754_asin+0x308>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fca9 	bl	80001f8 <__aeabi_dsub>
 80088a6:	4622      	mov	r2, r4
 80088a8:	462b      	mov	r3, r5
 80088aa:	f7f7 fe5d 	bl	8000568 <__aeabi_dmul>
 80088ae:	a37e      	add	r3, pc, #504	; (adr r3, 8008aa8 <__ieee754_asin+0x310>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fca2 	bl	80001fc <__adddf3>
 80088b8:	4622      	mov	r2, r4
 80088ba:	462b      	mov	r3, r5
 80088bc:	f7f7 fe54 	bl	8000568 <__aeabi_dmul>
 80088c0:	a37b      	add	r3, pc, #492	; (adr r3, 8008ab0 <__ieee754_asin+0x318>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	4680      	mov	r8, r0
 80088c8:	4689      	mov	r9, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fe4b 	bl	8000568 <__aeabi_dmul>
 80088d2:	a379      	add	r3, pc, #484	; (adr r3, 8008ab8 <__ieee754_asin+0x320>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fc8e 	bl	80001f8 <__aeabi_dsub>
 80088dc:	4622      	mov	r2, r4
 80088de:	462b      	mov	r3, r5
 80088e0:	f7f7 fe42 	bl	8000568 <__aeabi_dmul>
 80088e4:	a376      	add	r3, pc, #472	; (adr r3, 8008ac0 <__ieee754_asin+0x328>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fc87 	bl	80001fc <__adddf3>
 80088ee:	4622      	mov	r2, r4
 80088f0:	462b      	mov	r3, r5
 80088f2:	f7f7 fe39 	bl	8000568 <__aeabi_dmul>
 80088f6:	a374      	add	r3, pc, #464	; (adr r3, 8008ac8 <__ieee754_asin+0x330>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f7f7 fc7c 	bl	80001f8 <__aeabi_dsub>
 8008900:	4622      	mov	r2, r4
 8008902:	462b      	mov	r3, r5
 8008904:	f7f7 fe30 	bl	8000568 <__aeabi_dmul>
 8008908:	4b73      	ldr	r3, [pc, #460]	; (8008ad8 <__ieee754_asin+0x340>)
 800890a:	2200      	movs	r2, #0
 800890c:	f7f7 fc76 	bl	80001fc <__adddf3>
 8008910:	ec45 4b10 	vmov	d0, r4, r5
 8008914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008918:	f000 fb3e 	bl	8008f98 <__ieee754_sqrt>
 800891c:	4b70      	ldr	r3, [pc, #448]	; (8008ae0 <__ieee754_asin+0x348>)
 800891e:	429f      	cmp	r7, r3
 8008920:	ec5b ab10 	vmov	sl, fp, d0
 8008924:	f340 80de 	ble.w	8008ae4 <__ieee754_asin+0x34c>
 8008928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800892c:	4640      	mov	r0, r8
 800892e:	4649      	mov	r1, r9
 8008930:	f7f7 ff44 	bl	80007bc <__aeabi_ddiv>
 8008934:	4652      	mov	r2, sl
 8008936:	465b      	mov	r3, fp
 8008938:	f7f7 fe16 	bl	8000568 <__aeabi_dmul>
 800893c:	4652      	mov	r2, sl
 800893e:	465b      	mov	r3, fp
 8008940:	f7f7 fc5c 	bl	80001fc <__adddf3>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	f7f7 fc58 	bl	80001fc <__adddf3>
 800894c:	a348      	add	r3, pc, #288	; (adr r3, 8008a70 <__ieee754_asin+0x2d8>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fc51 	bl	80001f8 <__aeabi_dsub>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	a143      	add	r1, pc, #268	; (adr r1, 8008a68 <__ieee754_asin+0x2d0>)
 800895c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008960:	f7f7 fc4a 	bl	80001f8 <__aeabi_dsub>
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bfdc      	itt	le
 800896a:	4602      	movle	r2, r0
 800896c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	bfdc      	itt	le
 8008976:	4614      	movle	r4, r2
 8008978:	461d      	movle	r5, r3
 800897a:	e745      	b.n	8008808 <__ieee754_asin+0x70>
 800897c:	ee10 2a10 	vmov	r2, s0
 8008980:	ee10 0a10 	vmov	r0, s0
 8008984:	462b      	mov	r3, r5
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fdee 	bl	8000568 <__aeabi_dmul>
 800898c:	a33c      	add	r3, pc, #240	; (adr r3, 8008a80 <__ieee754_asin+0x2e8>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	4606      	mov	r6, r0
 8008994:	460f      	mov	r7, r1
 8008996:	f7f7 fde7 	bl	8000568 <__aeabi_dmul>
 800899a:	a33b      	add	r3, pc, #236	; (adr r3, 8008a88 <__ieee754_asin+0x2f0>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fc2c 	bl	80001fc <__adddf3>
 80089a4:	4632      	mov	r2, r6
 80089a6:	463b      	mov	r3, r7
 80089a8:	f7f7 fdde 	bl	8000568 <__aeabi_dmul>
 80089ac:	a338      	add	r3, pc, #224	; (adr r3, 8008a90 <__ieee754_asin+0x2f8>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 fc21 	bl	80001f8 <__aeabi_dsub>
 80089b6:	4632      	mov	r2, r6
 80089b8:	463b      	mov	r3, r7
 80089ba:	f7f7 fdd5 	bl	8000568 <__aeabi_dmul>
 80089be:	a336      	add	r3, pc, #216	; (adr r3, 8008a98 <__ieee754_asin+0x300>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	f7f7 fc1a 	bl	80001fc <__adddf3>
 80089c8:	4632      	mov	r2, r6
 80089ca:	463b      	mov	r3, r7
 80089cc:	f7f7 fdcc 	bl	8000568 <__aeabi_dmul>
 80089d0:	a333      	add	r3, pc, #204	; (adr r3, 8008aa0 <__ieee754_asin+0x308>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc0f 	bl	80001f8 <__aeabi_dsub>
 80089da:	4632      	mov	r2, r6
 80089dc:	463b      	mov	r3, r7
 80089de:	f7f7 fdc3 	bl	8000568 <__aeabi_dmul>
 80089e2:	a331      	add	r3, pc, #196	; (adr r3, 8008aa8 <__ieee754_asin+0x310>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fc08 	bl	80001fc <__adddf3>
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	f7f7 fdba 	bl	8000568 <__aeabi_dmul>
 80089f4:	a32e      	add	r3, pc, #184	; (adr r3, 8008ab0 <__ieee754_asin+0x318>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	4680      	mov	r8, r0
 80089fc:	4689      	mov	r9, r1
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f7 fdb1 	bl	8000568 <__aeabi_dmul>
 8008a06:	a32c      	add	r3, pc, #176	; (adr r3, 8008ab8 <__ieee754_asin+0x320>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f7 fbf4 	bl	80001f8 <__aeabi_dsub>
 8008a10:	4632      	mov	r2, r6
 8008a12:	463b      	mov	r3, r7
 8008a14:	f7f7 fda8 	bl	8000568 <__aeabi_dmul>
 8008a18:	a329      	add	r3, pc, #164	; (adr r3, 8008ac0 <__ieee754_asin+0x328>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fbed 	bl	80001fc <__adddf3>
 8008a22:	4632      	mov	r2, r6
 8008a24:	463b      	mov	r3, r7
 8008a26:	f7f7 fd9f 	bl	8000568 <__aeabi_dmul>
 8008a2a:	a327      	add	r3, pc, #156	; (adr r3, 8008ac8 <__ieee754_asin+0x330>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fbe2 	bl	80001f8 <__aeabi_dsub>
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	f7f7 fd96 	bl	8000568 <__aeabi_dmul>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4b26      	ldr	r3, [pc, #152]	; (8008ad8 <__ieee754_asin+0x340>)
 8008a40:	f7f7 fbdc 	bl	80001fc <__adddf3>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4640      	mov	r0, r8
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	f7f7 feb6 	bl	80007bc <__aeabi_ddiv>
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fd88 	bl	8000568 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	4629      	mov	r1, r5
 8008a60:	e6c2      	b.n	80087e8 <__ieee754_asin+0x50>
 8008a62:	bf00      	nop
 8008a64:	f3af 8000 	nop.w
 8008a68:	54442d18 	.word	0x54442d18
 8008a6c:	3ff921fb 	.word	0x3ff921fb
 8008a70:	33145c07 	.word	0x33145c07
 8008a74:	3c91a626 	.word	0x3c91a626
 8008a78:	8800759c 	.word	0x8800759c
 8008a7c:	7e37e43c 	.word	0x7e37e43c
 8008a80:	0dfdf709 	.word	0x0dfdf709
 8008a84:	3f023de1 	.word	0x3f023de1
 8008a88:	7501b288 	.word	0x7501b288
 8008a8c:	3f49efe0 	.word	0x3f49efe0
 8008a90:	b5688f3b 	.word	0xb5688f3b
 8008a94:	3fa48228 	.word	0x3fa48228
 8008a98:	0e884455 	.word	0x0e884455
 8008a9c:	3fc9c155 	.word	0x3fc9c155
 8008aa0:	03eb6f7d 	.word	0x03eb6f7d
 8008aa4:	3fd4d612 	.word	0x3fd4d612
 8008aa8:	55555555 	.word	0x55555555
 8008aac:	3fc55555 	.word	0x3fc55555
 8008ab0:	b12e9282 	.word	0xb12e9282
 8008ab4:	3fb3b8c5 	.word	0x3fb3b8c5
 8008ab8:	1b8d0159 	.word	0x1b8d0159
 8008abc:	3fe6066c 	.word	0x3fe6066c
 8008ac0:	9c598ac8 	.word	0x9c598ac8
 8008ac4:	40002ae5 	.word	0x40002ae5
 8008ac8:	1c8a2d4b 	.word	0x1c8a2d4b
 8008acc:	40033a27 	.word	0x40033a27
 8008ad0:	3fefffff 	.word	0x3fefffff
 8008ad4:	3fdfffff 	.word	0x3fdfffff
 8008ad8:	3ff00000 	.word	0x3ff00000
 8008adc:	3fe00000 	.word	0x3fe00000
 8008ae0:	3fef3332 	.word	0x3fef3332
 8008ae4:	ee10 2a10 	vmov	r2, s0
 8008ae8:	ee10 0a10 	vmov	r0, s0
 8008aec:	465b      	mov	r3, fp
 8008aee:	4659      	mov	r1, fp
 8008af0:	f7f7 fb84 	bl	80001fc <__adddf3>
 8008af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008afc:	4640      	mov	r0, r8
 8008afe:	4649      	mov	r1, r9
 8008b00:	f7f7 fe5c 	bl	80007bc <__aeabi_ddiv>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b0c:	f7f7 fd2c 	bl	8000568 <__aeabi_dmul>
 8008b10:	2600      	movs	r6, #0
 8008b12:	4680      	mov	r8, r0
 8008b14:	4689      	mov	r9, r1
 8008b16:	4632      	mov	r2, r6
 8008b18:	465b      	mov	r3, fp
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4659      	mov	r1, fp
 8008b1e:	f7f7 fd23 	bl	8000568 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fb65 	bl	80001f8 <__aeabi_dsub>
 8008b2e:	4632      	mov	r2, r6
 8008b30:	4604      	mov	r4, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	465b      	mov	r3, fp
 8008b36:	4650      	mov	r0, sl
 8008b38:	4659      	mov	r1, fp
 8008b3a:	f7f7 fb5f 	bl	80001fc <__adddf3>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4620      	mov	r0, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7f7 fe39 	bl	80007bc <__aeabi_ddiv>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	f7f7 fb55 	bl	80001fc <__adddf3>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	a114      	add	r1, pc, #80	; (adr r1, 8008ba8 <__ieee754_asin+0x410>)
 8008b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b5c:	f7f7 fb4c 	bl	80001f8 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4640      	mov	r0, r8
 8008b66:	4649      	mov	r1, r9
 8008b68:	f7f7 fb46 	bl	80001f8 <__aeabi_dsub>
 8008b6c:	465f      	mov	r7, fp
 8008b6e:	4604      	mov	r4, r0
 8008b70:	460d      	mov	r5, r1
 8008b72:	4632      	mov	r2, r6
 8008b74:	465b      	mov	r3, fp
 8008b76:	4630      	mov	r0, r6
 8008b78:	4639      	mov	r1, r7
 8008b7a:	f7f7 fb3f 	bl	80001fc <__adddf3>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	a10b      	add	r1, pc, #44	; (adr r1, 8008bb0 <__ieee754_asin+0x418>)
 8008b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b88:	f7f7 fb36 	bl	80001f8 <__aeabi_dsub>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4620      	mov	r0, r4
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fb30 	bl	80001f8 <__aeabi_dsub>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	a104      	add	r1, pc, #16	; (adr r1, 8008bb0 <__ieee754_asin+0x418>)
 8008b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ba2:	e6dd      	b.n	8008960 <__ieee754_asin+0x1c8>
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	33145c07 	.word	0x33145c07
 8008bac:	3c91a626 	.word	0x3c91a626
 8008bb0:	54442d18 	.word	0x54442d18
 8008bb4:	3fe921fb 	.word	0x3fe921fb

08008bb8 <__ieee754_atan2>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	ec57 6b11 	vmov	r6, r7, d1
 8008bc0:	4273      	negs	r3, r6
 8008bc2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008bc6:	4333      	orrs	r3, r6
 8008bc8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008d70 <__ieee754_atan2+0x1b8>
 8008bcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008bd0:	4573      	cmp	r3, lr
 8008bd2:	ec51 0b10 	vmov	r0, r1, d0
 8008bd6:	ee11 8a10 	vmov	r8, s2
 8008bda:	d80a      	bhi.n	8008bf2 <__ieee754_atan2+0x3a>
 8008bdc:	4244      	negs	r4, r0
 8008bde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008be2:	4304      	orrs	r4, r0
 8008be4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008be8:	4574      	cmp	r4, lr
 8008bea:	468c      	mov	ip, r1
 8008bec:	ee10 9a10 	vmov	r9, s0
 8008bf0:	d907      	bls.n	8008c02 <__ieee754_atan2+0x4a>
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	f7f7 fb01 	bl	80001fc <__adddf3>
 8008bfa:	ec41 0b10 	vmov	d0, r0, r1
 8008bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008c06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c0a:	4334      	orrs	r4, r6
 8008c0c:	d103      	bne.n	8008c16 <__ieee754_atan2+0x5e>
 8008c0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c12:	f000 ba71 	b.w	80090f8 <atan>
 8008c16:	17bc      	asrs	r4, r7, #30
 8008c18:	f004 0402 	and.w	r4, r4, #2
 8008c1c:	ea53 0909 	orrs.w	r9, r3, r9
 8008c20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008c24:	d107      	bne.n	8008c36 <__ieee754_atan2+0x7e>
 8008c26:	2c02      	cmp	r4, #2
 8008c28:	d073      	beq.n	8008d12 <__ieee754_atan2+0x15a>
 8008c2a:	2c03      	cmp	r4, #3
 8008c2c:	d1e5      	bne.n	8008bfa <__ieee754_atan2+0x42>
 8008c2e:	a13e      	add	r1, pc, #248	; (adr r1, 8008d28 <__ieee754_atan2+0x170>)
 8008c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c34:	e7e1      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c36:	ea52 0808 	orrs.w	r8, r2, r8
 8008c3a:	d106      	bne.n	8008c4a <__ieee754_atan2+0x92>
 8008c3c:	f1bc 0f00 	cmp.w	ip, #0
 8008c40:	da6b      	bge.n	8008d1a <__ieee754_atan2+0x162>
 8008c42:	a13b      	add	r1, pc, #236	; (adr r1, 8008d30 <__ieee754_atan2+0x178>)
 8008c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c48:	e7d7      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c4a:	4572      	cmp	r2, lr
 8008c4c:	d120      	bne.n	8008c90 <__ieee754_atan2+0xd8>
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d111      	bne.n	8008c76 <__ieee754_atan2+0xbe>
 8008c52:	2c02      	cmp	r4, #2
 8008c54:	d007      	beq.n	8008c66 <__ieee754_atan2+0xae>
 8008c56:	2c03      	cmp	r4, #3
 8008c58:	d009      	beq.n	8008c6e <__ieee754_atan2+0xb6>
 8008c5a:	2c01      	cmp	r4, #1
 8008c5c:	d155      	bne.n	8008d0a <__ieee754_atan2+0x152>
 8008c5e:	a136      	add	r1, pc, #216	; (adr r1, 8008d38 <__ieee754_atan2+0x180>)
 8008c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c64:	e7c9      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c66:	a136      	add	r1, pc, #216	; (adr r1, 8008d40 <__ieee754_atan2+0x188>)
 8008c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c6c:	e7c5      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c6e:	a136      	add	r1, pc, #216	; (adr r1, 8008d48 <__ieee754_atan2+0x190>)
 8008c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c74:	e7c1      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c76:	2c02      	cmp	r4, #2
 8008c78:	d04b      	beq.n	8008d12 <__ieee754_atan2+0x15a>
 8008c7a:	2c03      	cmp	r4, #3
 8008c7c:	d0d7      	beq.n	8008c2e <__ieee754_atan2+0x76>
 8008c7e:	2c01      	cmp	r4, #1
 8008c80:	f04f 0000 	mov.w	r0, #0
 8008c84:	d102      	bne.n	8008c8c <__ieee754_atan2+0xd4>
 8008c86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c8a:	e7b6      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	e7b4      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008c90:	4573      	cmp	r3, lr
 8008c92:	d0d3      	beq.n	8008c3c <__ieee754_atan2+0x84>
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	151b      	asrs	r3, r3, #20
 8008c98:	2b3c      	cmp	r3, #60	; 0x3c
 8008c9a:	dc1e      	bgt.n	8008cda <__ieee754_atan2+0x122>
 8008c9c:	2f00      	cmp	r7, #0
 8008c9e:	da01      	bge.n	8008ca4 <__ieee754_atan2+0xec>
 8008ca0:	333c      	adds	r3, #60	; 0x3c
 8008ca2:	db1e      	blt.n	8008ce2 <__ieee754_atan2+0x12a>
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	f7f7 fd88 	bl	80007bc <__aeabi_ddiv>
 8008cac:	ec41 0b10 	vmov	d0, r0, r1
 8008cb0:	f000 fbc2 	bl	8009438 <fabs>
 8008cb4:	f000 fa20 	bl	80090f8 <atan>
 8008cb8:	ec51 0b10 	vmov	r0, r1, d0
 8008cbc:	2c01      	cmp	r4, #1
 8008cbe:	d013      	beq.n	8008ce8 <__ieee754_atan2+0x130>
 8008cc0:	2c02      	cmp	r4, #2
 8008cc2:	d015      	beq.n	8008cf0 <__ieee754_atan2+0x138>
 8008cc4:	2c00      	cmp	r4, #0
 8008cc6:	d098      	beq.n	8008bfa <__ieee754_atan2+0x42>
 8008cc8:	a321      	add	r3, pc, #132	; (adr r3, 8008d50 <__ieee754_atan2+0x198>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fa93 	bl	80001f8 <__aeabi_dsub>
 8008cd2:	a321      	add	r3, pc, #132	; (adr r3, 8008d58 <__ieee754_atan2+0x1a0>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	e014      	b.n	8008d04 <__ieee754_atan2+0x14c>
 8008cda:	a121      	add	r1, pc, #132	; (adr r1, 8008d60 <__ieee754_atan2+0x1a8>)
 8008cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce0:	e7ec      	b.n	8008cbc <__ieee754_atan2+0x104>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	e7e9      	b.n	8008cbc <__ieee754_atan2+0x104>
 8008ce8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cec:	4619      	mov	r1, r3
 8008cee:	e784      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008cf0:	a317      	add	r3, pc, #92	; (adr r3, 8008d50 <__ieee754_atan2+0x198>)
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f7f7 fa7f 	bl	80001f8 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	a116      	add	r1, pc, #88	; (adr r1, 8008d58 <__ieee754_atan2+0x1a0>)
 8008d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d04:	f7f7 fa78 	bl	80001f8 <__aeabi_dsub>
 8008d08:	e777      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008d0a:	a117      	add	r1, pc, #92	; (adr r1, 8008d68 <__ieee754_atan2+0x1b0>)
 8008d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d10:	e773      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008d12:	a111      	add	r1, pc, #68	; (adr r1, 8008d58 <__ieee754_atan2+0x1a0>)
 8008d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d18:	e76f      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008d1a:	a111      	add	r1, pc, #68	; (adr r1, 8008d60 <__ieee754_atan2+0x1a8>)
 8008d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d20:	e76b      	b.n	8008bfa <__ieee754_atan2+0x42>
 8008d22:	bf00      	nop
 8008d24:	f3af 8000 	nop.w
 8008d28:	54442d18 	.word	0x54442d18
 8008d2c:	c00921fb 	.word	0xc00921fb
 8008d30:	54442d18 	.word	0x54442d18
 8008d34:	bff921fb 	.word	0xbff921fb
 8008d38:	54442d18 	.word	0x54442d18
 8008d3c:	bfe921fb 	.word	0xbfe921fb
 8008d40:	7f3321d2 	.word	0x7f3321d2
 8008d44:	4002d97c 	.word	0x4002d97c
 8008d48:	7f3321d2 	.word	0x7f3321d2
 8008d4c:	c002d97c 	.word	0xc002d97c
 8008d50:	33145c07 	.word	0x33145c07
 8008d54:	3ca1a626 	.word	0x3ca1a626
 8008d58:	54442d18 	.word	0x54442d18
 8008d5c:	400921fb 	.word	0x400921fb
 8008d60:	54442d18 	.word	0x54442d18
 8008d64:	3ff921fb 	.word	0x3ff921fb
 8008d68:	54442d18 	.word	0x54442d18
 8008d6c:	3fe921fb 	.word	0x3fe921fb
 8008d70:	7ff00000 	.word	0x7ff00000

08008d74 <__ieee754_fmod>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	ec53 2b11 	vmov	r2, r3, d1
 8008d7c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008d80:	ea5e 0402 	orrs.w	r4, lr, r2
 8008d84:	ec51 0b10 	vmov	r0, r1, d0
 8008d88:	461e      	mov	r6, r3
 8008d8a:	ee11 5a10 	vmov	r5, s2
 8008d8e:	4694      	mov	ip, r2
 8008d90:	d00c      	beq.n	8008dac <__ieee754_fmod+0x38>
 8008d92:	4c7a      	ldr	r4, [pc, #488]	; (8008f7c <__ieee754_fmod+0x208>)
 8008d94:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008d98:	45a0      	cmp	r8, r4
 8008d9a:	4689      	mov	r9, r1
 8008d9c:	dc06      	bgt.n	8008dac <__ieee754_fmod+0x38>
 8008d9e:	4254      	negs	r4, r2
 8008da0:	4314      	orrs	r4, r2
 8008da2:	4f77      	ldr	r7, [pc, #476]	; (8008f80 <__ieee754_fmod+0x20c>)
 8008da4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008da8:	42bc      	cmp	r4, r7
 8008daa:	d909      	bls.n	8008dc0 <__ieee754_fmod+0x4c>
 8008dac:	f7f7 fbdc 	bl	8000568 <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	f7f7 fd02 	bl	80007bc <__aeabi_ddiv>
 8008db8:	ec41 0b10 	vmov	d0, r0, r1
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc0:	45f0      	cmp	r8, lr
 8008dc2:	ee10 2a10 	vmov	r2, s0
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8008dcc:	dc0a      	bgt.n	8008de4 <__ieee754_fmod+0x70>
 8008dce:	dbf3      	blt.n	8008db8 <__ieee754_fmod+0x44>
 8008dd0:	42a8      	cmp	r0, r5
 8008dd2:	d3f1      	bcc.n	8008db8 <__ieee754_fmod+0x44>
 8008dd4:	d106      	bne.n	8008de4 <__ieee754_fmod+0x70>
 8008dd6:	496b      	ldr	r1, [pc, #428]	; (8008f84 <__ieee754_fmod+0x210>)
 8008dd8:	0fe4      	lsrs	r4, r4, #31
 8008dda:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008dde:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008de2:	e7e9      	b.n	8008db8 <__ieee754_fmod+0x44>
 8008de4:	4b68      	ldr	r3, [pc, #416]	; (8008f88 <__ieee754_fmod+0x214>)
 8008de6:	4598      	cmp	r8, r3
 8008de8:	dc49      	bgt.n	8008e7e <__ieee754_fmod+0x10a>
 8008dea:	f1b8 0f00 	cmp.w	r8, #0
 8008dee:	d13d      	bne.n	8008e6c <__ieee754_fmod+0xf8>
 8008df0:	4866      	ldr	r0, [pc, #408]	; (8008f8c <__ieee754_fmod+0x218>)
 8008df2:	4611      	mov	r1, r2
 8008df4:	2900      	cmp	r1, #0
 8008df6:	dc36      	bgt.n	8008e66 <__ieee754_fmod+0xf2>
 8008df8:	459e      	cmp	lr, r3
 8008dfa:	dc51      	bgt.n	8008ea0 <__ieee754_fmod+0x12c>
 8008dfc:	f1be 0f00 	cmp.w	lr, #0
 8008e00:	d145      	bne.n	8008e8e <__ieee754_fmod+0x11a>
 8008e02:	4b62      	ldr	r3, [pc, #392]	; (8008f8c <__ieee754_fmod+0x218>)
 8008e04:	4629      	mov	r1, r5
 8008e06:	2900      	cmp	r1, #0
 8008e08:	dc3e      	bgt.n	8008e88 <__ieee754_fmod+0x114>
 8008e0a:	4961      	ldr	r1, [pc, #388]	; (8008f90 <__ieee754_fmod+0x21c>)
 8008e0c:	4288      	cmp	r0, r1
 8008e0e:	db4c      	blt.n	8008eaa <__ieee754_fmod+0x136>
 8008e10:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8008e14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008e18:	4a5d      	ldr	r2, [pc, #372]	; (8008f90 <__ieee754_fmod+0x21c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	db59      	blt.n	8008ed2 <__ieee754_fmod+0x15e>
 8008e1e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008e22:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008e26:	1ac0      	subs	r0, r0, r3
 8008e28:	1b8a      	subs	r2, r1, r6
 8008e2a:	eba7 050c 	sub.w	r5, r7, ip
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d166      	bne.n	8008f00 <__ieee754_fmod+0x18c>
 8008e32:	4567      	cmp	r7, ip
 8008e34:	bf38      	it	cc
 8008e36:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	bfbc      	itt	lt
 8008e3e:	463d      	movlt	r5, r7
 8008e40:	460a      	movlt	r2, r1
 8008e42:	ea52 0105 	orrs.w	r1, r2, r5
 8008e46:	d0c6      	beq.n	8008dd6 <__ieee754_fmod+0x62>
 8008e48:	494f      	ldr	r1, [pc, #316]	; (8008f88 <__ieee754_fmod+0x214>)
 8008e4a:	428a      	cmp	r2, r1
 8008e4c:	dd6d      	ble.n	8008f2a <__ieee754_fmod+0x1b6>
 8008e4e:	4950      	ldr	r1, [pc, #320]	; (8008f90 <__ieee754_fmod+0x21c>)
 8008e50:	428b      	cmp	r3, r1
 8008e52:	db70      	blt.n	8008f36 <__ieee754_fmod+0x1c2>
 8008e54:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8008e58:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8008e5c:	4314      	orrs	r4, r2
 8008e5e:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8008e62:	4628      	mov	r0, r5
 8008e64:	e7a8      	b.n	8008db8 <__ieee754_fmod+0x44>
 8008e66:	3801      	subs	r0, #1
 8008e68:	0049      	lsls	r1, r1, #1
 8008e6a:	e7c3      	b.n	8008df4 <__ieee754_fmod+0x80>
 8008e6c:	4848      	ldr	r0, [pc, #288]	; (8008f90 <__ieee754_fmod+0x21c>)
 8008e6e:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8008e72:	0049      	lsls	r1, r1, #1
 8008e74:	2900      	cmp	r1, #0
 8008e76:	f100 30ff 	add.w	r0, r0, #4294967295
 8008e7a:	dcfa      	bgt.n	8008e72 <__ieee754_fmod+0xfe>
 8008e7c:	e7bc      	b.n	8008df8 <__ieee754_fmod+0x84>
 8008e7e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8008e82:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8008e86:	e7b7      	b.n	8008df8 <__ieee754_fmod+0x84>
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	0049      	lsls	r1, r1, #1
 8008e8c:	e7bb      	b.n	8008e06 <__ieee754_fmod+0x92>
 8008e8e:	4b40      	ldr	r3, [pc, #256]	; (8008f90 <__ieee754_fmod+0x21c>)
 8008e90:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8008e94:	0049      	lsls	r1, r1, #1
 8008e96:	2900      	cmp	r1, #0
 8008e98:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e9c:	dcfa      	bgt.n	8008e94 <__ieee754_fmod+0x120>
 8008e9e:	e7b4      	b.n	8008e0a <__ieee754_fmod+0x96>
 8008ea0:	ea4f 532e 	mov.w	r3, lr, asr #20
 8008ea4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ea8:	e7af      	b.n	8008e0a <__ieee754_fmod+0x96>
 8008eaa:	1a0f      	subs	r7, r1, r0
 8008eac:	2f1f      	cmp	r7, #31
 8008eae:	dc0a      	bgt.n	8008ec6 <__ieee754_fmod+0x152>
 8008eb0:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8008eb4:	fa08 f807 	lsl.w	r8, r8, r7
 8008eb8:	fa22 f101 	lsr.w	r1, r2, r1
 8008ebc:	ea41 0108 	orr.w	r1, r1, r8
 8008ec0:	fa02 f707 	lsl.w	r7, r2, r7
 8008ec4:	e7a8      	b.n	8008e18 <__ieee754_fmod+0xa4>
 8008ec6:	4933      	ldr	r1, [pc, #204]	; (8008f94 <__ieee754_fmod+0x220>)
 8008ec8:	1a09      	subs	r1, r1, r0
 8008eca:	fa02 f101 	lsl.w	r1, r2, r1
 8008ece:	2700      	movs	r7, #0
 8008ed0:	e7a2      	b.n	8008e18 <__ieee754_fmod+0xa4>
 8008ed2:	eba2 0c03 	sub.w	ip, r2, r3
 8008ed6:	f1bc 0f1f 	cmp.w	ip, #31
 8008eda:	dc0a      	bgt.n	8008ef2 <__ieee754_fmod+0x17e>
 8008edc:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8008ee0:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008ee4:	fa25 f606 	lsr.w	r6, r5, r6
 8008ee8:	ea46 060e 	orr.w	r6, r6, lr
 8008eec:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008ef0:	e799      	b.n	8008e26 <__ieee754_fmod+0xb2>
 8008ef2:	4e28      	ldr	r6, [pc, #160]	; (8008f94 <__ieee754_fmod+0x220>)
 8008ef4:	1af6      	subs	r6, r6, r3
 8008ef6:	fa05 f606 	lsl.w	r6, r5, r6
 8008efa:	f04f 0c00 	mov.w	ip, #0
 8008efe:	e792      	b.n	8008e26 <__ieee754_fmod+0xb2>
 8008f00:	4567      	cmp	r7, ip
 8008f02:	bf38      	it	cc
 8008f04:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	da05      	bge.n	8008f18 <__ieee754_fmod+0x1a4>
 8008f0c:	0ffa      	lsrs	r2, r7, #31
 8008f0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008f12:	007f      	lsls	r7, r7, #1
 8008f14:	3801      	subs	r0, #1
 8008f16:	e787      	b.n	8008e28 <__ieee754_fmod+0xb4>
 8008f18:	ea52 0105 	orrs.w	r1, r2, r5
 8008f1c:	f43f af5b 	beq.w	8008dd6 <__ieee754_fmod+0x62>
 8008f20:	0fe9      	lsrs	r1, r5, #31
 8008f22:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8008f26:	006f      	lsls	r7, r5, #1
 8008f28:	e7f4      	b.n	8008f14 <__ieee754_fmod+0x1a0>
 8008f2a:	0fe8      	lsrs	r0, r5, #31
 8008f2c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008f30:	006d      	lsls	r5, r5, #1
 8008f32:	3b01      	subs	r3, #1
 8008f34:	e789      	b.n	8008e4a <__ieee754_fmod+0xd6>
 8008f36:	1ac9      	subs	r1, r1, r3
 8008f38:	2914      	cmp	r1, #20
 8008f3a:	dc0a      	bgt.n	8008f52 <__ieee754_fmod+0x1de>
 8008f3c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8008f40:	fa02 f303 	lsl.w	r3, r2, r3
 8008f44:	40cd      	lsrs	r5, r1
 8008f46:	432b      	orrs	r3, r5
 8008f48:	410a      	asrs	r2, r1
 8008f4a:	ea42 0104 	orr.w	r1, r2, r4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	e732      	b.n	8008db8 <__ieee754_fmod+0x44>
 8008f52:	291f      	cmp	r1, #31
 8008f54:	dc07      	bgt.n	8008f66 <__ieee754_fmod+0x1f2>
 8008f56:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8008f5a:	40cd      	lsrs	r5, r1
 8008f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f60:	432b      	orrs	r3, r5
 8008f62:	4622      	mov	r2, r4
 8008f64:	e7f1      	b.n	8008f4a <__ieee754_fmod+0x1d6>
 8008f66:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008f6a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008f6e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008f72:	33e2      	adds	r3, #226	; 0xe2
 8008f74:	fa42 f303 	asr.w	r3, r2, r3
 8008f78:	e7f3      	b.n	8008f62 <__ieee754_fmod+0x1ee>
 8008f7a:	bf00      	nop
 8008f7c:	7fefffff 	.word	0x7fefffff
 8008f80:	7ff00000 	.word	0x7ff00000
 8008f84:	08009520 	.word	0x08009520
 8008f88:	000fffff 	.word	0x000fffff
 8008f8c:	fffffbed 	.word	0xfffffbed
 8008f90:	fffffc02 	.word	0xfffffc02
 8008f94:	fffffbe2 	.word	0xfffffbe2

08008f98 <__ieee754_sqrt>:
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	4955      	ldr	r1, [pc, #340]	; (80090f4 <__ieee754_sqrt+0x15c>)
 8008f9e:	ec55 4b10 	vmov	r4, r5, d0
 8008fa2:	43a9      	bics	r1, r5
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	d112      	bne.n	8008fd0 <__ieee754_sqrt+0x38>
 8008faa:	ee10 2a10 	vmov	r2, s0
 8008fae:	ee10 0a10 	vmov	r0, s0
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f7f7 fad8 	bl	8000568 <__aeabi_dmul>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f91c 	bl	80001fc <__adddf3>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	ec45 4b10 	vmov	d0, r4, r5
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	2d00      	cmp	r5, #0
 8008fd2:	ee10 0a10 	vmov	r0, s0
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	dc0f      	bgt.n	8008ffa <__ieee754_sqrt+0x62>
 8008fda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fde:	4330      	orrs	r0, r6
 8008fe0:	d0f2      	beq.n	8008fc8 <__ieee754_sqrt+0x30>
 8008fe2:	b155      	cbz	r5, 8008ffa <__ieee754_sqrt+0x62>
 8008fe4:	ee10 2a10 	vmov	r2, s0
 8008fe8:	4620      	mov	r0, r4
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7f7 f904 	bl	80001f8 <__aeabi_dsub>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	f7f7 fbe2 	bl	80007bc <__aeabi_ddiv>
 8008ff8:	e7e4      	b.n	8008fc4 <__ieee754_sqrt+0x2c>
 8008ffa:	151b      	asrs	r3, r3, #20
 8008ffc:	d073      	beq.n	80090e6 <__ieee754_sqrt+0x14e>
 8008ffe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009002:	07dd      	lsls	r5, r3, #31
 8009004:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009008:	bf48      	it	mi
 800900a:	0fc8      	lsrmi	r0, r1, #31
 800900c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009010:	bf44      	itt	mi
 8009012:	0049      	lslmi	r1, r1, #1
 8009014:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009018:	2500      	movs	r5, #0
 800901a:	1058      	asrs	r0, r3, #1
 800901c:	0fcb      	lsrs	r3, r1, #31
 800901e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009022:	0049      	lsls	r1, r1, #1
 8009024:	2316      	movs	r3, #22
 8009026:	462c      	mov	r4, r5
 8009028:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800902c:	19a7      	adds	r7, r4, r6
 800902e:	4297      	cmp	r7, r2
 8009030:	bfde      	ittt	le
 8009032:	19bc      	addle	r4, r7, r6
 8009034:	1bd2      	suble	r2, r2, r7
 8009036:	19ad      	addle	r5, r5, r6
 8009038:	0fcf      	lsrs	r7, r1, #31
 800903a:	3b01      	subs	r3, #1
 800903c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009040:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009044:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009048:	d1f0      	bne.n	800902c <__ieee754_sqrt+0x94>
 800904a:	f04f 0c20 	mov.w	ip, #32
 800904e:	469e      	mov	lr, r3
 8009050:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009054:	42a2      	cmp	r2, r4
 8009056:	eb06 070e 	add.w	r7, r6, lr
 800905a:	dc02      	bgt.n	8009062 <__ieee754_sqrt+0xca>
 800905c:	d112      	bne.n	8009084 <__ieee754_sqrt+0xec>
 800905e:	428f      	cmp	r7, r1
 8009060:	d810      	bhi.n	8009084 <__ieee754_sqrt+0xec>
 8009062:	2f00      	cmp	r7, #0
 8009064:	eb07 0e06 	add.w	lr, r7, r6
 8009068:	da42      	bge.n	80090f0 <__ieee754_sqrt+0x158>
 800906a:	f1be 0f00 	cmp.w	lr, #0
 800906e:	db3f      	blt.n	80090f0 <__ieee754_sqrt+0x158>
 8009070:	f104 0801 	add.w	r8, r4, #1
 8009074:	1b12      	subs	r2, r2, r4
 8009076:	428f      	cmp	r7, r1
 8009078:	bf88      	it	hi
 800907a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800907e:	1bc9      	subs	r1, r1, r7
 8009080:	4433      	add	r3, r6
 8009082:	4644      	mov	r4, r8
 8009084:	0052      	lsls	r2, r2, #1
 8009086:	f1bc 0c01 	subs.w	ip, ip, #1
 800908a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800908e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009092:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009096:	d1dd      	bne.n	8009054 <__ieee754_sqrt+0xbc>
 8009098:	430a      	orrs	r2, r1
 800909a:	d006      	beq.n	80090aa <__ieee754_sqrt+0x112>
 800909c:	1c5c      	adds	r4, r3, #1
 800909e:	bf13      	iteet	ne
 80090a0:	3301      	addne	r3, #1
 80090a2:	3501      	addeq	r5, #1
 80090a4:	4663      	moveq	r3, ip
 80090a6:	f023 0301 	bicne.w	r3, r3, #1
 80090aa:	106a      	asrs	r2, r5, #1
 80090ac:	085b      	lsrs	r3, r3, #1
 80090ae:	07e9      	lsls	r1, r5, #31
 80090b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80090b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80090b8:	bf48      	it	mi
 80090ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80090be:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80090c2:	461c      	mov	r4, r3
 80090c4:	e780      	b.n	8008fc8 <__ieee754_sqrt+0x30>
 80090c6:	0aca      	lsrs	r2, r1, #11
 80090c8:	3815      	subs	r0, #21
 80090ca:	0549      	lsls	r1, r1, #21
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	d0fa      	beq.n	80090c6 <__ieee754_sqrt+0x12e>
 80090d0:	02d6      	lsls	r6, r2, #11
 80090d2:	d50a      	bpl.n	80090ea <__ieee754_sqrt+0x152>
 80090d4:	f1c3 0420 	rsb	r4, r3, #32
 80090d8:	fa21 f404 	lsr.w	r4, r1, r4
 80090dc:	1e5d      	subs	r5, r3, #1
 80090de:	4099      	lsls	r1, r3
 80090e0:	4322      	orrs	r2, r4
 80090e2:	1b43      	subs	r3, r0, r5
 80090e4:	e78b      	b.n	8008ffe <__ieee754_sqrt+0x66>
 80090e6:	4618      	mov	r0, r3
 80090e8:	e7f0      	b.n	80090cc <__ieee754_sqrt+0x134>
 80090ea:	0052      	lsls	r2, r2, #1
 80090ec:	3301      	adds	r3, #1
 80090ee:	e7ef      	b.n	80090d0 <__ieee754_sqrt+0x138>
 80090f0:	46a0      	mov	r8, r4
 80090f2:	e7bf      	b.n	8009074 <__ieee754_sqrt+0xdc>
 80090f4:	7ff00000 	.word	0x7ff00000

080090f8 <atan>:
 80090f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	ec55 4b10 	vmov	r4, r5, d0
 8009100:	4bc3      	ldr	r3, [pc, #780]	; (8009410 <atan+0x318>)
 8009102:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009106:	429e      	cmp	r6, r3
 8009108:	46ab      	mov	fp, r5
 800910a:	dd18      	ble.n	800913e <atan+0x46>
 800910c:	4bc1      	ldr	r3, [pc, #772]	; (8009414 <atan+0x31c>)
 800910e:	429e      	cmp	r6, r3
 8009110:	dc01      	bgt.n	8009116 <atan+0x1e>
 8009112:	d109      	bne.n	8009128 <atan+0x30>
 8009114:	b144      	cbz	r4, 8009128 <atan+0x30>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 f86d 	bl	80001fc <__adddf3>
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	e006      	b.n	8009136 <atan+0x3e>
 8009128:	f1bb 0f00 	cmp.w	fp, #0
 800912c:	f340 8131 	ble.w	8009392 <atan+0x29a>
 8009130:	a59b      	add	r5, pc, #620	; (adr r5, 80093a0 <atan+0x2a8>)
 8009132:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009136:	ec45 4b10 	vmov	d0, r4, r5
 800913a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913e:	4bb6      	ldr	r3, [pc, #728]	; (8009418 <atan+0x320>)
 8009140:	429e      	cmp	r6, r3
 8009142:	dc14      	bgt.n	800916e <atan+0x76>
 8009144:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009148:	429e      	cmp	r6, r3
 800914a:	dc0d      	bgt.n	8009168 <atan+0x70>
 800914c:	a396      	add	r3, pc, #600	; (adr r3, 80093a8 <atan+0x2b0>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	ee10 0a10 	vmov	r0, s0
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 f850 	bl	80001fc <__adddf3>
 800915c:	2200      	movs	r2, #0
 800915e:	4baf      	ldr	r3, [pc, #700]	; (800941c <atan+0x324>)
 8009160:	f7f7 fc92 	bl	8000a88 <__aeabi_dcmpgt>
 8009164:	2800      	cmp	r0, #0
 8009166:	d1e6      	bne.n	8009136 <atan+0x3e>
 8009168:	f04f 3aff 	mov.w	sl, #4294967295
 800916c:	e02b      	b.n	80091c6 <atan+0xce>
 800916e:	f000 f963 	bl	8009438 <fabs>
 8009172:	4bab      	ldr	r3, [pc, #684]	; (8009420 <atan+0x328>)
 8009174:	429e      	cmp	r6, r3
 8009176:	ec55 4b10 	vmov	r4, r5, d0
 800917a:	f300 80bf 	bgt.w	80092fc <atan+0x204>
 800917e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009182:	429e      	cmp	r6, r3
 8009184:	f300 80a0 	bgt.w	80092c8 <atan+0x1d0>
 8009188:	ee10 2a10 	vmov	r2, s0
 800918c:	ee10 0a10 	vmov	r0, s0
 8009190:	462b      	mov	r3, r5
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 f832 	bl	80001fc <__adddf3>
 8009198:	2200      	movs	r2, #0
 800919a:	4ba0      	ldr	r3, [pc, #640]	; (800941c <atan+0x324>)
 800919c:	f7f7 f82c 	bl	80001f8 <__aeabi_dsub>
 80091a0:	2200      	movs	r2, #0
 80091a2:	4606      	mov	r6, r0
 80091a4:	460f      	mov	r7, r1
 80091a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	f7f7 f825 	bl	80001fc <__adddf3>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 faff 	bl	80007bc <__aeabi_ddiv>
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	460d      	mov	r5, r1
 80091c6:	4622      	mov	r2, r4
 80091c8:	462b      	mov	r3, r5
 80091ca:	4620      	mov	r0, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	f7f7 f9cb 	bl	8000568 <__aeabi_dmul>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4680      	mov	r8, r0
 80091d8:	4689      	mov	r9, r1
 80091da:	f7f7 f9c5 	bl	8000568 <__aeabi_dmul>
 80091de:	a374      	add	r3, pc, #464	; (adr r3, 80093b0 <atan+0x2b8>)
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	4606      	mov	r6, r0
 80091e6:	460f      	mov	r7, r1
 80091e8:	f7f7 f9be 	bl	8000568 <__aeabi_dmul>
 80091ec:	a372      	add	r3, pc, #456	; (adr r3, 80093b8 <atan+0x2c0>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f803 	bl	80001fc <__adddf3>
 80091f6:	4632      	mov	r2, r6
 80091f8:	463b      	mov	r3, r7
 80091fa:	f7f7 f9b5 	bl	8000568 <__aeabi_dmul>
 80091fe:	a370      	add	r3, pc, #448	; (adr r3, 80093c0 <atan+0x2c8>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f6 fffa 	bl	80001fc <__adddf3>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f7 f9ac 	bl	8000568 <__aeabi_dmul>
 8009210:	a36d      	add	r3, pc, #436	; (adr r3, 80093c8 <atan+0x2d0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f6 fff1 	bl	80001fc <__adddf3>
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	f7f7 f9a3 	bl	8000568 <__aeabi_dmul>
 8009222:	a36b      	add	r3, pc, #428	; (adr r3, 80093d0 <atan+0x2d8>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f6 ffe8 	bl	80001fc <__adddf3>
 800922c:	4632      	mov	r2, r6
 800922e:	463b      	mov	r3, r7
 8009230:	f7f7 f99a 	bl	8000568 <__aeabi_dmul>
 8009234:	a368      	add	r3, pc, #416	; (adr r3, 80093d8 <atan+0x2e0>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f6 ffdf 	bl	80001fc <__adddf3>
 800923e:	4642      	mov	r2, r8
 8009240:	464b      	mov	r3, r9
 8009242:	f7f7 f991 	bl	8000568 <__aeabi_dmul>
 8009246:	a366      	add	r3, pc, #408	; (adr r3, 80093e0 <atan+0x2e8>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f988 	bl	8000568 <__aeabi_dmul>
 8009258:	a363      	add	r3, pc, #396	; (adr r3, 80093e8 <atan+0x2f0>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f6 ffcb 	bl	80001f8 <__aeabi_dsub>
 8009262:	4632      	mov	r2, r6
 8009264:	463b      	mov	r3, r7
 8009266:	f7f7 f97f 	bl	8000568 <__aeabi_dmul>
 800926a:	a361      	add	r3, pc, #388	; (adr r3, 80093f0 <atan+0x2f8>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f6 ffc2 	bl	80001f8 <__aeabi_dsub>
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	f7f7 f976 	bl	8000568 <__aeabi_dmul>
 800927c:	a35e      	add	r3, pc, #376	; (adr r3, 80093f8 <atan+0x300>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f6 ffb9 	bl	80001f8 <__aeabi_dsub>
 8009286:	4632      	mov	r2, r6
 8009288:	463b      	mov	r3, r7
 800928a:	f7f7 f96d 	bl	8000568 <__aeabi_dmul>
 800928e:	a35c      	add	r3, pc, #368	; (adr r3, 8009400 <atan+0x308>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f6 ffb0 	bl	80001f8 <__aeabi_dsub>
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	f7f7 f964 	bl	8000568 <__aeabi_dmul>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f6 ffa8 	bl	80001fc <__adddf3>
 80092ac:	4622      	mov	r2, r4
 80092ae:	462b      	mov	r3, r5
 80092b0:	f7f7 f95a 	bl	8000568 <__aeabi_dmul>
 80092b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	d14b      	bne.n	8009356 <atan+0x25e>
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f6 ff99 	bl	80001f8 <__aeabi_dsub>
 80092c6:	e72c      	b.n	8009122 <atan+0x2a>
 80092c8:	ee10 0a10 	vmov	r0, s0
 80092cc:	2200      	movs	r2, #0
 80092ce:	4b53      	ldr	r3, [pc, #332]	; (800941c <atan+0x324>)
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f6 ff91 	bl	80001f8 <__aeabi_dsub>
 80092d6:	2200      	movs	r2, #0
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	4b4f      	ldr	r3, [pc, #316]	; (800941c <atan+0x324>)
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f6 ff8b 	bl	80001fc <__adddf3>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	f7f7 fa65 	bl	80007bc <__aeabi_ddiv>
 80092f2:	f04f 0a01 	mov.w	sl, #1
 80092f6:	4604      	mov	r4, r0
 80092f8:	460d      	mov	r5, r1
 80092fa:	e764      	b.n	80091c6 <atan+0xce>
 80092fc:	4b49      	ldr	r3, [pc, #292]	; (8009424 <atan+0x32c>)
 80092fe:	429e      	cmp	r6, r3
 8009300:	dc1d      	bgt.n	800933e <atan+0x246>
 8009302:	ee10 0a10 	vmov	r0, s0
 8009306:	2200      	movs	r2, #0
 8009308:	4b47      	ldr	r3, [pc, #284]	; (8009428 <atan+0x330>)
 800930a:	4629      	mov	r1, r5
 800930c:	f7f6 ff74 	bl	80001f8 <__aeabi_dsub>
 8009310:	2200      	movs	r2, #0
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	4b44      	ldr	r3, [pc, #272]	; (8009428 <atan+0x330>)
 8009318:	4620      	mov	r0, r4
 800931a:	4629      	mov	r1, r5
 800931c:	f7f7 f924 	bl	8000568 <__aeabi_dmul>
 8009320:	2200      	movs	r2, #0
 8009322:	4b3e      	ldr	r3, [pc, #248]	; (800941c <atan+0x324>)
 8009324:	f7f6 ff6a 	bl	80001fc <__adddf3>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fa44 	bl	80007bc <__aeabi_ddiv>
 8009334:	f04f 0a02 	mov.w	sl, #2
 8009338:	4604      	mov	r4, r0
 800933a:	460d      	mov	r5, r1
 800933c:	e743      	b.n	80091c6 <atan+0xce>
 800933e:	462b      	mov	r3, r5
 8009340:	ee10 2a10 	vmov	r2, s0
 8009344:	2000      	movs	r0, #0
 8009346:	4939      	ldr	r1, [pc, #228]	; (800942c <atan+0x334>)
 8009348:	f7f7 fa38 	bl	80007bc <__aeabi_ddiv>
 800934c:	f04f 0a03 	mov.w	sl, #3
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	e737      	b.n	80091c6 <atan+0xce>
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <atan+0x338>)
 8009358:	4e36      	ldr	r6, [pc, #216]	; (8009434 <atan+0x33c>)
 800935a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800935e:	4456      	add	r6, sl
 8009360:	449a      	add	sl, r3
 8009362:	e9da 2300 	ldrd	r2, r3, [sl]
 8009366:	f7f6 ff47 	bl	80001f8 <__aeabi_dsub>
 800936a:	4622      	mov	r2, r4
 800936c:	462b      	mov	r3, r5
 800936e:	f7f6 ff43 	bl	80001f8 <__aeabi_dsub>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	e9d6 0100 	ldrd	r0, r1, [r6]
 800937a:	f7f6 ff3d 	bl	80001f8 <__aeabi_dsub>
 800937e:	f1bb 0f00 	cmp.w	fp, #0
 8009382:	4604      	mov	r4, r0
 8009384:	460d      	mov	r5, r1
 8009386:	f6bf aed6 	bge.w	8009136 <atan+0x3e>
 800938a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800938e:	461d      	mov	r5, r3
 8009390:	e6d1      	b.n	8009136 <atan+0x3e>
 8009392:	a51d      	add	r5, pc, #116	; (adr r5, 8009408 <atan+0x310>)
 8009394:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009398:	e6cd      	b.n	8009136 <atan+0x3e>
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w
 80093a0:	54442d18 	.word	0x54442d18
 80093a4:	3ff921fb 	.word	0x3ff921fb
 80093a8:	8800759c 	.word	0x8800759c
 80093ac:	7e37e43c 	.word	0x7e37e43c
 80093b0:	e322da11 	.word	0xe322da11
 80093b4:	3f90ad3a 	.word	0x3f90ad3a
 80093b8:	24760deb 	.word	0x24760deb
 80093bc:	3fa97b4b 	.word	0x3fa97b4b
 80093c0:	a0d03d51 	.word	0xa0d03d51
 80093c4:	3fb10d66 	.word	0x3fb10d66
 80093c8:	c54c206e 	.word	0xc54c206e
 80093cc:	3fb745cd 	.word	0x3fb745cd
 80093d0:	920083ff 	.word	0x920083ff
 80093d4:	3fc24924 	.word	0x3fc24924
 80093d8:	5555550d 	.word	0x5555550d
 80093dc:	3fd55555 	.word	0x3fd55555
 80093e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80093e4:	bfa2b444 	.word	0xbfa2b444
 80093e8:	52defd9a 	.word	0x52defd9a
 80093ec:	3fadde2d 	.word	0x3fadde2d
 80093f0:	af749a6d 	.word	0xaf749a6d
 80093f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80093f8:	fe231671 	.word	0xfe231671
 80093fc:	3fbc71c6 	.word	0x3fbc71c6
 8009400:	9998ebc4 	.word	0x9998ebc4
 8009404:	3fc99999 	.word	0x3fc99999
 8009408:	54442d18 	.word	0x54442d18
 800940c:	bff921fb 	.word	0xbff921fb
 8009410:	440fffff 	.word	0x440fffff
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	3fdbffff 	.word	0x3fdbffff
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3ff2ffff 	.word	0x3ff2ffff
 8009424:	40037fff 	.word	0x40037fff
 8009428:	3ff80000 	.word	0x3ff80000
 800942c:	bff00000 	.word	0xbff00000
 8009430:	08009550 	.word	0x08009550
 8009434:	08009530 	.word	0x08009530

08009438 <fabs>:
 8009438:	ec51 0b10 	vmov	r0, r1, d0
 800943c:	ee10 2a10 	vmov	r2, s0
 8009440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009444:	ec43 2b10 	vmov	d0, r2, r3
 8009448:	4770      	bx	lr

0800944a <matherr>:
 800944a:	2000      	movs	r0, #0
 800944c:	4770      	bx	lr
	...

08009450 <nan>:
 8009450:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009458 <nan+0x8>
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	00000000 	.word	0x00000000
 800945c:	7ff80000 	.word	0x7ff80000

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
