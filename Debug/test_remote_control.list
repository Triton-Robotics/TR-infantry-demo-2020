
test_remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005108  08005108  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005110  08005110  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000070  08005188  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08005188  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108df  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002326  00000000  00000000  0003097f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb0  00000000  00000000  00032ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002454a  00000000  00000000  00034af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9c6  00000000  00000000  0005903a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dacf2  00000000  00000000  00064a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f6f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  0013f770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800505c 	.word	0x0800505c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800505c 	.word	0x0800505c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f001 f969 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f85f 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fb1d 	bl	8000bdc <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fadd 	bl	8000b60 <MX_DMA_Init>
  MX_CAN1_Init();
 80005a6:	f000 f8c3 	bl	8000730 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005aa:	f000 f8f7 	bl	800079c <MX_CAN2_Init>
  MX_SPI5_Init();
 80005ae:	f000 f92b 	bl	8000808 <MX_SPI5_Init>
  MX_TIM2_Init();
 80005b2:	f000 f95f 	bl	8000874 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005b6:	f000 f9d7 	bl	8000968 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 fa51 	bl	8000a60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005be:	f000 fa7b 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005c2:	f000 faa3 	bl	8000b0c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  led_off();
 80005c6:	f000 fbc7 	bl	8000d58 <led_off>
  power_on();
 80005ca:	f000 fbd9 	bl	8000d80 <power_on>
  dbus_uart_init();
 80005ce:	f000 fd47 	bl	8001060 <dbus_uart_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sprintf(buf, "CH1: %4d  CH2: %4d  CH3: %4d  CH4: %4d  SW1: %1d  SW2: %1d \r\n", rc.ch1, rc.ch2, rc.ch3, rc.ch4, rc.sw1, rc.sw2);
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <main+0xb4>)
 80005d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d8:	461c      	mov	r4, r3
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0xb4>)
 80005dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005e0:	461d      	mov	r5, r3
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <main+0xb4>)
 80005e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <main+0xb4>)
 80005ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0xb4>)
 80005f4:	7a9b      	ldrb	r3, [r3, #10]
 80005f6:	4618      	mov	r0, r3
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <main+0xb4>)
 80005fa:	7adb      	ldrb	r3, [r3, #11]
 80005fc:	9303      	str	r3, [sp, #12]
 80005fe:	9002      	str	r0, [sp, #8]
 8000600:	9101      	str	r1, [sp, #4]
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	462b      	mov	r3, r5
 8000606:	4622      	mov	r2, r4
 8000608:	490f      	ldr	r1, [pc, #60]	; (8000648 <main+0xb8>)
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xbc>)
 800060c:	f004 f920 	bl	8004850 <siprintf>
	//HAL_UART_Transmit(&huart6, (uint8_t *)buf, (COUNTOF(buf) - 1), 55);
	HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buf, (COUNTOF(buf) - 1));
 8000610:	22c7      	movs	r2, #199	; 0xc7
 8000612:	490e      	ldr	r1, [pc, #56]	; (800064c <main+0xbc>)
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <main+0xc0>)
 8000616:	f003 fa21 	bl	8003a5c <HAL_UART_Transmit_DMA>
	HAL_Delay(50);
 800061a:	2032      	movs	r0, #50	; 0x32
 800061c:	f001 f998 	bl	8001950 <HAL_Delay>
	count++;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <main+0xc4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <main+0xc4>)
 8000628:	6013      	str	r3, [r2, #0]
	if (count==10)
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <main+0xc4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b0a      	cmp	r3, #10
 8000630:	d1cf      	bne.n	80005d2 <main+0x42>
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0xc8>)
 8000638:	f002 f949 	bl	80028ce <HAL_GPIO_TogglePin>
		count=0;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <main+0xc4>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
	sprintf(buf, "CH1: %4d  CH2: %4d  CH3: %4d  CH4: %4d  SW1: %1d  SW2: %1d \r\n", rc.ch1, rc.ch2, rc.ch3, rc.ch4, rc.sw1, rc.sw2);
 8000642:	e7c6      	b.n	80005d2 <main+0x42>
 8000644:	20000470 	.word	0x20000470
 8000648:	08005074 	.word	0x08005074
 800064c:	20000300 	.word	0x20000300
 8000650:	20000408 	.word	0x20000408
 8000654:	200002bc 	.word	0x200002bc
 8000658:	40021400 	.word	0x40021400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f8e8 	bl	8004840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80006cc:	2306      	movs	r3, #6
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f90f 	bl	8002904 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fb2c 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fb68 	bl	8002de4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 fb15 	bl	8000d48 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_CAN1_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_CAN1_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN1_Init+0x64>)
 800073c:	2203      	movs	r2, #3
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_CAN1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_CAN1_Init+0x64>)
 800074e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000752:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_CAN1_Init+0x64>)
 8000756:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800075a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_CAN1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_CAN1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CAN1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_CAN1_Init+0x64>)
 8000782:	f001 f907 	bl	8001994 <HAL_CAN_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 fadc 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000448 	.word	0x20000448
 8000798:	40006400 	.word	0x40006400

0800079c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_CAN2_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_CAN2_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_CAN2_Init+0x64>)
 80007a8:	2203      	movs	r2, #3
 80007aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_CAN2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_CAN2_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_CAN2_Init+0x64>)
 80007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007be:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_CAN2_Init+0x64>)
 80007c2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007c6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_CAN2_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_CAN2_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_CAN2_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_CAN2_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_CAN2_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CAN2_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_CAN2_Init+0x64>)
 80007ee:	f001 f8d1 	bl	8001994 <HAL_CAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 faa6 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000194 	.word	0x20000194
 8000804:	40006800 	.word	0x40006800

08000808 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI5_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_SPI5_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI5_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI5_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI5_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI5_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI5_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI5_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI5_Init+0x64>)
 800083c:	2230      	movs	r2, #48	; 0x30
 800083e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_SPI5_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI5_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_SPI5_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI5_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_SPI5_Init+0x64>)
 800085a:	f002 fc8f 	bl	800317c <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 fa70 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000fc 	.word	0x200000fc
 8000870:	40015000 	.word	0x40015000

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <MX_TIM2_Init+0xf0>)
 8000898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800089c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM_PSC_APB1;
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008a0:	22a7      	movs	r2, #167	; 0xa7
 80008a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = PWM_RESOLUTION-1;
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80008b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b8:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008be:	4829      	ldr	r0, [pc, #164]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008c0:	f002 fcc0 	bl	8003244 <HAL_TIM_PWM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008ca:	f000 fa3d 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4821      	ldr	r0, [pc, #132]	; (8000964 <MX_TIM2_Init+0xf0>)
 80008de:	f002 fff3 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008e8:	f000 fa2e 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 80008f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	4817      	ldr	r0, [pc, #92]	; (8000964 <MX_TIM2_Init+0xf0>)
 8000906:	f002 fcc9 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000910:	f000 fa1a 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2204      	movs	r2, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_TIM2_Init+0xf0>)
 800091c:	f002 fcbe 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000926:	f000 fa0f 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2208      	movs	r2, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_TIM2_Init+0xf0>)
 8000932:	f002 fcb3 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800093c:	f000 fa04 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	220c      	movs	r2, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM2_Init+0xf0>)
 8000948:	f002 fca8 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000952:	f000 f9f9 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM2_Init+0xf0>)
 8000958:	f000 fcec 	bl	8001334 <HAL_TIM_MspPostInit>

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200003c8 	.word	0x200003c8

08000968 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <MX_TIM4_Init+0xf0>)
 800098c:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <MX_TIM4_Init+0xf4>)
 800098e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM_PSC_APB1;
 8000990:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <MX_TIM4_Init+0xf0>)
 8000992:	22a7      	movs	r2, #167	; 0xa7
 8000994:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_TIM4_Init+0xf0>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = PWM_RESOLUTION-1;
 800099c:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <MX_TIM4_Init+0xf0>)
 800099e:	f242 720f 	movw	r2, #9999	; 0x270f
 80009a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_TIM4_Init+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_TIM4_Init+0xf0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009b0:	4829      	ldr	r0, [pc, #164]	; (8000a58 <MX_TIM4_Init+0xf0>)
 80009b2:	f002 fc47 	bl	8003244 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f9c4 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4619      	mov	r1, r3
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <MX_TIM4_Init+0xf0>)
 80009d0:	f002 ff7a 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009da:	f000 f9b5 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWM_DEFAULT_DUTY;
 80009e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_TIM4_Init+0xf0>)
 80009f8:	f002 fc50 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a02:	f000 f9a1 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2204      	movs	r2, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_TIM4_Init+0xf0>)
 8000a0e:	f002 fc45 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000a18:	f000 f996 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2208      	movs	r2, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM4_Init+0xf0>)
 8000a24:	f002 fc3a 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000a2e:	f000 f98b 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	220c      	movs	r2, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM4_Init+0xf0>)
 8000a3a:	f002 fc2f 	bl	800329c <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000a44:	f000 f980 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM4_Init+0xf0>)
 8000a4a:	f000 fc73 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000154 	.word	0x20000154
 8000a5c:	40000800 	.word	0x40000800

08000a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART1_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a6c:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x54>)
 8000a6e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART1_UART_Init+0x4c>)
 8000a98:	f002 ff92 	bl	80039c0 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f951 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000027c 	.word	0x2000027c
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f002 ff66 	bl	80039c0 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f925 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000408 	.word	0x20000408
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART6_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b44:	f002 ff3c 	bl	80039c0 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8fb 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200002c0 	.word	0x200002c0
 8000b5c:	40011400 	.word	0x40011400

08000b60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2010      	movs	r0, #16
 8000ba4:	f001 f8cd 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ba8:	2010      	movs	r0, #16
 8000baa:	f001 f8e6 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2011      	movs	r0, #17
 8000bb4:	f001 f8c5 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bb8:	2011      	movs	r0, #17
 8000bba:	f001 f8de 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	203a      	movs	r0, #58	; 0x3a
 8000bc4:	f001 f8bd 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bc8:	203a      	movs	r0, #58	; 0x3a
 8000bca:	f001 f8d6 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a4f      	ldr	r2, [pc, #316]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b46      	ldr	r3, [pc, #280]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a41      	ldr	r2, [pc, #260]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a3a      	ldr	r2, [pc, #232]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a33      	ldr	r2, [pc, #204]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0320 	and.w	r3, r3, #32
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_GPIO_Init+0x15c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	213c      	movs	r1, #60	; 0x3c
 8000cba:	4820      	ldr	r0, [pc, #128]	; (8000d3c <MX_GPIO_Init+0x160>)
 8000cbc:	f001 fdee 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f244 0140 	movw	r1, #16448	; 0x4040
 8000cc6:	481e      	ldr	r0, [pc, #120]	; (8000d40 <MX_GPIO_Init+0x164>)
 8000cc8:	f001 fde8 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd2:	481c      	ldr	r0, [pc, #112]	; (8000d44 <MX_GPIO_Init+0x168>)
 8000cd4:	f001 fde2 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH2 PH3 PH4 PH5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cd8:	233c      	movs	r3, #60	; 0x3c
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_GPIO_Init+0x160>)
 8000cf0:	f001 fc2a 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 LED_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|LED_GREEN_Pin;
 8000cf4:	f244 0340 	movw	r3, #16448	; 0x4040
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_GPIO_Init+0x164>)
 8000d0e:	f001 fc1b 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_GPIO_Init+0x168>)
 8000d2c:	f001 fc0c 	bl	8002548 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40021c00 	.word	0x40021c00
 8000d40:	40021400 	.word	0x40021400
 8000d44:	40021000 	.word	0x40021000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <led_off>:
 */


#include "rm_gpio.h"

void led_off(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <led_off+0x20>)
 8000d64:	f001 fd9a 	bl	800289c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6e:	4803      	ldr	r0, [pc, #12]	; (8000d7c <led_off+0x24>)
 8000d70:	f001 fd94 	bl	800289c <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021400 	.word	0x40021400
 8000d7c:	40021000 	.word	0x40021000

08000d80 <power_on>:

void power_on(void){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	213c      	movs	r1, #60	; 0x3c
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <power_on+0x14>)
 8000d8a:	f001 fd87 	bl	800289c <HAL_GPIO_WritePin>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021c00 	.word	0x40021c00

08000d98 <uart_receive_dma_no_it>:
  * @param[in]  pData: receive buff
  * @param[in]  Size:  buff size
  * @retval     set success or fail
  */
static int uart_receive_dma_no_it(UART_HandleTypeDef* huart, uint8_t* pData, uint32_t Size)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t tmp1 = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  tmp1 = huart->RxState;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	617b      	str	r3, [r7, #20]

	if (tmp1 == HAL_UART_STATE_READY)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b20      	cmp	r3, #32
 8000db6:	d125      	bne.n	8000e04 <uart_receive_dma_no_it+0x6c>
	{
		if ((pData == NULL) || (Size == 0))
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <uart_receive_dma_no_it+0x2c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <uart_receive_dma_no_it+0x30>
		{
			return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e01e      	b.n	8000e06 <uart_receive_dma_no_it+0x6e>
		}

		huart->pRxBuffPtr = pData;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	859a      	strh	r2, [r3, #44]	; 0x2c
		huart->ErrorCode  = HAL_UART_ERROR_NONE;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Enable the DMA Stream */
		HAL_DMA_Start(huart->hdmarx, (uint32_t)&huart->Instance->DR, (uint32_t)pData, Size);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3304      	adds	r3, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f001 f88e 	bl	8001f0c <HAL_DMA_Start>

		/*
		 * Enable the DMA transfer for the receiver request by setting the DMAR bit
		 * in the UART CR3 register
		 */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695a      	ldr	r2, [r3, #20]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dfe:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e000      	b.n	8000e06 <uart_receive_dma_no_it+0x6e>
	}
	else
	{
		return HAL_BUSY;
 8000e04:	2302      	movs	r3, #2
	}
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <dma_current_data_counter>:
  * @param[in]  dma_stream: where y can be 1 or 2 to select the DMA and x can be 0
  *             to 7 to select the DMA Stream.
  * @retval     The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t dma_current_data_counter(DMA_Stream_TypeDef *dma_stream)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(dma_stream->NDTR));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	b29b      	uxth	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <rc_callback_handler>:
  * @param[out]  rc:   structure to save handled rc data
  * @param[in]   buff: the buff which saved raw rc data
  * @retval
  */
void rc_callback_handler(rc_info_t *rc, uint8_t *buff)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  rc->ch1 = (buff[0] | buff[1] << 8) & 0x07FF;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	801a      	strh	r2, [r3, #0]
  rc->ch1 -= 1024;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	801a      	strh	r2, [r3, #0]
  rc->ch2 = (buff[1] >> 3 | buff[2] << 5) & 0x07FF;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3302      	adds	r3, #2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	015b      	lsls	r3, r3, #5
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	805a      	strh	r2, [r3, #2]
  rc->ch2 -= 1024;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	805a      	strh	r2, [r3, #2]
  rc->ch3 = (buff[2] >> 6 | buff[3] << 2 | buff[4] << 10) & 0x07FF;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	099b      	lsrs	r3, r3, #6
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3303      	adds	r3, #3
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	809a      	strh	r2, [r3, #4]
  rc->ch3 -= 1024;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	809a      	strh	r2, [r3, #4]
  rc->ch4 = (buff[4] >> 1 | buff[5] << 7) & 0x07FF;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	01db      	lsls	r3, r3, #7
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	80da      	strh	r2, [r3, #6]
  rc->ch4 -= 1024;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	80da      	strh	r2, [r3, #6]

  rc->sw1 = ((buff[5] >> 4) & 0x000C) >> 2;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	3305      	adds	r3, #5
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	109b      	asrs	r3, r3, #2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	729a      	strb	r2, [r3, #10]
  rc->sw2 = (buff[5] >> 4) & 0x0003;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3305      	adds	r3, #5
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	72da      	strb	r2, [r3, #11]

  if ((abs(rc->ch1) > 660) || \
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bfb8      	it	lt
 8000f50:	425b      	neglt	r3, r3
 8000f52:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000f56:	dc1a      	bgt.n	8000f8e <rc_callback_handler+0x166>
      (abs(rc->ch2) > 660) || \
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bfb8      	it	lt
 8000f62:	425b      	neglt	r3, r3
  if ((abs(rc->ch1) > 660) || \
 8000f64:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000f68:	dc11      	bgt.n	8000f8e <rc_callback_handler+0x166>
      (abs(rc->ch3) > 660) || \
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bfb8      	it	lt
 8000f74:	425b      	neglt	r3, r3
      (abs(rc->ch2) > 660) || \
 8000f76:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000f7a:	dc08      	bgt.n	8000f8e <rc_callback_handler+0x166>
      (abs(rc->ch4) > 660))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfb8      	it	lt
 8000f86:	425b      	neglt	r3, r3
      (abs(rc->ch3) > 660) || \
 8000f88:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000f8c:	dd04      	ble.n	8000f98 <rc_callback_handler+0x170>
  {
    memset(rc, 0, sizeof(rc_info_t));
 8000f8e:	2216      	movs	r2, #22
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 fc54 	bl	8004840 <memset>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <uart_rx_idle_callback>:
  * @brief      clear idle it flag after uart receive a frame data
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
static void uart_rx_idle_callback(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	/* clear idle it flag avoid idle interrupt all the time */
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

	/* handle received data in idle interrupt */
	if (huart == &DBUS_HUART)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <uart_rx_idle_callback+0x80>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d127      	bne.n	8001016 <uart_rx_idle_callback+0x76>
	{
		/* clear DMA transfer complete flag */
		__HAL_DMA_DISABLE(huart->hdmarx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

		/* handle dbus data dbus_buf from DMA */
		if ((DBUS_MAX_LEN - dma_current_data_counter(huart->hdmarx->Instance)) == DBUS_BUFLEN)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff14 	bl	8000e0e <dma_current_data_counter>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8000fec:	2b12      	cmp	r3, #18
 8000fee:	d103      	bne.n	8000ff8 <uart_rx_idle_callback+0x58>
		{
			rc_callback_handler(&rc, dbus_buf);
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <uart_rx_idle_callback+0x84>)
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <uart_rx_idle_callback+0x88>)
 8000ff4:	f7ff ff18 	bl	8000e28 <rc_callback_handler>
		}

		/* restart dma transmission */
		__HAL_DMA_SET_COUNTER(huart->hdmarx, DBUS_MAX_LEN);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2232      	movs	r2, #50	; 0x32
 8001000:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(huart->hdmarx);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]
	}
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000027c 	.word	0x2000027c
 8001024:	20000488 	.word	0x20000488
 8001028:	20000470 	.word	0x20000470

0800102c <uart_receive_handler>:
  * @brief      callback this function when uart interrupt
  * @param[in]  huart: uart IRQHandler id
  * @retval
  */
void uart_receive_handler(UART_HandleTypeDef *huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	2b10      	cmp	r3, #16
 8001040:	d109      	bne.n	8001056 <uart_receive_handler+0x2a>
			__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f003 0310 	and.w	r3, r3, #16
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) &&
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <uart_receive_handler+0x2a>
	{
		uart_rx_idle_callback(huart);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffa5 	bl	8000fa0 <uart_rx_idle_callback>
	}
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <dbus_uart_init>:
  * @brief   initialize dbus uart device
  * @param
  * @retval
  */
void dbus_uart_init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	/* open uart idle it */
	__HAL_UART_CLEAR_IDLEFLAG(&DBUS_HUART);
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <dbus_uart_init+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <dbus_uart_init+0x40>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_ENABLE_IT(&DBUS_HUART, UART_IT_IDLE);
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <dbus_uart_init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <dbus_uart_init+0x40>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0210 	orr.w	r2, r2, #16
 800108a:	60da      	str	r2, [r3, #12]

	uart_receive_dma_no_it(&DBUS_HUART, dbus_buf, DBUS_MAX_LEN);
 800108c:	2232      	movs	r2, #50	; 0x32
 800108e:	4905      	ldr	r1, [pc, #20]	; (80010a4 <dbus_uart_init+0x44>)
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <dbus_uart_init+0x40>)
 8001092:	f7ff fe81 	bl	8000d98 <uart_receive_dma_no_it>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000027c 	.word	0x2000027c
 80010a4:	20000488 	.word	0x20000488

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a42      	ldr	r2, [pc, #264]	; (8001220 <HAL_CAN_MspInit+0x128>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d135      	bne.n	8001186 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_CAN_MspInit+0x12c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a40      	ldr	r2, [pc, #256]	; (8001224 <HAL_CAN_MspInit+0x12c>)
 8001122:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_CAN_MspInit+0x12c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10d      	bne.n	8001148 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_CAN_MspInit+0x130>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <HAL_CAN_MspInit+0x130>)
 8001136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_CAN_MspInit+0x130>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_CAN_MspInit+0x130>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a35      	ldr	r2, [pc, #212]	; (8001228 <HAL_CAN_MspInit+0x130>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_CAN_MspInit+0x130>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001164:	2303      	movs	r3, #3
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001174:	2309      	movs	r3, #9
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <HAL_CAN_MspInit+0x134>)
 8001180:	f001 f9e2 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001184:	e048      	b.n	8001218 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a29      	ldr	r2, [pc, #164]	; (8001230 <HAL_CAN_MspInit+0x138>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d143      	bne.n	8001218 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_CAN_MspInit+0x130>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a23      	ldr	r2, [pc, #140]	; (8001228 <HAL_CAN_MspInit+0x130>)
 800119a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_CAN_MspInit+0x12c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <HAL_CAN_MspInit+0x12c>)
 80011b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_CAN_MspInit+0x12c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10d      	bne.n	80011da <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_CAN_MspInit+0x130>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001208:	2309      	movs	r3, #9
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <HAL_CAN_MspInit+0x13c>)
 8001214:	f001 f998 	bl	8002548 <HAL_GPIO_Init>
}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40006400 	.word	0x40006400
 8001224:	2000008c 	.word	0x2000008c
 8001228:	40023800 	.word	0x40023800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40006800 	.word	0x40006800
 8001234:	40020400 	.word	0x40020400

08001238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_SPI_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12c      	bne.n	80012b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8001292:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012a4:	2305      	movs	r3, #5
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 80012b0:	f001 f94a 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40015000 	.word	0x40015000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021400 	.word	0x40021400

080012c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d10e      	bne.n	80012f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_TIM_PWM_MspInit+0x64>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_TIM_PWM_MspInit+0x64>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_TIM_PWM_MspInit+0x64>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012f6:	e012      	b.n	800131e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_TIM_PWM_MspInit+0x68>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10d      	bne.n	800131e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_TIM_PWM_MspInit+0x64>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_TIM_PWM_MspInit+0x64>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_TIM_PWM_MspInit+0x64>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40000800 	.word	0x40000800

08001334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d11e      	bne.n	8001394 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA0/WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001372:	230f      	movs	r3, #15
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4816      	ldr	r0, [pc, #88]	; (80013e8 <HAL_TIM_MspPostInit+0xb4>)
 800138e:	f001 f8db 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001392:	e023      	b.n	80013dc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_TIM_MspPostInit+0xb8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d11e      	bne.n	80013dc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 80013ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013cc:	2302      	movs	r3, #2
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_TIM_MspPostInit+0xbc>)
 80013d8:	f001 f8b6 	bl	8002548 <HAL_GPIO_Init>
}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40000800 	.word	0x40000800
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9d      	ldr	r2, [pc, #628]	; (8001688 <HAL_UART_MspInit+0x294>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d163      	bne.n	80014de <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	4b9c      	ldr	r3, [pc, #624]	; (800168c <HAL_UART_MspInit+0x298>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a9b      	ldr	r2, [pc, #620]	; (800168c <HAL_UART_MspInit+0x298>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b99      	ldr	r3, [pc, #612]	; (800168c <HAL_UART_MspInit+0x298>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	4b95      	ldr	r3, [pc, #596]	; (800168c <HAL_UART_MspInit+0x298>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a94      	ldr	r2, [pc, #592]	; (800168c <HAL_UART_MspInit+0x298>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b92      	ldr	r3, [pc, #584]	; (800168c <HAL_UART_MspInit+0x298>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800144e:	23c0      	movs	r3, #192	; 0xc0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145e:	2307      	movs	r3, #7
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4889      	ldr	r0, [pc, #548]	; (8001690 <HAL_UART_MspInit+0x29c>)
 800146a:	f001 f86d 	bl	8002548 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800146e:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 8001470:	4a89      	ldr	r2, [pc, #548]	; (8001698 <HAL_UART_MspInit+0x2a4>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001474:	4b87      	ldr	r3, [pc, #540]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 8001476:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800147a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147c:	4b85      	ldr	r3, [pc, #532]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b84      	ldr	r3, [pc, #528]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 800148a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800149c:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 800149e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a4:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014b0:	4878      	ldr	r0, [pc, #480]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 80014b2:	f000 fc7d 	bl	8001db0 <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80014bc:	f7ff fc44 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a74      	ldr	r2, [pc, #464]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
 80014c6:	4a73      	ldr	r2, [pc, #460]	; (8001694 <HAL_UART_MspInit+0x2a0>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2025      	movs	r0, #37	; 0x25
 80014d2:	f000 fc36 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d6:	2025      	movs	r0, #37	; 0x25
 80014d8:	f000 fc4f 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014dc:	e0d0      	b.n	8001680 <HAL_UART_MspInit+0x28c>
  else if(huart->Instance==USART2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6e      	ldr	r2, [pc, #440]	; (800169c <HAL_UART_MspInit+0x2a8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	f040 8091 	bne.w	800160c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <HAL_UART_MspInit+0x298>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a66      	ldr	r2, [pc, #408]	; (800168c <HAL_UART_MspInit+0x298>)
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_UART_MspInit+0x298>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_UART_MspInit+0x298>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a5f      	ldr	r2, [pc, #380]	; (800168c <HAL_UART_MspInit+0x298>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_UART_MspInit+0x298>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8001522:	2360      	movs	r3, #96	; 0x60
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001532:	2307      	movs	r3, #7
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4858      	ldr	r0, [pc, #352]	; (80016a0 <HAL_UART_MspInit+0x2ac>)
 800153e:	f001 f803 	bl	8002548 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001544:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <HAL_UART_MspInit+0x2b4>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001548:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 800154a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001550:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b4e      	ldr	r3, [pc, #312]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001570:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157c:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001582:	4848      	ldr	r0, [pc, #288]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001584:	f000 fc14 	bl	8001db0 <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800158e:	f7ff fbdb 	bl	8000d48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a43      	ldr	r2, [pc, #268]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
 8001598:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_UART_MspInit+0x2b0>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015a0:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <HAL_UART_MspInit+0x2bc>)
 80015a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015a4:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015be:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015de:	4833      	ldr	r0, [pc, #204]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015e0:	f000 fbe6 	bl	8001db0 <HAL_DMA_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80015ea:	f7ff fbad 	bl	8000d48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
 80015f4:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <HAL_UART_MspInit+0x2b8>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2026      	movs	r0, #38	; 0x26
 8001600:	f000 fb9f 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001604:	2026      	movs	r0, #38	; 0x26
 8001606:	f000 fbb8 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 800160a:	e039      	b.n	8001680 <HAL_UART_MspInit+0x28c>
  else if(huart->Instance==USART6)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <HAL_UART_MspInit+0x2c0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d134      	bne.n	8001680 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_UART_MspInit+0x298>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_UART_MspInit+0x298>)
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_UART_MspInit+0x298>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_UART_MspInit+0x298>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_UART_MspInit+0x298>)
 800163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_UART_MspInit+0x298>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800164e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001660:	2308      	movs	r3, #8
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <HAL_UART_MspInit+0x2c4>)
 800166c:	f000 ff6c 	bl	8002548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2047      	movs	r0, #71	; 0x47
 8001676:	f000 fb64 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800167a:	2047      	movs	r0, #71	; 0x47
 800167c:	f000 fb7d 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	; 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40011000 	.word	0x40011000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400
 8001694:	200001bc 	.word	0x200001bc
 8001698:	40026440 	.word	0x40026440
 800169c:	40004400 	.word	0x40004400
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	2000009c 	.word	0x2000009c
 80016a8:	40026088 	.word	0x40026088
 80016ac:	2000021c 	.word	0x2000021c
 80016b0:	400260a0 	.word	0x400260a0
 80016b4:	40011400 	.word	0x40011400
 80016b8:	40021800 	.word	0x40021800

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 f8fe 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA1_Stream5_IRQHandler+0x10>)
 800171e:	f000 fcab 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000009c 	.word	0x2000009c

0800172c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA1_Stream6_IRQHandler+0x10>)
 8001732:	f000 fca1 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000021c 	.word	0x2000021c

08001740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_receive_handler(&huart1);
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <USART1_IRQHandler+0x14>)
 8001746:	f7ff fc71 	bl	800102c <uart_receive_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800174a:	4802      	ldr	r0, [pc, #8]	; (8001754 <USART1_IRQHandler+0x14>)
 800174c:	f002 f9f2 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000027c 	.word	0x2000027c

08001758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <USART2_IRQHandler+0x10>)
 800175e:	f002 f9e9 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000408 	.word	0x20000408

0800176c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <DMA2_Stream2_IRQHandler+0x10>)
 8001772:	f000 fc81 	bl	8002078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200001bc 	.word	0x200001bc

08001780 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <USART6_IRQHandler+0x10>)
 8001786:	f002 f9d5 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200002c0 	.word	0x200002c0

08001794 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x50>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x16>
		heap_end = &end;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <_sbrk+0x50>)
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <_sbrk+0x54>)
 80017a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <_sbrk+0x50>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <_sbrk+0x50>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	466a      	mov	r2, sp
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d907      	bls.n	80017ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017be:	f003 f815 	bl	80047ec <__errno>
 80017c2:	4602      	mov	r2, r0
 80017c4:	230c      	movs	r3, #12
 80017c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	e006      	b.n	80017dc <_sbrk+0x48>
	}

	heap_end += incr;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <_sbrk+0x50>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <_sbrk+0x50>)
 80017d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000090 	.word	0x20000090
 80017e8:	200004a8 	.word	0x200004a8

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <SystemInit+0x28>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <SystemInit+0x28>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SystemInit+0x28>)
 8001802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001806:	609a      	str	r2, [r3, #8]
#endif
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800181c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800181e:	e003      	b.n	8001828 <LoopCopyDataInit>

08001820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001826:	3104      	adds	r1, #4

08001828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800182c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800182e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001830:	d3f6      	bcc.n	8001820 <CopyDataInit>
  ldr  r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001834:	e002      	b.n	800183c <LoopFillZerobss>

08001836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001838:	f842 3b04 	str.w	r3, [r2], #4

0800183c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800183e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001840:	d3f9      	bcc.n	8001836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd3 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f002 ffd7 	bl	80047f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7fe fea1 	bl	8000590 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001854:	08005118 	.word	0x08005118
  ldr  r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800185c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001860:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001864:	200004a4 	.word	0x200004a4

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 fa49 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fc02 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fa61 	bl	8001d96 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 fa29 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	2000049c 	.word	0x2000049c

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000049c 	.word	0x2000049c

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_Delay+0x40>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000008 	.word	0x20000008

08001994 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0ed      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fba0 	bl	80010f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0202 	bic.w	r2, r2, #2
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff ffb6 	bl	8001938 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ce:	e012      	b.n	80019f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d0:	f7ff ffb2 	bl	8001938 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90b      	bls.n	80019f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2205      	movs	r2, #5
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0c5      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e5      	bne.n	80019d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a14:	f7ff ff90 	bl	8001938 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a1c:	f7ff ff8c 	bl	8001938 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e09f      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0e5      	beq.n	8001a1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7e1b      	ldrb	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7e5b      	ldrb	r3, [r3, #25]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e007      	b.n	8001aa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e9b      	ldrb	r3, [r3, #26]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e007      	b.n	8001ace <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0220 	bic.w	r2, r2, #32
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7edb      	ldrb	r3, [r3, #27]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0210 	bic.w	r2, r2, #16
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7f1b      	ldrb	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0208 	bic.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7f5b      	ldrb	r3, [r3, #29]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0204 	orr.w	r2, r2, #4
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	ea42 0103 	orr.w	r1, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fdbc 	bl	8001938 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e099      	b.n	8001f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	e00f      	b.n	8001e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dee:	f7ff fda3 	bl	8001938 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d908      	bls.n	8001e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e078      	b.n	8001f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e8      	bne.n	8001dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_DMA_Init+0x158>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d107      	bne.n	8001e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4313      	orrs	r3, r2
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f023 0307 	bic.w	r3, r3, #7
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d117      	bne.n	8001ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 facd 	bl	8002454 <DMA_CheckFifoParam>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fa84 	bl	80023e8 <DMA_CalcBaseAndBitshift>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	223f      	movs	r2, #63	; 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	f010803f 	.word	0xf010803f

08001f0c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Start+0x20>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e026      	b.n	8001f7a <HAL_DMA_Start+0x6e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d115      	bne.n	8001f6c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 fa19 	bl	800238c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e005      	b.n	8001f78 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Start_IT+0x26>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e040      	b.n	800202a <HAL_DMA_Start_IT+0xa8>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d12f      	bne.n	800201c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f9db 	bl	800238c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	223f      	movs	r2, #63	; 0x3f
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0216 	orr.w	r2, r2, #22
 8001ff0:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e005      	b.n	8002028 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002024:	2302      	movs	r3, #2
 8002026:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002028:	7dfb      	ldrb	r3, [r7, #23]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d004      	beq.n	8002050 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e00c      	b.n	800206a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2205      	movs	r2, #5
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_DMA_IRQHandler+0x258>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a92      	ldr	r2, [pc, #584]	; (80022d4 <HAL_DMA_IRQHandler+0x25c>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0a9b      	lsrs	r3, r3, #10
 8002090:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	2208      	movs	r2, #8
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01a      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0204 	bic.w	r2, r2, #4
 80020ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2208      	movs	r2, #8
 80020d2:	409a      	lsls	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2201      	movs	r2, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2201      	movs	r2, #1
 8002108:	409a      	lsls	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f043 0202 	orr.w	r2, r3, #2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2204      	movs	r2, #4
 8002120:	409a      	lsls	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2204      	movs	r2, #4
 800213e:	409a      	lsls	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2210      	movs	r2, #16
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d043      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d03c      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2210      	movs	r2, #16
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d018      	beq.n	80021ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d024      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
 80021a6:	e01f      	b.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e016      	b.n	80021e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0208 	bic.w	r2, r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	2220      	movs	r2, #32
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808e 	beq.w	8002316 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8086 	beq.w	8002316 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2220      	movs	r2, #32
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b05      	cmp	r3, #5
 8002220:	d136      	bne.n	8002290 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0216 	bic.w	r2, r2, #22
 8002230:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002240:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <HAL_DMA_IRQHandler+0x1da>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0208 	bic.w	r2, r2, #8
 8002260:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	223f      	movs	r2, #63	; 0x3f
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	2b00      	cmp	r3, #0
 8002284:	d07d      	beq.n	8002382 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
        }
        return;
 800228e:	e078      	b.n	8002382 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01c      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d030      	beq.n	8002316 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e02b      	b.n	8002316 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
 80022ce:	e022      	b.n	8002316 <HAL_DMA_IRQHandler+0x29e>
 80022d0:	20000000 	.word	0x20000000
 80022d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0210 	bic.w	r2, r2, #16
 80022f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	2b00      	cmp	r3, #0
 800231c:	d032      	beq.n	8002384 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d022      	beq.n	8002370 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	429a      	cmp	r2, r3
 800234c:	d307      	bcc.n	800235e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f2      	bne.n	8002342 <HAL_DMA_IRQHandler+0x2ca>
 800235c:	e000      	b.n	8002360 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800235e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	4798      	blx	r3
 8002380:	e000      	b.n	8002384 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002382:	bf00      	nop
    }
  }
}
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop

0800238c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d108      	bne.n	80023cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ca:	e007      	b.n	80023dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3b10      	subs	r3, #16
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <DMA_CalcBaseAndBitshift+0x64>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <DMA_CalcBaseAndBitshift+0x68>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d909      	bls.n	800242a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	659a      	str	r2, [r3, #88]	; 0x58
 8002428:	e007      	b.n	800243a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	aaaaaaab 	.word	0xaaaaaaab
 8002450:	080050cc 	.word	0x080050cc

08002454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11f      	bne.n	80024ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d855      	bhi.n	8002520 <DMA_CheckFifoParam+0xcc>
 8002474:	a201      	add	r2, pc, #4	; (adr r2, 800247c <DMA_CheckFifoParam+0x28>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	0800249f 	.word	0x0800249f
 8002484:	0800248d 	.word	0x0800248d
 8002488:	08002521 	.word	0x08002521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d045      	beq.n	8002524 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249c:	e042      	b.n	8002524 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024a6:	d13f      	bne.n	8002528 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e03c      	b.n	8002528 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b6:	d121      	bne.n	80024fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d836      	bhi.n	800252c <DMA_CheckFifoParam+0xd8>
 80024be:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <DMA_CheckFifoParam+0x70>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024db 	.word	0x080024db
 80024cc:	080024d5 	.word	0x080024d5
 80024d0:	080024ed 	.word	0x080024ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e02f      	b.n	800253a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d024      	beq.n	8002530 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ea:	e021      	b.n	8002530 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024f4:	d11e      	bne.n	8002534 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024fa:	e01b      	b.n	8002534 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <DMA_CheckFifoParam+0xb4>
 8002502:	2b03      	cmp	r3, #3
 8002504:	d003      	beq.n	800250e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002506:	e018      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e015      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00e      	beq.n	8002538 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
      break;
 800251e:	e00b      	b.n	8002538 <DMA_CheckFifoParam+0xe4>
      break;
 8002520:	bf00      	nop
 8002522:	e00a      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 8002524:	bf00      	nop
 8002526:	e008      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 8002528:	bf00      	nop
 800252a:	e006      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 800252c:	bf00      	nop
 800252e:	e004      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 8002530:	bf00      	nop
 8002532:	e002      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;   
 8002534:	bf00      	nop
 8002536:	e000      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 8002538:	bf00      	nop
    }
  } 
  
  return status; 
 800253a:	7bfb      	ldrb	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	e177      	b.n	8002854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	f040 8166 	bne.w	800284e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d00b      	beq.n	80025a2 <HAL_GPIO_Init+0x5a>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002596:	2b11      	cmp	r3, #17
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0xfc>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b12      	cmp	r3, #18
 8002642:	d123      	bne.n	800268c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	08da      	lsrs	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3208      	adds	r2, #8
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	08da      	lsrs	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3208      	adds	r2, #8
 8002686:	69b9      	ldr	r1, [r7, #24]
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0203 	and.w	r2, r3, #3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80c0 	beq.w	800284e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_GPIO_Init+0x320>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a64      	ldr	r2, [pc, #400]	; (8002868 <HAL_GPIO_Init+0x320>)
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b62      	ldr	r3, [pc, #392]	; (8002868 <HAL_GPIO_Init+0x320>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ea:	4a60      	ldr	r2, [pc, #384]	; (800286c <HAL_GPIO_Init+0x324>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_GPIO_Init+0x328>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d037      	beq.n	8002786 <HAL_GPIO_Init+0x23e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a56      	ldr	r2, [pc, #344]	; (8002874 <HAL_GPIO_Init+0x32c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d031      	beq.n	8002782 <HAL_GPIO_Init+0x23a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_GPIO_Init+0x330>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_GPIO_Init+0x236>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a54      	ldr	r2, [pc, #336]	; (800287c <HAL_GPIO_Init+0x334>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x232>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a53      	ldr	r2, [pc, #332]	; (8002880 <HAL_GPIO_Init+0x338>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x22e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_GPIO_Init+0x33c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x22a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a51      	ldr	r2, [pc, #324]	; (8002888 <HAL_GPIO_Init+0x340>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x226>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_GPIO_Init+0x344>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x222>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4f      	ldr	r2, [pc, #316]	; (8002890 <HAL_GPIO_Init+0x348>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x21e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4e      	ldr	r2, [pc, #312]	; (8002894 <HAL_GPIO_Init+0x34c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x21a>
 800275e:	2309      	movs	r3, #9
 8002760:	e012      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002762:	230a      	movs	r3, #10
 8002764:	e010      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002766:	2308      	movs	r3, #8
 8002768:	e00e      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800276a:	2307      	movs	r3, #7
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800276e:	2306      	movs	r3, #6
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x240>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x240>
 8002786:	2300      	movs	r3, #0
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002798:	4934      	ldr	r1, [pc, #208]	; (800286c <HAL_GPIO_Init+0x324>)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <HAL_GPIO_Init+0x350>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <HAL_GPIO_Init+0x350>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_GPIO_Init+0x350>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f4:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_GPIO_Init+0x350>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_GPIO_Init+0x350>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_GPIO_Init+0x350>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_GPIO_Init+0x350>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_GPIO_Init+0x350>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	f67f ae84 	bls.w	8002564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800285c:	bf00      	nop
 800285e:	3724      	adds	r7, #36	; 0x24
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40023800 	.word	0x40023800
 800286c:	40013800 	.word	0x40013800
 8002870:	40020000 	.word	0x40020000
 8002874:	40020400 	.word	0x40020400
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40021000 	.word	0x40021000
 8002884:	40021400 	.word	0x40021400
 8002888:	40021800 	.word	0x40021800
 800288c:	40021c00 	.word	0x40021c00
 8002890:	40022000 	.word	0x40022000
 8002894:	40022400 	.word	0x40022400
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b8:	e003      	b.n	80028c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	401a      	ands	r2, r3
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d104      	bne.n	80028f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028e8:	887b      	ldrh	r3, [r7, #2]
 80028ea:	041a      	lsls	r2, r3, #16
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e25b      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d075      	beq.n	8002a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002922:	4ba3      	ldr	r3, [pc, #652]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d00c      	beq.n	8002948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292e:	4ba0      	ldr	r3, [pc, #640]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002936:	2b08      	cmp	r3, #8
 8002938:	d112      	bne.n	8002960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293a:	4b9d      	ldr	r3, [pc, #628]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002946:	d10b      	bne.n	8002960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	4b99      	ldr	r3, [pc, #612]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d05b      	beq.n	8002a0c <HAL_RCC_OscConfig+0x108>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d157      	bne.n	8002a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e236      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x74>
 800296a:	4b91      	ldr	r3, [pc, #580]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a90      	ldr	r2, [pc, #576]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e01d      	b.n	80029b4 <HAL_RCC_OscConfig+0xb0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x98>
 8002982:	4b8b      	ldr	r3, [pc, #556]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a8a      	ldr	r2, [pc, #552]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b88      	ldr	r3, [pc, #544]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a87      	ldr	r2, [pc, #540]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0xb0>
 800299c:	4b84      	ldr	r3, [pc, #528]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a83      	ldr	r2, [pc, #524]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a80      	ldr	r2, [pc, #512]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe ffbc 	bl	8001938 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe ffb8 	bl	8001938 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1fb      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0xc0>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe ffa8 	bl	8001938 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ec:	f7fe ffa4 	bl	8001938 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1e7      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fe:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0xe8>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d063      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1a:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a26:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d11c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x152>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1bb      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b56      	ldr	r3, [pc, #344]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4952      	ldr	r1, [pc, #328]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	e03a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_OscConfig+0x2b0>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe ff5d 	bl	8001938 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a82:	f7fe ff59 	bl	8001938 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e19c      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	4b46      	ldr	r3, [pc, #280]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4940      	ldr	r1, [pc, #256]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_OscConfig+0x2b0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe ff3c 	bl	8001938 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7fe ff38 	bl	8001938 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e17b      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d030      	beq.n	8002b50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCC_OscConfig+0x2b4>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe ff1c 	bl	8001938 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe ff18 	bl	8001938 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e15b      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x200>
 8002b22:	e015      	b.n	8002b50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCC_OscConfig+0x2b4>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe ff05 	bl	8001938 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b32:	f7fe ff01 	bl	8001938 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e144      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a0 	beq.w	8002c9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x2b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d121      	bne.n	8002bde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCC_OscConfig+0x2b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_RCC_OscConfig+0x2b8>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fec7 	bl	8001938 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	e011      	b.n	8002bd2 <HAL_RCC_OscConfig+0x2ce>
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	42470000 	.word	0x42470000
 8002bb8:	42470e80 	.word	0x42470e80
 8002bbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe feba 	bl	8001938 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0fd      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <HAL_RCC_OscConfig+0x4d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2f0>
 8002be6:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x32a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x312>
 8002bfc:	4b77      	ldr	r3, [pc, #476]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a76      	ldr	r2, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	4b74      	ldr	r3, [pc, #464]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a73      	ldr	r2, [pc, #460]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x32a>
 8002c16:	4b71      	ldr	r3, [pc, #452]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a70      	ldr	r2, [pc, #448]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a6d      	ldr	r2, [pc, #436]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fe7f 	bl	8001938 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fe7b 	bl	8001938 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0bc      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCC_OscConfig+0x33a>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fe69 	bl	8001938 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fe65 	bl	8001938 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0a6      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8092 	beq.w	8002dcc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca8:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d05c      	beq.n	8002d6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d141      	bne.n	8002d40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fe39 	bl	8001938 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe fe35 	bl	8001938 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e078      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	019b      	lsls	r3, r3, #6
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	4933      	ldr	r1, [pc, #204]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d12:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fe0e 	bl	8001938 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fe0a 	bl	8001938 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04d      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x41c>
 8002d3e:	e045      	b.n	8002dcc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_RCC_OscConfig+0x4dc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fdf7 	bl	8001938 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fdf3 	bl	8001938 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e036      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x44a>
 8002d6c:	e02e      	b.n	8002dcc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e029      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_RCC_OscConfig+0x4d8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d115      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d10d      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470060 	.word	0x42470060

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cc      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b68      	ldr	r3, [pc, #416]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d90c      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d044      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d119      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e067      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 0203 	bic.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4934      	ldr	r1, [pc, #208]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe fd30 	bl	8001938 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7fe fd2c 	bl	8001938 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e04f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 020c 	and.w	r2, r3, #12
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1eb      	bne.n	8002edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4601      	mov	r1, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fc90 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	080050b4 	.word	0x080050b4
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d007      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x32>
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x38>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 808d 	bne.w	80030f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fde:	60bb      	str	r3, [r7, #8]
       break;
 8002fe0:	e08c      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe2:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe4:	60bb      	str	r3, [r7, #8]
      break;
 8002fe6:	e089      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff2:	4b45      	ldr	r3, [pc, #276]	; (8003108 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d023      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffe:	4b42      	ldr	r3, [pc, #264]	; (8003108 <HAL_RCC_GetSysClockFreq+0x158>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	f04f 0400 	mov.w	r4, #0
 8003008:	f240 11ff 	movw	r1, #511	; 0x1ff
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	ea03 0501 	and.w	r5, r3, r1
 8003014:	ea04 0602 	and.w	r6, r4, r2
 8003018:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 800301a:	fb02 f106 	mul.w	r1, r2, r6
 800301e:	2200      	movs	r2, #0
 8003020:	fb02 f205 	mul.w	r2, r2, r5
 8003024:	440a      	add	r2, r1
 8003026:	493a      	ldr	r1, [pc, #232]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8003028:	fba5 0101 	umull	r0, r1, r5, r1
 800302c:	1853      	adds	r3, r2, r1
 800302e:	4619      	mov	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f04f 0400 	mov.w	r4, #0
 8003036:	461a      	mov	r2, r3
 8003038:	4623      	mov	r3, r4
 800303a:	f7fd f929 	bl	8000290 <__aeabi_uldivmod>
 800303e:	4603      	mov	r3, r0
 8003040:	460c      	mov	r4, r1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e049      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_GetSysClockFreq+0x158>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	f04f 0400 	mov.w	r4, #0
 8003050:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	ea03 0501 	and.w	r5, r3, r1
 800305c:	ea04 0602 	and.w	r6, r4, r2
 8003060:	4629      	mov	r1, r5
 8003062:	4632      	mov	r2, r6
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	0154      	lsls	r4, r2, #5
 800306e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003072:	014b      	lsls	r3, r1, #5
 8003074:	4619      	mov	r1, r3
 8003076:	4622      	mov	r2, r4
 8003078:	1b49      	subs	r1, r1, r5
 800307a:	eb62 0206 	sbc.w	r2, r2, r6
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	0194      	lsls	r4, r2, #6
 8003088:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800308c:	018b      	lsls	r3, r1, #6
 800308e:	1a5b      	subs	r3, r3, r1
 8003090:	eb64 0402 	sbc.w	r4, r4, r2
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	00e2      	lsls	r2, r4, #3
 800309e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030a2:	00d9      	lsls	r1, r3, #3
 80030a4:	460b      	mov	r3, r1
 80030a6:	4614      	mov	r4, r2
 80030a8:	195b      	adds	r3, r3, r5
 80030aa:	eb44 0406 	adc.w	r4, r4, r6
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	02a2      	lsls	r2, r4, #10
 80030b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030bc:	0299      	lsls	r1, r3, #10
 80030be:	460b      	mov	r3, r1
 80030c0:	4614      	mov	r4, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	4621      	mov	r1, r4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f04f 0400 	mov.w	r4, #0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	f7fd f8de 	bl	8000290 <__aeabi_uldivmod>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_GetSysClockFreq+0x158>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	0c1b      	lsrs	r3, r3, #16
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	3301      	adds	r3, #1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	60bb      	str	r3, [r7, #8]
      break;
 80030f4:	e002      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetSysClockFreq+0x15c>)
 80030f8:	60bb      	str	r3, [r7, #8]
      break;
 80030fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fc:	68bb      	ldr	r3, [r7, #8]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400
 8003110:	00b71b00 	.word	0x00b71b00

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff0 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003134:	4601      	mov	r1, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4a03      	ldr	r2, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	080050c4 	.word	0x080050c4

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffdc 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 800315c:	4601      	mov	r1, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0b5b      	lsrs	r3, r3, #13
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4a03      	ldr	r2, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5cd3      	ldrb	r3, [r2, r3]
 800316c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	080050c4 	.word	0x080050c4

0800317c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e056      	b.n	800323c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fe f845 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	ea42 0103 	orr.w	r1, r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	f003 0104 	and.w	r1, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e01d      	b.n	8003292 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe f82c 	bl	80012c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f000 f8d0 	bl	8003428 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e0b4      	b.n	8003420 <HAL_TIM_PWM_ConfigChannel+0x184>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	f200 809f 	bhi.w	800340c <HAL_TIM_PWM_ConfigChannel+0x170>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	08003309 	.word	0x08003309
 80032d8:	0800340d 	.word	0x0800340d
 80032dc:	0800340d 	.word	0x0800340d
 80032e0:	0800340d 	.word	0x0800340d
 80032e4:	08003349 	.word	0x08003349
 80032e8:	0800340d 	.word	0x0800340d
 80032ec:	0800340d 	.word	0x0800340d
 80032f0:	0800340d 	.word	0x0800340d
 80032f4:	0800338b 	.word	0x0800338b
 80032f8:	0800340d 	.word	0x0800340d
 80032fc:	0800340d 	.word	0x0800340d
 8003300:	0800340d 	.word	0x0800340d
 8003304:	080033cb 	.word	0x080033cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f92a 	bl	8003568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	619a      	str	r2, [r3, #24]
      break;
 8003346:	e062      	b.n	800340e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f97a 	bl	8003648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
      break;
 8003388:	e041      	b.n	800340e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f9cf 	bl	8003734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0208 	orr.w	r2, r2, #8
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0204 	bic.w	r2, r2, #4
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	61da      	str	r2, [r3, #28]
      break;
 80033c8:	e021      	b.n	800340e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fa23 	bl	800381c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	61da      	str	r2, [r3, #28]
      break;
 800340a:	e000      	b.n	800340e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800340c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <TIM_Base_SetConfig+0x114>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d00f      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3d      	ldr	r2, [pc, #244]	; (8003540 <TIM_Base_SetConfig+0x118>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00b      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <TIM_Base_SetConfig+0x11c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <TIM_Base_SetConfig+0x120>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3a      	ldr	r2, [pc, #232]	; (800354c <TIM_Base_SetConfig+0x124>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d108      	bne.n	800347a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2f      	ldr	r2, [pc, #188]	; (800353c <TIM_Base_SetConfig+0x114>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d02b      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d027      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <TIM_Base_SetConfig+0x118>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d023      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2b      	ldr	r2, [pc, #172]	; (8003544 <TIM_Base_SetConfig+0x11c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01f      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <TIM_Base_SetConfig+0x120>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01b      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a29      	ldr	r2, [pc, #164]	; (800354c <TIM_Base_SetConfig+0x124>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d017      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <TIM_Base_SetConfig+0x128>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a27      	ldr	r2, [pc, #156]	; (8003554 <TIM_Base_SetConfig+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <TIM_Base_SetConfig+0x130>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a25      	ldr	r2, [pc, #148]	; (800355c <TIM_Base_SetConfig+0x134>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <TIM_Base_SetConfig+0x138>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a23      	ldr	r2, [pc, #140]	; (8003564 <TIM_Base_SetConfig+0x13c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <TIM_Base_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0xf8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <TIM_Base_SetConfig+0x124>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d103      	bne.n	8003528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	615a      	str	r2, [r3, #20]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40010400 	.word	0x40010400
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800
 800355c:	40001800 	.word	0x40001800
 8003560:	40001c00 	.word	0x40001c00
 8003564:	40002000 	.word	0x40002000

08003568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0302 	bic.w	r3, r3, #2
 80035b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <TIM_OC1_SetConfig+0xd8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_OC1_SetConfig+0x64>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <TIM_OC1_SetConfig+0xdc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10c      	bne.n	80035e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0308 	bic.w	r3, r3, #8
 80035d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <TIM_OC1_SetConfig+0xd8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_OC1_SetConfig+0x8e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a14      	ldr	r2, [pc, #80]	; (8003644 <TIM_OC1_SetConfig+0xdc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d111      	bne.n	800361a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40010000 	.word	0x40010000
 8003644:	40010400 	.word	0x40010400

08003648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0210 	bic.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0320 	bic.w	r3, r3, #32
 8003692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a22      	ldr	r2, [pc, #136]	; (800372c <TIM_OC2_SetConfig+0xe4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC2_SetConfig+0x68>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <TIM_OC2_SetConfig+0xe8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10d      	bne.n	80036cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <TIM_OC2_SetConfig+0xe4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_OC2_SetConfig+0x94>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <TIM_OC2_SetConfig+0xe8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d113      	bne.n	8003704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40010400 	.word	0x40010400

08003734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800377c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <TIM_OC3_SetConfig+0xe0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_OC3_SetConfig+0x66>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <TIM_OC3_SetConfig+0xe4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10d      	bne.n	80037b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <TIM_OC3_SetConfig+0xe0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_OC3_SetConfig+0x92>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a15      	ldr	r2, [pc, #84]	; (8003818 <TIM_OC3_SetConfig+0xe4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d113      	bne.n	80037ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400

0800381c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	031b      	lsls	r3, r3, #12
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <TIM_OC4_SetConfig+0xa4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC4_SetConfig+0x68>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a11      	ldr	r2, [pc, #68]	; (80038c4 <TIM_OC4_SetConfig+0xa8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d109      	bne.n	8003898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40010400 	.word	0x40010400

080038c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038dc:	2302      	movs	r3, #2
 80038de:	e05a      	b.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392c:	d01d      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10c      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4313      	orrs	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40010400 	.word	0x40010400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40001800 	.word	0x40001800

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e03f      	b.n	8003a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fd04 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb75 	bl	80040f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d153      	bne.n	8003b1e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Transmit_DMA+0x26>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e04c      	b.n	8003b20 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Transmit_DMA+0x38>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e045      	b.n	8003b20 <HAL_UART_Transmit_DMA+0xc4>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2221      	movs	r2, #33	; 0x21
 8003ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_UART_Transmit_DMA+0xcc>)
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_UART_Transmit_DMA+0xd0>)
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_UART_Transmit_DMA+0xd4>)
 8003ad2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3304      	adds	r3, #4
 8003af0:	461a      	mov	r2, r3
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	f7fe fa45 	bl	8001f82 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b18:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	08003d85 	.word	0x08003d85
 8003b2c:	08003dd7 	.word	0x08003dd7
 8003b30:	08003df3 	.word	0x08003df3

08003b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_UART_IRQHandler+0x52>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa37 	bl	8003ff2 <UART_Receive_IT>
      return;
 8003b84:	e0d1      	b.n	8003d2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80b0 	beq.w	8003cee <HAL_UART_IRQHandler+0x1ba>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x70>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80a5 	beq.w	8003cee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x90>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_UART_IRQHandler+0xb0>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f043 0202 	orr.w	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_UART_IRQHandler+0xd0>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	f043 0204 	orr.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00f      	beq.n	8003c2e <HAL_UART_IRQHandler+0xfa>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <HAL_UART_IRQHandler+0xee>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	f043 0208 	orr.w	r2, r3, #8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d078      	beq.n	8003d28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <HAL_UART_IRQHandler+0x11c>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9d1 	bl	8003ff2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	bf0c      	ite	eq
 8003c5e:	2301      	moveq	r3, #1
 8003c60:	2300      	movne	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_UART_IRQHandler+0x144>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d031      	beq.n	8003cdc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f91a 	bl	8003eb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d123      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d013      	beq.n	8003ccc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <HAL_UART_IRQHandler+0x1fc>)
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe f9be 	bl	8002032 <HAL_DMA_Abort_IT>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d016      	beq.n	8003cea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cca:	e00e      	b.n	8003cea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f84f 	bl	8003d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd2:	e00a      	b.n	8003cea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f84b 	bl	8003d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cda:	e006      	b.n	8003cea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f847 	bl	8003d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ce8:	e01e      	b.n	8003d28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cea:	bf00      	nop
    return;
 8003cec:	e01c      	b.n	8003d28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d008      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1d6>
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f907 	bl	8003f16 <UART_Transmit_IT>
    return;
 8003d08:	e00f      	b.n	8003d2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_UART_IRQHandler+0x1f6>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f94f 	bl	8003fc2 <UART_EndTransmit_IT>
    return;
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d28:	bf00      	nop
  }
}
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	08003eef 	.word	0x08003eef

08003d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d113      	bne.n	8003dc8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dc6:	e002      	b.n	8003dce <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ffb3 	bl	8003d34 <HAL_UART_TxCpltCallback>
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff ffaf 	bl	8003d48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b21      	cmp	r3, #33	; 0x21
 8003e24:	d108      	bne.n	8003e38 <UART_DMAError+0x46>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f000 f827 	bl	8003e86 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b22      	cmp	r3, #34	; 0x22
 8003e58:	d108      	bne.n	8003e6c <UART_DMAError+0x7a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e66:	68b8      	ldr	r0, [r7, #8]
 8003e68:	f000 f823 	bl	8003eb2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e78:	68b8      	ldr	r0, [r7, #8]
 8003e7a:	f7ff ff79 	bl	8003d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e9c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ec8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff ff31 	bl	8003d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b21      	cmp	r3, #33	; 0x21
 8003f28:	d144      	bne.n	8003fb4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	d11a      	bne.n	8003f6a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f48:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]
 8003f5c:	e00e      	b.n	8003f7c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]
 8003f68:	e008      	b.n	8003f7c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6211      	str	r1, [r2, #32]
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fea6 	bl	8003d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b22      	cmp	r3, #34	; 0x22
 8004004:	d171      	bne.n	80040ea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d123      	bne.n	8004058 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10e      	bne.n	800403c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	b29b      	uxth	r3, r3
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
 800403a:	e029      	b.n	8004090 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b29b      	uxth	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
 8004056:	e01b      	b.n	8004090 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6858      	ldr	r0, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6291      	str	r1, [r2, #40]	; 0x28
 8004070:	b2c2      	uxtb	r2, r0
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e00c      	b.n	8004090 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	1c58      	adds	r0, r3, #1
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	6288      	str	r0, [r1, #40]	; 0x28
 8004088:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29b      	uxth	r3, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4619      	mov	r1, r3
 800409e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d120      	bne.n	80040e6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0220 	bic.w	r2, r2, #32
 80040b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe3d 	bl	8003d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e002      	b.n	80040ec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004136:	f023 030c 	bic.w	r3, r3, #12
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	430b      	orrs	r3, r1
 8004142:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	f040 818b 	bne.w	800447c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4ac1      	ldr	r2, [pc, #772]	; (8004470 <UART_SetConfig+0x37c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d005      	beq.n	800417c <UART_SetConfig+0x88>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4abf      	ldr	r2, [pc, #764]	; (8004474 <UART_SetConfig+0x380>)
 8004176:	4293      	cmp	r3, r2
 8004178:	f040 80bd 	bne.w	80042f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7fe ffea 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8004180:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	461d      	mov	r5, r3
 8004186:	f04f 0600 	mov.w	r6, #0
 800418a:	46a8      	mov	r8, r5
 800418c:	46b1      	mov	r9, r6
 800418e:	eb18 0308 	adds.w	r3, r8, r8
 8004192:	eb49 0409 	adc.w	r4, r9, r9
 8004196:	4698      	mov	r8, r3
 8004198:	46a1      	mov	r9, r4
 800419a:	eb18 0805 	adds.w	r8, r8, r5
 800419e:	eb49 0906 	adc.w	r9, r9, r6
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041b6:	4688      	mov	r8, r1
 80041b8:	4691      	mov	r9, r2
 80041ba:	eb18 0005 	adds.w	r0, r8, r5
 80041be:	eb49 0106 	adc.w	r1, r9, r6
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	461d      	mov	r5, r3
 80041c8:	f04f 0600 	mov.w	r6, #0
 80041cc:	196b      	adds	r3, r5, r5
 80041ce:	eb46 0406 	adc.w	r4, r6, r6
 80041d2:	461a      	mov	r2, r3
 80041d4:	4623      	mov	r3, r4
 80041d6:	f7fc f85b 	bl	8000290 <__aeabi_uldivmod>
 80041da:	4603      	mov	r3, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	461a      	mov	r2, r3
 80041e0:	4ba5      	ldr	r3, [pc, #660]	; (8004478 <UART_SetConfig+0x384>)
 80041e2:	fba3 2302 	umull	r2, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	461d      	mov	r5, r3
 80041f0:	f04f 0600 	mov.w	r6, #0
 80041f4:	46a9      	mov	r9, r5
 80041f6:	46b2      	mov	sl, r6
 80041f8:	eb19 0309 	adds.w	r3, r9, r9
 80041fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004200:	4699      	mov	r9, r3
 8004202:	46a2      	mov	sl, r4
 8004204:	eb19 0905 	adds.w	r9, r9, r5
 8004208:	eb4a 0a06 	adc.w	sl, sl, r6
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800421c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004220:	4689      	mov	r9, r1
 8004222:	4692      	mov	sl, r2
 8004224:	eb19 0005 	adds.w	r0, r9, r5
 8004228:	eb4a 0106 	adc.w	r1, sl, r6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	461d      	mov	r5, r3
 8004232:	f04f 0600 	mov.w	r6, #0
 8004236:	196b      	adds	r3, r5, r5
 8004238:	eb46 0406 	adc.w	r4, r6, r6
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	f7fc f826 	bl	8000290 <__aeabi_uldivmod>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	461a      	mov	r2, r3
 800424a:	4b8b      	ldr	r3, [pc, #556]	; (8004478 <UART_SetConfig+0x384>)
 800424c:	fba3 1302 	umull	r1, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	2164      	movs	r1, #100	; 0x64
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	3332      	adds	r3, #50	; 0x32
 800425e:	4a86      	ldr	r2, [pc, #536]	; (8004478 <UART_SetConfig+0x384>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800426c:	4498      	add	r8, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	461d      	mov	r5, r3
 8004272:	f04f 0600 	mov.w	r6, #0
 8004276:	46a9      	mov	r9, r5
 8004278:	46b2      	mov	sl, r6
 800427a:	eb19 0309 	adds.w	r3, r9, r9
 800427e:	eb4a 040a 	adc.w	r4, sl, sl
 8004282:	4699      	mov	r9, r3
 8004284:	46a2      	mov	sl, r4
 8004286:	eb19 0905 	adds.w	r9, r9, r5
 800428a:	eb4a 0a06 	adc.w	sl, sl, r6
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800429e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042a2:	4689      	mov	r9, r1
 80042a4:	4692      	mov	sl, r2
 80042a6:	eb19 0005 	adds.w	r0, r9, r5
 80042aa:	eb4a 0106 	adc.w	r1, sl, r6
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	461d      	mov	r5, r3
 80042b4:	f04f 0600 	mov.w	r6, #0
 80042b8:	196b      	adds	r3, r5, r5
 80042ba:	eb46 0406 	adc.w	r4, r6, r6
 80042be:	461a      	mov	r2, r3
 80042c0:	4623      	mov	r3, r4
 80042c2:	f7fb ffe5 	bl	8000290 <__aeabi_uldivmod>
 80042c6:	4603      	mov	r3, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <UART_SetConfig+0x384>)
 80042ce:	fba3 1302 	umull	r1, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2164      	movs	r1, #100	; 0x64
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <UART_SetConfig+0x384>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	f003 0207 	and.w	r2, r3, #7
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4442      	add	r2, r8
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	e26f      	b.n	80047d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042f6:	f7fe ff19 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 80042fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	461d      	mov	r5, r3
 8004300:	f04f 0600 	mov.w	r6, #0
 8004304:	46a8      	mov	r8, r5
 8004306:	46b1      	mov	r9, r6
 8004308:	eb18 0308 	adds.w	r3, r8, r8
 800430c:	eb49 0409 	adc.w	r4, r9, r9
 8004310:	4698      	mov	r8, r3
 8004312:	46a1      	mov	r9, r4
 8004314:	eb18 0805 	adds.w	r8, r8, r5
 8004318:	eb49 0906 	adc.w	r9, r9, r6
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004328:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800432c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004330:	4688      	mov	r8, r1
 8004332:	4691      	mov	r9, r2
 8004334:	eb18 0005 	adds.w	r0, r8, r5
 8004338:	eb49 0106 	adc.w	r1, r9, r6
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	461d      	mov	r5, r3
 8004342:	f04f 0600 	mov.w	r6, #0
 8004346:	196b      	adds	r3, r5, r5
 8004348:	eb46 0406 	adc.w	r4, r6, r6
 800434c:	461a      	mov	r2, r3
 800434e:	4623      	mov	r3, r4
 8004350:	f7fb ff9e 	bl	8000290 <__aeabi_uldivmod>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	461a      	mov	r2, r3
 800435a:	4b47      	ldr	r3, [pc, #284]	; (8004478 <UART_SetConfig+0x384>)
 800435c:	fba3 2302 	umull	r2, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	461d      	mov	r5, r3
 800436a:	f04f 0600 	mov.w	r6, #0
 800436e:	46a9      	mov	r9, r5
 8004370:	46b2      	mov	sl, r6
 8004372:	eb19 0309 	adds.w	r3, r9, r9
 8004376:	eb4a 040a 	adc.w	r4, sl, sl
 800437a:	4699      	mov	r9, r3
 800437c:	46a2      	mov	sl, r4
 800437e:	eb19 0905 	adds.w	r9, r9, r5
 8004382:	eb4a 0a06 	adc.w	sl, sl, r6
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004392:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800439a:	4689      	mov	r9, r1
 800439c:	4692      	mov	sl, r2
 800439e:	eb19 0005 	adds.w	r0, r9, r5
 80043a2:	eb4a 0106 	adc.w	r1, sl, r6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	461d      	mov	r5, r3
 80043ac:	f04f 0600 	mov.w	r6, #0
 80043b0:	196b      	adds	r3, r5, r5
 80043b2:	eb46 0406 	adc.w	r4, r6, r6
 80043b6:	461a      	mov	r2, r3
 80043b8:	4623      	mov	r3, r4
 80043ba:	f7fb ff69 	bl	8000290 <__aeabi_uldivmod>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	461a      	mov	r2, r3
 80043c4:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <UART_SetConfig+0x384>)
 80043c6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2164      	movs	r1, #100	; 0x64
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	3332      	adds	r3, #50	; 0x32
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <UART_SetConfig+0x384>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e6:	4498      	add	r8, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	461d      	mov	r5, r3
 80043ec:	f04f 0600 	mov.w	r6, #0
 80043f0:	46a9      	mov	r9, r5
 80043f2:	46b2      	mov	sl, r6
 80043f4:	eb19 0309 	adds.w	r3, r9, r9
 80043f8:	eb4a 040a 	adc.w	r4, sl, sl
 80043fc:	4699      	mov	r9, r3
 80043fe:	46a2      	mov	sl, r4
 8004400:	eb19 0905 	adds.w	r9, r9, r5
 8004404:	eb4a 0a06 	adc.w	sl, sl, r6
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800441c:	4689      	mov	r9, r1
 800441e:	4692      	mov	sl, r2
 8004420:	eb19 0005 	adds.w	r0, r9, r5
 8004424:	eb4a 0106 	adc.w	r1, sl, r6
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	461d      	mov	r5, r3
 800442e:	f04f 0600 	mov.w	r6, #0
 8004432:	196b      	adds	r3, r5, r5
 8004434:	eb46 0406 	adc.w	r4, r6, r6
 8004438:	461a      	mov	r2, r3
 800443a:	4623      	mov	r3, r4
 800443c:	f7fb ff28 	bl	8000290 <__aeabi_uldivmod>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	461a      	mov	r2, r3
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <UART_SetConfig+0x384>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	; 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	3332      	adds	r3, #50	; 0x32
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <UART_SetConfig+0x384>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 0207 	and.w	r2, r3, #7
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4442      	add	r2, r8
 800446c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800446e:	e1b2      	b.n	80047d6 <UART_SetConfig+0x6e2>
 8004470:	40011000 	.word	0x40011000
 8004474:	40011400 	.word	0x40011400
 8004478:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4ad7      	ldr	r2, [pc, #860]	; (80047e0 <UART_SetConfig+0x6ec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d005      	beq.n	8004492 <UART_SetConfig+0x39e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4ad6      	ldr	r2, [pc, #856]	; (80047e4 <UART_SetConfig+0x6f0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	f040 80d1 	bne.w	8004634 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004492:	f7fe fe5f 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 8004496:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	469a      	mov	sl, r3
 800449c:	f04f 0b00 	mov.w	fp, #0
 80044a0:	46d0      	mov	r8, sl
 80044a2:	46d9      	mov	r9, fp
 80044a4:	eb18 0308 	adds.w	r3, r8, r8
 80044a8:	eb49 0409 	adc.w	r4, r9, r9
 80044ac:	4698      	mov	r8, r3
 80044ae:	46a1      	mov	r9, r4
 80044b0:	eb18 080a 	adds.w	r8, r8, sl
 80044b4:	eb49 090b 	adc.w	r9, r9, fp
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044cc:	4688      	mov	r8, r1
 80044ce:	4691      	mov	r9, r2
 80044d0:	eb1a 0508 	adds.w	r5, sl, r8
 80044d4:	eb4b 0609 	adc.w	r6, fp, r9
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f04f 0400 	mov.w	r4, #0
 80044ea:	0094      	lsls	r4, r2, #2
 80044ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044f0:	008b      	lsls	r3, r1, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	4623      	mov	r3, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	4631      	mov	r1, r6
 80044fa:	f7fb fec9 	bl	8000290 <__aeabi_uldivmod>
 80044fe:	4603      	mov	r3, r0
 8004500:	460c      	mov	r4, r1
 8004502:	461a      	mov	r2, r3
 8004504:	4bb8      	ldr	r3, [pc, #736]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004506:	fba3 2302 	umull	r2, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	469b      	mov	fp, r3
 8004514:	f04f 0c00 	mov.w	ip, #0
 8004518:	46d9      	mov	r9, fp
 800451a:	46e2      	mov	sl, ip
 800451c:	eb19 0309 	adds.w	r3, r9, r9
 8004520:	eb4a 040a 	adc.w	r4, sl, sl
 8004524:	4699      	mov	r9, r3
 8004526:	46a2      	mov	sl, r4
 8004528:	eb19 090b 	adds.w	r9, r9, fp
 800452c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004544:	4689      	mov	r9, r1
 8004546:	4692      	mov	sl, r2
 8004548:	eb1b 0509 	adds.w	r5, fp, r9
 800454c:	eb4c 060a 	adc.w	r6, ip, sl
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	0094      	lsls	r4, r2, #2
 8004564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004568:	008b      	lsls	r3, r1, #2
 800456a:	461a      	mov	r2, r3
 800456c:	4623      	mov	r3, r4
 800456e:	4628      	mov	r0, r5
 8004570:	4631      	mov	r1, r6
 8004572:	f7fb fe8d 	bl	8000290 <__aeabi_uldivmod>
 8004576:	4603      	mov	r3, r0
 8004578:	460c      	mov	r4, r1
 800457a:	461a      	mov	r2, r3
 800457c:	4b9a      	ldr	r3, [pc, #616]	; (80047e8 <UART_SetConfig+0x6f4>)
 800457e:	fba3 1302 	umull	r1, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2164      	movs	r1, #100	; 0x64
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	3332      	adds	r3, #50	; 0x32
 8004590:	4a95      	ldr	r2, [pc, #596]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459c:	4498      	add	r8, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	469b      	mov	fp, r3
 80045a2:	f04f 0c00 	mov.w	ip, #0
 80045a6:	46d9      	mov	r9, fp
 80045a8:	46e2      	mov	sl, ip
 80045aa:	eb19 0309 	adds.w	r3, r9, r9
 80045ae:	eb4a 040a 	adc.w	r4, sl, sl
 80045b2:	4699      	mov	r9, r3
 80045b4:	46a2      	mov	sl, r4
 80045b6:	eb19 090b 	adds.w	r9, r9, fp
 80045ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d2:	4689      	mov	r9, r1
 80045d4:	4692      	mov	sl, r2
 80045d6:	eb1b 0509 	adds.w	r5, fp, r9
 80045da:	eb4c 060a 	adc.w	r6, ip, sl
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	f04f 0400 	mov.w	r4, #0
 80045f0:	0094      	lsls	r4, r2, #2
 80045f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045f6:	008b      	lsls	r3, r1, #2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	4631      	mov	r1, r6
 8004600:	f7fb fe46 	bl	8000290 <__aeabi_uldivmod>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	461a      	mov	r2, r3
 800460a:	4b77      	ldr	r3, [pc, #476]	; (80047e8 <UART_SetConfig+0x6f4>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a72      	ldr	r2, [pc, #456]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4442      	add	r2, r8
 8004630:	609a      	str	r2, [r3, #8]
 8004632:	e0d0      	b.n	80047d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe fd7a 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 8004638:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	469a      	mov	sl, r3
 800463e:	f04f 0b00 	mov.w	fp, #0
 8004642:	46d0      	mov	r8, sl
 8004644:	46d9      	mov	r9, fp
 8004646:	eb18 0308 	adds.w	r3, r8, r8
 800464a:	eb49 0409 	adc.w	r4, r9, r9
 800464e:	4698      	mov	r8, r3
 8004650:	46a1      	mov	r9, r4
 8004652:	eb18 080a 	adds.w	r8, r8, sl
 8004656:	eb49 090b 	adc.w	r9, r9, fp
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004666:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800466a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800466e:	4688      	mov	r8, r1
 8004670:	4691      	mov	r9, r2
 8004672:	eb1a 0508 	adds.w	r5, sl, r8
 8004676:	eb4b 0609 	adc.w	r6, fp, r9
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4619      	mov	r1, r3
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	0094      	lsls	r4, r2, #2
 800468e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	461a      	mov	r2, r3
 8004696:	4623      	mov	r3, r4
 8004698:	4628      	mov	r0, r5
 800469a:	4631      	mov	r1, r6
 800469c:	f7fb fdf8 	bl	8000290 <__aeabi_uldivmod>
 80046a0:	4603      	mov	r3, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b50      	ldr	r3, [pc, #320]	; (80047e8 <UART_SetConfig+0x6f4>)
 80046a8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	469b      	mov	fp, r3
 80046b6:	f04f 0c00 	mov.w	ip, #0
 80046ba:	46d9      	mov	r9, fp
 80046bc:	46e2      	mov	sl, ip
 80046be:	eb19 0309 	adds.w	r3, r9, r9
 80046c2:	eb4a 040a 	adc.w	r4, sl, sl
 80046c6:	4699      	mov	r9, r3
 80046c8:	46a2      	mov	sl, r4
 80046ca:	eb19 090b 	adds.w	r9, r9, fp
 80046ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e6:	4689      	mov	r9, r1
 80046e8:	4692      	mov	sl, r2
 80046ea:	eb1b 0509 	adds.w	r5, fp, r9
 80046ee:	eb4c 060a 	adc.w	r6, ip, sl
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4619      	mov	r1, r3
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	0094      	lsls	r4, r2, #2
 8004706:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800470a:	008b      	lsls	r3, r1, #2
 800470c:	461a      	mov	r2, r3
 800470e:	4623      	mov	r3, r4
 8004710:	4628      	mov	r0, r5
 8004712:	4631      	mov	r1, r6
 8004714:	f7fb fdbc 	bl	8000290 <__aeabi_uldivmod>
 8004718:	4603      	mov	r3, r0
 800471a:	460c      	mov	r4, r1
 800471c:	461a      	mov	r2, r3
 800471e:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004720:	fba3 1302 	umull	r1, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2164      	movs	r1, #100	; 0x64
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473e:	4498      	add	r8, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	469b      	mov	fp, r3
 8004744:	f04f 0c00 	mov.w	ip, #0
 8004748:	46d9      	mov	r9, fp
 800474a:	46e2      	mov	sl, ip
 800474c:	eb19 0309 	adds.w	r3, r9, r9
 8004750:	eb4a 040a 	adc.w	r4, sl, sl
 8004754:	4699      	mov	r9, r3
 8004756:	46a2      	mov	sl, r4
 8004758:	eb19 090b 	adds.w	r9, r9, fp
 800475c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004774:	4689      	mov	r9, r1
 8004776:	4692      	mov	sl, r2
 8004778:	eb1b 0509 	adds.w	r5, fp, r9
 800477c:	eb4c 060a 	adc.w	r6, ip, sl
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	0094      	lsls	r4, r2, #2
 8004794:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004798:	008b      	lsls	r3, r1, #2
 800479a:	461a      	mov	r2, r3
 800479c:	4623      	mov	r3, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	4631      	mov	r1, r6
 80047a2:	f7fb fd75 	bl	8000290 <__aeabi_uldivmod>
 80047a6:	4603      	mov	r3, r0
 80047a8:	460c      	mov	r4, r1
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <UART_SetConfig+0x6f4>)
 80047ae:	fba3 1302 	umull	r1, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2164      	movs	r1, #100	; 0x64
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <UART_SetConfig+0x6f4>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 020f 	and.w	r2, r3, #15
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4442      	add	r2, r8
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	e7ff      	b.n	80047d6 <UART_SetConfig+0x6e2>
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f

080047ec <__errno>:
 80047ec:	4b01      	ldr	r3, [pc, #4]	; (80047f4 <__errno+0x8>)
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c

080047f8 <__libc_init_array>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4e0d      	ldr	r6, [pc, #52]	; (8004830 <__libc_init_array+0x38>)
 80047fc:	4c0d      	ldr	r4, [pc, #52]	; (8004834 <__libc_init_array+0x3c>)
 80047fe:	1ba4      	subs	r4, r4, r6
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	2500      	movs	r5, #0
 8004804:	42a5      	cmp	r5, r4
 8004806:	d109      	bne.n	800481c <__libc_init_array+0x24>
 8004808:	4e0b      	ldr	r6, [pc, #44]	; (8004838 <__libc_init_array+0x40>)
 800480a:	4c0c      	ldr	r4, [pc, #48]	; (800483c <__libc_init_array+0x44>)
 800480c:	f000 fc26 	bl	800505c <_init>
 8004810:	1ba4      	subs	r4, r4, r6
 8004812:	10a4      	asrs	r4, r4, #2
 8004814:	2500      	movs	r5, #0
 8004816:	42a5      	cmp	r5, r4
 8004818:	d105      	bne.n	8004826 <__libc_init_array+0x2e>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004820:	4798      	blx	r3
 8004822:	3501      	adds	r5, #1
 8004824:	e7ee      	b.n	8004804 <__libc_init_array+0xc>
 8004826:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800482a:	4798      	blx	r3
 800482c:	3501      	adds	r5, #1
 800482e:	e7f2      	b.n	8004816 <__libc_init_array+0x1e>
 8004830:	08005110 	.word	0x08005110
 8004834:	08005110 	.word	0x08005110
 8004838:	08005110 	.word	0x08005110
 800483c:	08005114 	.word	0x08005114

08004840 <memset>:
 8004840:	4402      	add	r2, r0
 8004842:	4603      	mov	r3, r0
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	f803 1b01 	strb.w	r1, [r3], #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <siprintf>:
 8004850:	b40e      	push	{r1, r2, r3}
 8004852:	b500      	push	{lr}
 8004854:	b09c      	sub	sp, #112	; 0x70
 8004856:	ab1d      	add	r3, sp, #116	; 0x74
 8004858:	9002      	str	r0, [sp, #8]
 800485a:	9006      	str	r0, [sp, #24]
 800485c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004860:	4809      	ldr	r0, [pc, #36]	; (8004888 <siprintf+0x38>)
 8004862:	9107      	str	r1, [sp, #28]
 8004864:	9104      	str	r1, [sp, #16]
 8004866:	4909      	ldr	r1, [pc, #36]	; (800488c <siprintf+0x3c>)
 8004868:	f853 2b04 	ldr.w	r2, [r3], #4
 800486c:	9105      	str	r1, [sp, #20]
 800486e:	6800      	ldr	r0, [r0, #0]
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	a902      	add	r1, sp, #8
 8004874:	f000 f866 	bl	8004944 <_svfiprintf_r>
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	b01c      	add	sp, #112	; 0x70
 8004880:	f85d eb04 	ldr.w	lr, [sp], #4
 8004884:	b003      	add	sp, #12
 8004886:	4770      	bx	lr
 8004888:	2000000c 	.word	0x2000000c
 800488c:	ffff0208 	.word	0xffff0208

08004890 <__ssputs_r>:
 8004890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	688e      	ldr	r6, [r1, #8]
 8004896:	429e      	cmp	r6, r3
 8004898:	4682      	mov	sl, r0
 800489a:	460c      	mov	r4, r1
 800489c:	4690      	mov	r8, r2
 800489e:	4699      	mov	r9, r3
 80048a0:	d837      	bhi.n	8004912 <__ssputs_r+0x82>
 80048a2:	898a      	ldrh	r2, [r1, #12]
 80048a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048a8:	d031      	beq.n	800490e <__ssputs_r+0x7e>
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	6909      	ldr	r1, [r1, #16]
 80048ae:	1a6f      	subs	r7, r5, r1
 80048b0:	6965      	ldr	r5, [r4, #20]
 80048b2:	2302      	movs	r3, #2
 80048b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80048bc:	f109 0301 	add.w	r3, r9, #1
 80048c0:	443b      	add	r3, r7
 80048c2:	429d      	cmp	r5, r3
 80048c4:	bf38      	it	cc
 80048c6:	461d      	movcc	r5, r3
 80048c8:	0553      	lsls	r3, r2, #21
 80048ca:	d530      	bpl.n	800492e <__ssputs_r+0x9e>
 80048cc:	4629      	mov	r1, r5
 80048ce:	f000 fb2b 	bl	8004f28 <_malloc_r>
 80048d2:	4606      	mov	r6, r0
 80048d4:	b950      	cbnz	r0, 80048ec <__ssputs_r+0x5c>
 80048d6:	230c      	movs	r3, #12
 80048d8:	f8ca 3000 	str.w	r3, [sl]
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ec:	463a      	mov	r2, r7
 80048ee:	6921      	ldr	r1, [r4, #16]
 80048f0:	f000 faa8 	bl	8004e44 <memcpy>
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	6126      	str	r6, [r4, #16]
 8004902:	6165      	str	r5, [r4, #20]
 8004904:	443e      	add	r6, r7
 8004906:	1bed      	subs	r5, r5, r7
 8004908:	6026      	str	r6, [r4, #0]
 800490a:	60a5      	str	r5, [r4, #8]
 800490c:	464e      	mov	r6, r9
 800490e:	454e      	cmp	r6, r9
 8004910:	d900      	bls.n	8004914 <__ssputs_r+0x84>
 8004912:	464e      	mov	r6, r9
 8004914:	4632      	mov	r2, r6
 8004916:	4641      	mov	r1, r8
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	f000 fa9e 	bl	8004e5a <memmove>
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	1b9b      	subs	r3, r3, r6
 8004922:	60a3      	str	r3, [r4, #8]
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	441e      	add	r6, r3
 8004928:	6026      	str	r6, [r4, #0]
 800492a:	2000      	movs	r0, #0
 800492c:	e7dc      	b.n	80048e8 <__ssputs_r+0x58>
 800492e:	462a      	mov	r2, r5
 8004930:	f000 fb54 	bl	8004fdc <_realloc_r>
 8004934:	4606      	mov	r6, r0
 8004936:	2800      	cmp	r0, #0
 8004938:	d1e2      	bne.n	8004900 <__ssputs_r+0x70>
 800493a:	6921      	ldr	r1, [r4, #16]
 800493c:	4650      	mov	r0, sl
 800493e:	f000 faa5 	bl	8004e8c <_free_r>
 8004942:	e7c8      	b.n	80048d6 <__ssputs_r+0x46>

08004944 <_svfiprintf_r>:
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	461d      	mov	r5, r3
 800494a:	898b      	ldrh	r3, [r1, #12]
 800494c:	061f      	lsls	r7, r3, #24
 800494e:	b09d      	sub	sp, #116	; 0x74
 8004950:	4680      	mov	r8, r0
 8004952:	460c      	mov	r4, r1
 8004954:	4616      	mov	r6, r2
 8004956:	d50f      	bpl.n	8004978 <_svfiprintf_r+0x34>
 8004958:	690b      	ldr	r3, [r1, #16]
 800495a:	b96b      	cbnz	r3, 8004978 <_svfiprintf_r+0x34>
 800495c:	2140      	movs	r1, #64	; 0x40
 800495e:	f000 fae3 	bl	8004f28 <_malloc_r>
 8004962:	6020      	str	r0, [r4, #0]
 8004964:	6120      	str	r0, [r4, #16]
 8004966:	b928      	cbnz	r0, 8004974 <_svfiprintf_r+0x30>
 8004968:	230c      	movs	r3, #12
 800496a:	f8c8 3000 	str.w	r3, [r8]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295
 8004972:	e0c8      	b.n	8004b06 <_svfiprintf_r+0x1c2>
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	6163      	str	r3, [r4, #20]
 8004978:	2300      	movs	r3, #0
 800497a:	9309      	str	r3, [sp, #36]	; 0x24
 800497c:	2320      	movs	r3, #32
 800497e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004982:	2330      	movs	r3, #48	; 0x30
 8004984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004988:	9503      	str	r5, [sp, #12]
 800498a:	f04f 0b01 	mov.w	fp, #1
 800498e:	4637      	mov	r7, r6
 8004990:	463d      	mov	r5, r7
 8004992:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004996:	b10b      	cbz	r3, 800499c <_svfiprintf_r+0x58>
 8004998:	2b25      	cmp	r3, #37	; 0x25
 800499a:	d13e      	bne.n	8004a1a <_svfiprintf_r+0xd6>
 800499c:	ebb7 0a06 	subs.w	sl, r7, r6
 80049a0:	d00b      	beq.n	80049ba <_svfiprintf_r+0x76>
 80049a2:	4653      	mov	r3, sl
 80049a4:	4632      	mov	r2, r6
 80049a6:	4621      	mov	r1, r4
 80049a8:	4640      	mov	r0, r8
 80049aa:	f7ff ff71 	bl	8004890 <__ssputs_r>
 80049ae:	3001      	adds	r0, #1
 80049b0:	f000 80a4 	beq.w	8004afc <_svfiprintf_r+0x1b8>
 80049b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b6:	4453      	add	r3, sl
 80049b8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ba:	783b      	ldrb	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 809d 	beq.w	8004afc <_svfiprintf_r+0x1b8>
 80049c2:	2300      	movs	r3, #0
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049cc:	9304      	str	r3, [sp, #16]
 80049ce:	9307      	str	r3, [sp, #28]
 80049d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049d4:	931a      	str	r3, [sp, #104]	; 0x68
 80049d6:	462f      	mov	r7, r5
 80049d8:	2205      	movs	r2, #5
 80049da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80049de:	4850      	ldr	r0, [pc, #320]	; (8004b20 <_svfiprintf_r+0x1dc>)
 80049e0:	f7fb fc06 	bl	80001f0 <memchr>
 80049e4:	9b04      	ldr	r3, [sp, #16]
 80049e6:	b9d0      	cbnz	r0, 8004a1e <_svfiprintf_r+0xda>
 80049e8:	06d9      	lsls	r1, r3, #27
 80049ea:	bf44      	itt	mi
 80049ec:	2220      	movmi	r2, #32
 80049ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049f2:	071a      	lsls	r2, r3, #28
 80049f4:	bf44      	itt	mi
 80049f6:	222b      	movmi	r2, #43	; 0x2b
 80049f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049fc:	782a      	ldrb	r2, [r5, #0]
 80049fe:	2a2a      	cmp	r2, #42	; 0x2a
 8004a00:	d015      	beq.n	8004a2e <_svfiprintf_r+0xea>
 8004a02:	9a07      	ldr	r2, [sp, #28]
 8004a04:	462f      	mov	r7, r5
 8004a06:	2000      	movs	r0, #0
 8004a08:	250a      	movs	r5, #10
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a10:	3b30      	subs	r3, #48	; 0x30
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d94d      	bls.n	8004ab2 <_svfiprintf_r+0x16e>
 8004a16:	b1b8      	cbz	r0, 8004a48 <_svfiprintf_r+0x104>
 8004a18:	e00f      	b.n	8004a3a <_svfiprintf_r+0xf6>
 8004a1a:	462f      	mov	r7, r5
 8004a1c:	e7b8      	b.n	8004990 <_svfiprintf_r+0x4c>
 8004a1e:	4a40      	ldr	r2, [pc, #256]	; (8004b20 <_svfiprintf_r+0x1dc>)
 8004a20:	1a80      	subs	r0, r0, r2
 8004a22:	fa0b f000 	lsl.w	r0, fp, r0
 8004a26:	4318      	orrs	r0, r3
 8004a28:	9004      	str	r0, [sp, #16]
 8004a2a:	463d      	mov	r5, r7
 8004a2c:	e7d3      	b.n	80049d6 <_svfiprintf_r+0x92>
 8004a2e:	9a03      	ldr	r2, [sp, #12]
 8004a30:	1d11      	adds	r1, r2, #4
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	9103      	str	r1, [sp, #12]
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	db01      	blt.n	8004a3e <_svfiprintf_r+0xfa>
 8004a3a:	9207      	str	r2, [sp, #28]
 8004a3c:	e004      	b.n	8004a48 <_svfiprintf_r+0x104>
 8004a3e:	4252      	negs	r2, r2
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	9207      	str	r2, [sp, #28]
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	783b      	ldrb	r3, [r7, #0]
 8004a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a4c:	d10c      	bne.n	8004a68 <_svfiprintf_r+0x124>
 8004a4e:	787b      	ldrb	r3, [r7, #1]
 8004a50:	2b2a      	cmp	r3, #42	; 0x2a
 8004a52:	d133      	bne.n	8004abc <_svfiprintf_r+0x178>
 8004a54:	9b03      	ldr	r3, [sp, #12]
 8004a56:	1d1a      	adds	r2, r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	9203      	str	r2, [sp, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bfb8      	it	lt
 8004a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a64:	3702      	adds	r7, #2
 8004a66:	9305      	str	r3, [sp, #20]
 8004a68:	4d2e      	ldr	r5, [pc, #184]	; (8004b24 <_svfiprintf_r+0x1e0>)
 8004a6a:	7839      	ldrb	r1, [r7, #0]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7fb fbbe 	bl	80001f0 <memchr>
 8004a74:	b138      	cbz	r0, 8004a86 <_svfiprintf_r+0x142>
 8004a76:	2340      	movs	r3, #64	; 0x40
 8004a78:	1b40      	subs	r0, r0, r5
 8004a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	4303      	orrs	r3, r0
 8004a82:	3701      	adds	r7, #1
 8004a84:	9304      	str	r3, [sp, #16]
 8004a86:	7839      	ldrb	r1, [r7, #0]
 8004a88:	4827      	ldr	r0, [pc, #156]	; (8004b28 <_svfiprintf_r+0x1e4>)
 8004a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a8e:	2206      	movs	r2, #6
 8004a90:	1c7e      	adds	r6, r7, #1
 8004a92:	f7fb fbad 	bl	80001f0 <memchr>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d038      	beq.n	8004b0c <_svfiprintf_r+0x1c8>
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <_svfiprintf_r+0x1e8>)
 8004a9c:	bb13      	cbnz	r3, 8004ae4 <_svfiprintf_r+0x1a0>
 8004a9e:	9b03      	ldr	r3, [sp, #12]
 8004aa0:	3307      	adds	r3, #7
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	9303      	str	r3, [sp, #12]
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	444b      	add	r3, r9
 8004aae:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab0:	e76d      	b.n	800498e <_svfiprintf_r+0x4a>
 8004ab2:	fb05 3202 	mla	r2, r5, r2, r3
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	460f      	mov	r7, r1
 8004aba:	e7a6      	b.n	8004a0a <_svfiprintf_r+0xc6>
 8004abc:	2300      	movs	r3, #0
 8004abe:	3701      	adds	r7, #1
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	250a      	movs	r5, #10
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004acc:	3a30      	subs	r2, #48	; 0x30
 8004ace:	2a09      	cmp	r2, #9
 8004ad0:	d903      	bls.n	8004ada <_svfiprintf_r+0x196>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0c8      	beq.n	8004a68 <_svfiprintf_r+0x124>
 8004ad6:	9105      	str	r1, [sp, #20]
 8004ad8:	e7c6      	b.n	8004a68 <_svfiprintf_r+0x124>
 8004ada:	fb05 2101 	mla	r1, r5, r1, r2
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	e7f0      	b.n	8004ac6 <_svfiprintf_r+0x182>
 8004ae4:	ab03      	add	r3, sp, #12
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <_svfiprintf_r+0x1ec>)
 8004aec:	a904      	add	r1, sp, #16
 8004aee:	4640      	mov	r0, r8
 8004af0:	f3af 8000 	nop.w
 8004af4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004af8:	4681      	mov	r9, r0
 8004afa:	d1d6      	bne.n	8004aaa <_svfiprintf_r+0x166>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	065b      	lsls	r3, r3, #25
 8004b00:	f53f af35 	bmi.w	800496e <_svfiprintf_r+0x2a>
 8004b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b06:	b01d      	add	sp, #116	; 0x74
 8004b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0c:	ab03      	add	r3, sp, #12
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4622      	mov	r2, r4
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <_svfiprintf_r+0x1ec>)
 8004b14:	a904      	add	r1, sp, #16
 8004b16:	4640      	mov	r0, r8
 8004b18:	f000 f882 	bl	8004c20 <_printf_i>
 8004b1c:	e7ea      	b.n	8004af4 <_svfiprintf_r+0x1b0>
 8004b1e:	bf00      	nop
 8004b20:	080050d4 	.word	0x080050d4
 8004b24:	080050da 	.word	0x080050da
 8004b28:	080050de 	.word	0x080050de
 8004b2c:	00000000 	.word	0x00000000
 8004b30:	08004891 	.word	0x08004891

08004b34 <_printf_common>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	4691      	mov	r9, r2
 8004b3a:	461f      	mov	r7, r3
 8004b3c:	688a      	ldr	r2, [r1, #8]
 8004b3e:	690b      	ldr	r3, [r1, #16]
 8004b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b44:	4293      	cmp	r3, r2
 8004b46:	bfb8      	it	lt
 8004b48:	4613      	movlt	r3, r2
 8004b4a:	f8c9 3000 	str.w	r3, [r9]
 8004b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b52:	4606      	mov	r6, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	b112      	cbz	r2, 8004b5e <_printf_common+0x2a>
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f8c9 3000 	str.w	r3, [r9]
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	0699      	lsls	r1, r3, #26
 8004b62:	bf42      	ittt	mi
 8004b64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b68:	3302      	addmi	r3, #2
 8004b6a:	f8c9 3000 	strmi.w	r3, [r9]
 8004b6e:	6825      	ldr	r5, [r4, #0]
 8004b70:	f015 0506 	ands.w	r5, r5, #6
 8004b74:	d107      	bne.n	8004b86 <_printf_common+0x52>
 8004b76:	f104 0a19 	add.w	sl, r4, #25
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	42ab      	cmp	r3, r5
 8004b84:	dc28      	bgt.n	8004bd8 <_printf_common+0xa4>
 8004b86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	3300      	adds	r3, #0
 8004b8e:	bf18      	it	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	0692      	lsls	r2, r2, #26
 8004b94:	d42d      	bmi.n	8004bf2 <_printf_common+0xbe>
 8004b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	47c0      	blx	r8
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d020      	beq.n	8004be6 <_printf_common+0xb2>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	68e5      	ldr	r5, [r4, #12]
 8004ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8004bac:	f003 0306 	and.w	r3, r3, #6
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	bf08      	it	eq
 8004bb4:	1aad      	subeq	r5, r5, r2
 8004bb6:	68a3      	ldr	r3, [r4, #8]
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	bf0c      	ite	eq
 8004bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc0:	2500      	movne	r5, #0
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	bfc4      	itt	gt
 8004bc6:	1a9b      	subgt	r3, r3, r2
 8004bc8:	18ed      	addgt	r5, r5, r3
 8004bca:	f04f 0900 	mov.w	r9, #0
 8004bce:	341a      	adds	r4, #26
 8004bd0:	454d      	cmp	r5, r9
 8004bd2:	d11a      	bne.n	8004c0a <_printf_common+0xd6>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e008      	b.n	8004bea <_printf_common+0xb6>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4652      	mov	r2, sl
 8004bdc:	4639      	mov	r1, r7
 8004bde:	4630      	mov	r0, r6
 8004be0:	47c0      	blx	r8
 8004be2:	3001      	adds	r0, #1
 8004be4:	d103      	bne.n	8004bee <_printf_common+0xba>
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bee:	3501      	adds	r5, #1
 8004bf0:	e7c3      	b.n	8004b7a <_printf_common+0x46>
 8004bf2:	18e1      	adds	r1, r4, r3
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	2030      	movs	r0, #48	; 0x30
 8004bf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bfc:	4422      	add	r2, r4
 8004bfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c06:	3302      	adds	r3, #2
 8004c08:	e7c5      	b.n	8004b96 <_printf_common+0x62>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	4639      	mov	r1, r7
 8004c10:	4630      	mov	r0, r6
 8004c12:	47c0      	blx	r8
 8004c14:	3001      	adds	r0, #1
 8004c16:	d0e6      	beq.n	8004be6 <_printf_common+0xb2>
 8004c18:	f109 0901 	add.w	r9, r9, #1
 8004c1c:	e7d8      	b.n	8004bd0 <_printf_common+0x9c>
	...

08004c20 <_printf_i>:
 8004c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c28:	460c      	mov	r4, r1
 8004c2a:	7e09      	ldrb	r1, [r1, #24]
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	296e      	cmp	r1, #110	; 0x6e
 8004c30:	4617      	mov	r7, r2
 8004c32:	4606      	mov	r6, r0
 8004c34:	4698      	mov	r8, r3
 8004c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c38:	f000 80b3 	beq.w	8004da2 <_printf_i+0x182>
 8004c3c:	d822      	bhi.n	8004c84 <_printf_i+0x64>
 8004c3e:	2963      	cmp	r1, #99	; 0x63
 8004c40:	d036      	beq.n	8004cb0 <_printf_i+0x90>
 8004c42:	d80a      	bhi.n	8004c5a <_printf_i+0x3a>
 8004c44:	2900      	cmp	r1, #0
 8004c46:	f000 80b9 	beq.w	8004dbc <_printf_i+0x19c>
 8004c4a:	2958      	cmp	r1, #88	; 0x58
 8004c4c:	f000 8083 	beq.w	8004d56 <_printf_i+0x136>
 8004c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c58:	e032      	b.n	8004cc0 <_printf_i+0xa0>
 8004c5a:	2964      	cmp	r1, #100	; 0x64
 8004c5c:	d001      	beq.n	8004c62 <_printf_i+0x42>
 8004c5e:	2969      	cmp	r1, #105	; 0x69
 8004c60:	d1f6      	bne.n	8004c50 <_printf_i+0x30>
 8004c62:	6820      	ldr	r0, [r4, #0]
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	0605      	lsls	r5, r0, #24
 8004c68:	f103 0104 	add.w	r1, r3, #4
 8004c6c:	d52a      	bpl.n	8004cc4 <_printf_i+0xa4>
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6011      	str	r1, [r2, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da03      	bge.n	8004c7e <_printf_i+0x5e>
 8004c76:	222d      	movs	r2, #45	; 0x2d
 8004c78:	425b      	negs	r3, r3
 8004c7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c7e:	486f      	ldr	r0, [pc, #444]	; (8004e3c <_printf_i+0x21c>)
 8004c80:	220a      	movs	r2, #10
 8004c82:	e039      	b.n	8004cf8 <_printf_i+0xd8>
 8004c84:	2973      	cmp	r1, #115	; 0x73
 8004c86:	f000 809d 	beq.w	8004dc4 <_printf_i+0x1a4>
 8004c8a:	d808      	bhi.n	8004c9e <_printf_i+0x7e>
 8004c8c:	296f      	cmp	r1, #111	; 0x6f
 8004c8e:	d020      	beq.n	8004cd2 <_printf_i+0xb2>
 8004c90:	2970      	cmp	r1, #112	; 0x70
 8004c92:	d1dd      	bne.n	8004c50 <_printf_i+0x30>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	f043 0320 	orr.w	r3, r3, #32
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	e003      	b.n	8004ca6 <_printf_i+0x86>
 8004c9e:	2975      	cmp	r1, #117	; 0x75
 8004ca0:	d017      	beq.n	8004cd2 <_printf_i+0xb2>
 8004ca2:	2978      	cmp	r1, #120	; 0x78
 8004ca4:	d1d4      	bne.n	8004c50 <_printf_i+0x30>
 8004ca6:	2378      	movs	r3, #120	; 0x78
 8004ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cac:	4864      	ldr	r0, [pc, #400]	; (8004e40 <_printf_i+0x220>)
 8004cae:	e055      	b.n	8004d5c <_printf_i+0x13c>
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	1d19      	adds	r1, r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6011      	str	r1, [r2, #0]
 8004cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e08c      	b.n	8004dde <_printf_i+0x1be>
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6011      	str	r1, [r2, #0]
 8004cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ccc:	bf18      	it	ne
 8004cce:	b21b      	sxthne	r3, r3
 8004cd0:	e7cf      	b.n	8004c72 <_printf_i+0x52>
 8004cd2:	6813      	ldr	r3, [r2, #0]
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	1d18      	adds	r0, r3, #4
 8004cd8:	6010      	str	r0, [r2, #0]
 8004cda:	0628      	lsls	r0, r5, #24
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_i+0xc2>
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	e002      	b.n	8004ce8 <_printf_i+0xc8>
 8004ce2:	0668      	lsls	r0, r5, #25
 8004ce4:	d5fb      	bpl.n	8004cde <_printf_i+0xbe>
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	4854      	ldr	r0, [pc, #336]	; (8004e3c <_printf_i+0x21c>)
 8004cea:	296f      	cmp	r1, #111	; 0x6f
 8004cec:	bf14      	ite	ne
 8004cee:	220a      	movne	r2, #10
 8004cf0:	2208      	moveq	r2, #8
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf8:	6865      	ldr	r5, [r4, #4]
 8004cfa:	60a5      	str	r5, [r4, #8]
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	f2c0 8095 	blt.w	8004e2c <_printf_i+0x20c>
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	f021 0104 	bic.w	r1, r1, #4
 8004d08:	6021      	str	r1, [r4, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d13d      	bne.n	8004d8a <_printf_i+0x16a>
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	f040 808e 	bne.w	8004e30 <_printf_i+0x210>
 8004d14:	4665      	mov	r5, ip
 8004d16:	2a08      	cmp	r2, #8
 8004d18:	d10b      	bne.n	8004d32 <_printf_i+0x112>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	07db      	lsls	r3, r3, #31
 8004d1e:	d508      	bpl.n	8004d32 <_printf_i+0x112>
 8004d20:	6923      	ldr	r3, [r4, #16]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	bfde      	ittt	le
 8004d28:	2330      	movle	r3, #48	; 0x30
 8004d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d32:	ebac 0305 	sub.w	r3, ip, r5
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	f8cd 8000 	str.w	r8, [sp]
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	aa03      	add	r2, sp, #12
 8004d40:	4621      	mov	r1, r4
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff fef6 	bl	8004b34 <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d14d      	bne.n	8004de8 <_printf_i+0x1c8>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	b005      	add	sp, #20
 8004d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d56:	4839      	ldr	r0, [pc, #228]	; (8004e3c <_printf_i+0x21c>)
 8004d58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	6821      	ldr	r1, [r4, #0]
 8004d60:	1d1d      	adds	r5, r3, #4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6015      	str	r5, [r2, #0]
 8004d66:	060a      	lsls	r2, r1, #24
 8004d68:	d50b      	bpl.n	8004d82 <_printf_i+0x162>
 8004d6a:	07ca      	lsls	r2, r1, #31
 8004d6c:	bf44      	itt	mi
 8004d6e:	f041 0120 	orrmi.w	r1, r1, #32
 8004d72:	6021      	strmi	r1, [r4, #0]
 8004d74:	b91b      	cbnz	r3, 8004d7e <_printf_i+0x15e>
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	f022 0220 	bic.w	r2, r2, #32
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	2210      	movs	r2, #16
 8004d80:	e7b7      	b.n	8004cf2 <_printf_i+0xd2>
 8004d82:	064d      	lsls	r5, r1, #25
 8004d84:	bf48      	it	mi
 8004d86:	b29b      	uxthmi	r3, r3
 8004d88:	e7ef      	b.n	8004d6a <_printf_i+0x14a>
 8004d8a:	4665      	mov	r5, ip
 8004d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d90:	fb02 3311 	mls	r3, r2, r1, r3
 8004d94:	5cc3      	ldrb	r3, [r0, r3]
 8004d96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d1f5      	bne.n	8004d8c <_printf_i+0x16c>
 8004da0:	e7b9      	b.n	8004d16 <_printf_i+0xf6>
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	6825      	ldr	r5, [r4, #0]
 8004da6:	6961      	ldr	r1, [r4, #20]
 8004da8:	1d18      	adds	r0, r3, #4
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	0628      	lsls	r0, r5, #24
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	d501      	bpl.n	8004db6 <_printf_i+0x196>
 8004db2:	6019      	str	r1, [r3, #0]
 8004db4:	e002      	b.n	8004dbc <_printf_i+0x19c>
 8004db6:	066a      	lsls	r2, r5, #25
 8004db8:	d5fb      	bpl.n	8004db2 <_printf_i+0x192>
 8004dba:	8019      	strh	r1, [r3, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	4665      	mov	r5, ip
 8004dc2:	e7b9      	b.n	8004d38 <_printf_i+0x118>
 8004dc4:	6813      	ldr	r3, [r2, #0]
 8004dc6:	1d19      	adds	r1, r3, #4
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	681d      	ldr	r5, [r3, #0]
 8004dcc:	6862      	ldr	r2, [r4, #4]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f7fb fa0d 	bl	80001f0 <memchr>
 8004dd6:	b108      	cbz	r0, 8004ddc <_printf_i+0x1bc>
 8004dd8:	1b40      	subs	r0, r0, r5
 8004dda:	6060      	str	r0, [r4, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	2300      	movs	r3, #0
 8004de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de6:	e7a7      	b.n	8004d38 <_printf_i+0x118>
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4639      	mov	r1, r7
 8004dee:	4630      	mov	r0, r6
 8004df0:	47c0      	blx	r8
 8004df2:	3001      	adds	r0, #1
 8004df4:	d0aa      	beq.n	8004d4c <_printf_i+0x12c>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	079b      	lsls	r3, r3, #30
 8004dfa:	d413      	bmi.n	8004e24 <_printf_i+0x204>
 8004dfc:	68e0      	ldr	r0, [r4, #12]
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	4298      	cmp	r0, r3
 8004e02:	bfb8      	it	lt
 8004e04:	4618      	movlt	r0, r3
 8004e06:	e7a3      	b.n	8004d50 <_printf_i+0x130>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	464a      	mov	r2, r9
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	47c0      	blx	r8
 8004e12:	3001      	adds	r0, #1
 8004e14:	d09a      	beq.n	8004d4c <_printf_i+0x12c>
 8004e16:	3501      	adds	r5, #1
 8004e18:	68e3      	ldr	r3, [r4, #12]
 8004e1a:	9a03      	ldr	r2, [sp, #12]
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	42ab      	cmp	r3, r5
 8004e20:	dcf2      	bgt.n	8004e08 <_printf_i+0x1e8>
 8004e22:	e7eb      	b.n	8004dfc <_printf_i+0x1dc>
 8004e24:	2500      	movs	r5, #0
 8004e26:	f104 0919 	add.w	r9, r4, #25
 8004e2a:	e7f5      	b.n	8004e18 <_printf_i+0x1f8>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ac      	bne.n	8004d8a <_printf_i+0x16a>
 8004e30:	7803      	ldrb	r3, [r0, #0]
 8004e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3a:	e76c      	b.n	8004d16 <_printf_i+0xf6>
 8004e3c:	080050e5 	.word	0x080050e5
 8004e40:	080050f6 	.word	0x080050f6

08004e44 <memcpy>:
 8004e44:	b510      	push	{r4, lr}
 8004e46:	1e43      	subs	r3, r0, #1
 8004e48:	440a      	add	r2, r1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	bd10      	pop	{r4, pc}
 8004e50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e58:	e7f7      	b.n	8004e4a <memcpy+0x6>

08004e5a <memmove>:
 8004e5a:	4288      	cmp	r0, r1
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	eb01 0302 	add.w	r3, r1, r2
 8004e62:	d807      	bhi.n	8004e74 <memmove+0x1a>
 8004e64:	1e42      	subs	r2, r0, #1
 8004e66:	4299      	cmp	r1, r3
 8004e68:	d00a      	beq.n	8004e80 <memmove+0x26>
 8004e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e72:	e7f8      	b.n	8004e66 <memmove+0xc>
 8004e74:	4283      	cmp	r3, r0
 8004e76:	d9f5      	bls.n	8004e64 <memmove+0xa>
 8004e78:	1881      	adds	r1, r0, r2
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	42d3      	cmn	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <memmove+0x28>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e8a:	e7f7      	b.n	8004e7c <memmove+0x22>

08004e8c <_free_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d045      	beq.n	8004f20 <_free_r+0x94>
 8004e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e98:	1f0c      	subs	r4, r1, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	18e4      	addlt	r4, r4, r3
 8004ea0:	f000 f8d2 	bl	8005048 <__malloc_lock>
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <_free_r+0x98>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	b933      	cbnz	r3, 8004eba <_free_r+0x2e>
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6014      	str	r4, [r2, #0]
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb6:	f000 b8c8 	b.w	800504a <__malloc_unlock>
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	d90c      	bls.n	8004ed8 <_free_r+0x4c>
 8004ebe:	6821      	ldr	r1, [r4, #0]
 8004ec0:	1862      	adds	r2, r4, r1
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bf04      	itt	eq
 8004ec6:	681a      	ldreq	r2, [r3, #0]
 8004ec8:	685b      	ldreq	r3, [r3, #4]
 8004eca:	6063      	str	r3, [r4, #4]
 8004ecc:	bf04      	itt	eq
 8004ece:	1852      	addeq	r2, r2, r1
 8004ed0:	6022      	streq	r2, [r4, #0]
 8004ed2:	6004      	str	r4, [r0, #0]
 8004ed4:	e7ec      	b.n	8004eb0 <_free_r+0x24>
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	b10a      	cbz	r2, 8004ee0 <_free_r+0x54>
 8004edc:	42a2      	cmp	r2, r4
 8004ede:	d9fa      	bls.n	8004ed6 <_free_r+0x4a>
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	1858      	adds	r0, r3, r1
 8004ee4:	42a0      	cmp	r0, r4
 8004ee6:	d10b      	bne.n	8004f00 <_free_r+0x74>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	4401      	add	r1, r0
 8004eec:	1858      	adds	r0, r3, r1
 8004eee:	4282      	cmp	r2, r0
 8004ef0:	6019      	str	r1, [r3, #0]
 8004ef2:	d1dd      	bne.n	8004eb0 <_free_r+0x24>
 8004ef4:	6810      	ldr	r0, [r2, #0]
 8004ef6:	6852      	ldr	r2, [r2, #4]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	4401      	add	r1, r0
 8004efc:	6019      	str	r1, [r3, #0]
 8004efe:	e7d7      	b.n	8004eb0 <_free_r+0x24>
 8004f00:	d902      	bls.n	8004f08 <_free_r+0x7c>
 8004f02:	230c      	movs	r3, #12
 8004f04:	602b      	str	r3, [r5, #0]
 8004f06:	e7d3      	b.n	8004eb0 <_free_r+0x24>
 8004f08:	6820      	ldr	r0, [r4, #0]
 8004f0a:	1821      	adds	r1, r4, r0
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	bf04      	itt	eq
 8004f10:	6811      	ldreq	r1, [r2, #0]
 8004f12:	6852      	ldreq	r2, [r2, #4]
 8004f14:	6062      	str	r2, [r4, #4]
 8004f16:	bf04      	itt	eq
 8004f18:	1809      	addeq	r1, r1, r0
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	605c      	str	r4, [r3, #4]
 8004f1e:	e7c7      	b.n	8004eb0 <_free_r+0x24>
 8004f20:	bd38      	pop	{r3, r4, r5, pc}
 8004f22:	bf00      	nop
 8004f24:	20000094 	.word	0x20000094

08004f28 <_malloc_r>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	1ccd      	adds	r5, r1, #3
 8004f2c:	f025 0503 	bic.w	r5, r5, #3
 8004f30:	3508      	adds	r5, #8
 8004f32:	2d0c      	cmp	r5, #12
 8004f34:	bf38      	it	cc
 8004f36:	250c      	movcc	r5, #12
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	db01      	blt.n	8004f42 <_malloc_r+0x1a>
 8004f3e:	42a9      	cmp	r1, r5
 8004f40:	d903      	bls.n	8004f4a <_malloc_r+0x22>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	2000      	movs	r0, #0
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
 8004f4a:	f000 f87d 	bl	8005048 <__malloc_lock>
 8004f4e:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <_malloc_r+0xac>)
 8004f50:	6814      	ldr	r4, [r2, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	b991      	cbnz	r1, 8004f7c <_malloc_r+0x54>
 8004f56:	4c20      	ldr	r4, [pc, #128]	; (8004fd8 <_malloc_r+0xb0>)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	b91b      	cbnz	r3, 8004f64 <_malloc_r+0x3c>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f863 	bl	8005028 <_sbrk_r>
 8004f62:	6020      	str	r0, [r4, #0]
 8004f64:	4629      	mov	r1, r5
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f85e 	bl	8005028 <_sbrk_r>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d124      	bne.n	8004fba <_malloc_r+0x92>
 8004f70:	230c      	movs	r3, #12
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 f868 	bl	800504a <__malloc_unlock>
 8004f7a:	e7e4      	b.n	8004f46 <_malloc_r+0x1e>
 8004f7c:	680b      	ldr	r3, [r1, #0]
 8004f7e:	1b5b      	subs	r3, r3, r5
 8004f80:	d418      	bmi.n	8004fb4 <_malloc_r+0x8c>
 8004f82:	2b0b      	cmp	r3, #11
 8004f84:	d90f      	bls.n	8004fa6 <_malloc_r+0x7e>
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	50cd      	str	r5, [r1, r3]
 8004f8a:	18cc      	adds	r4, r1, r3
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f000 f85c 	bl	800504a <__malloc_unlock>
 8004f92:	f104 000b 	add.w	r0, r4, #11
 8004f96:	1d23      	adds	r3, r4, #4
 8004f98:	f020 0007 	bic.w	r0, r0, #7
 8004f9c:	1ac3      	subs	r3, r0, r3
 8004f9e:	d0d3      	beq.n	8004f48 <_malloc_r+0x20>
 8004fa0:	425a      	negs	r2, r3
 8004fa2:	50e2      	str	r2, [r4, r3]
 8004fa4:	e7d0      	b.n	8004f48 <_malloc_r+0x20>
 8004fa6:	428c      	cmp	r4, r1
 8004fa8:	684b      	ldr	r3, [r1, #4]
 8004faa:	bf16      	itet	ne
 8004fac:	6063      	strne	r3, [r4, #4]
 8004fae:	6013      	streq	r3, [r2, #0]
 8004fb0:	460c      	movne	r4, r1
 8004fb2:	e7eb      	b.n	8004f8c <_malloc_r+0x64>
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	6849      	ldr	r1, [r1, #4]
 8004fb8:	e7cc      	b.n	8004f54 <_malloc_r+0x2c>
 8004fba:	1cc4      	adds	r4, r0, #3
 8004fbc:	f024 0403 	bic.w	r4, r4, #3
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d005      	beq.n	8004fd0 <_malloc_r+0xa8>
 8004fc4:	1a21      	subs	r1, r4, r0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f82e 	bl	8005028 <_sbrk_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0cf      	beq.n	8004f70 <_malloc_r+0x48>
 8004fd0:	6025      	str	r5, [r4, #0]
 8004fd2:	e7db      	b.n	8004f8c <_malloc_r+0x64>
 8004fd4:	20000094 	.word	0x20000094
 8004fd8:	20000098 	.word	0x20000098

08004fdc <_realloc_r>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	4607      	mov	r7, r0
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	460e      	mov	r6, r1
 8004fe4:	b921      	cbnz	r1, 8004ff0 <_realloc_r+0x14>
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fec:	f7ff bf9c 	b.w	8004f28 <_malloc_r>
 8004ff0:	b922      	cbnz	r2, 8004ffc <_realloc_r+0x20>
 8004ff2:	f7ff ff4b 	bl	8004e8c <_free_r>
 8004ff6:	4625      	mov	r5, r4
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffc:	f000 f826 	bl	800504c <_malloc_usable_size_r>
 8005000:	42a0      	cmp	r0, r4
 8005002:	d20f      	bcs.n	8005024 <_realloc_r+0x48>
 8005004:	4621      	mov	r1, r4
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff ff8e 	bl	8004f28 <_malloc_r>
 800500c:	4605      	mov	r5, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d0f2      	beq.n	8004ff8 <_realloc_r+0x1c>
 8005012:	4631      	mov	r1, r6
 8005014:	4622      	mov	r2, r4
 8005016:	f7ff ff15 	bl	8004e44 <memcpy>
 800501a:	4631      	mov	r1, r6
 800501c:	4638      	mov	r0, r7
 800501e:	f7ff ff35 	bl	8004e8c <_free_r>
 8005022:	e7e9      	b.n	8004ff8 <_realloc_r+0x1c>
 8005024:	4635      	mov	r5, r6
 8005026:	e7e7      	b.n	8004ff8 <_realloc_r+0x1c>

08005028 <_sbrk_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4c06      	ldr	r4, [pc, #24]	; (8005044 <_sbrk_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4605      	mov	r5, r0
 8005030:	4608      	mov	r0, r1
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	f7fc fbae 	bl	8001794 <_sbrk>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_sbrk_r+0x1a>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	b103      	cbz	r3, 8005042 <_sbrk_r+0x1a>
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200004a0 	.word	0x200004a0

08005048 <__malloc_lock>:
 8005048:	4770      	bx	lr

0800504a <__malloc_unlock>:
 800504a:	4770      	bx	lr

0800504c <_malloc_usable_size_r>:
 800504c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005050:	1f18      	subs	r0, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	bfbc      	itt	lt
 8005056:	580b      	ldrlt	r3, [r1, r0]
 8005058:	18c0      	addlt	r0, r0, r3
 800505a:	4770      	bx	lr

0800505c <_init>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr

08005068 <_fini>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr
